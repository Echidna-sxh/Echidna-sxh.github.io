{
    "version": "https://jsonfeed.org/version/1",
    "title": "Echidna的小窝",
    "subtitle": "l am the bone of my sword",
    "icon": "https://echidna-sxh.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://echidna-sxh.github.io",
    "items": [
        {
            "id": "https://echidna-sxh.github.io/llzy/llzy/",
            "url": "https://echidna-sxh.github.io/llzy/llzy/",
            "title": "零落之羽",
            "date_published": "2021-09-11T08:29:28.000Z",
            "content_html": "<h1 id=\"同剧本游戏下载链接\"><a class=\"anchor\" href=\"#同剧本游戏下载链接\">#</a> 同剧本游戏下载链接</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMTFyaXpKRWEtYmt3d1YxSkliVnNQSkE=\">百度网盘</span> 提取码：1evz</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvU1R3UDRvSm4zeGs=\">阿里网盘</span></p>\n<h1 id=\"草稿\"><a class=\"anchor\" href=\"#草稿\">#</a> 草稿</h1>\n<h2 id=\"最终决断\"><a class=\"anchor\" href=\"#最终决断\">#</a> 最终决断</h2>\n<p>“这个世代，终究走到这一步了吗？”</p>\n<p>一个声音从男人的脑中传出，没有人听见，除了他自己。</p>\n<p>“我想试试，那最后的可能性。” 男人开口。</p>\n<p>空气依然一片寂静，一个女人跟在他身后，默默注视着他。</p>\n<p>“那我最后再提醒你一句，这一切都是徒劳，我的建议依然是放弃这个世代，等待下一个文明，然后重新开始。”</p>\n<p>脑中的声音在劝说自己，男人迟疑，看向身后的女人。</p>\n<p>“到了最后的决定时刻了吗，弗莱”，女人走上前，“不管你怎么选择，我都会支持你。”</p>\n<p>“雪莉 ————” 男人抱住女人，轻声地喊着她的名字。</p>\n<p>“我现在依然抱有希望”，女人抬起头，“所以如果你不放弃，我会陪你一起，背负整个世界。”</p>\n<p>“这就是你的选择吗”，弗莱抚摸着雪莉的额头，释怀般地笑着，“优柔寡断的反而是我啊。”</p>\n<p>“你在外面等我吧，” 弗莱转过身，深吸了一口气，向前了几步，“老家伙，我决定了。”</p>\n<p>“真是愚蠢的想法，不过是浪费时间罢了。” 脑中的声音再次响起，“不过决定权在你，以我的立场，我阻止不了你的一意孤行，决定了的话，这把钥匙就拿去吧。”</p>\n<p>弗莱的脑中浮现出一长串不属于这个时代的文字，仿佛与生俱来一般烙印在了记忆里。</p>\n<p>“这就是解开暗能黑洞的密钥吗。” 弗莱继续向前走着，这把钥匙，会招致再一次的毁灭吗？</p>\n<p>这是一片深邃的通道，弗莱感觉到了有股无形的力量压迫着自己，越往前，这种感觉越强烈。</p>\n<p>“虽然要陪你徒劳一场，不过偶尔活动一下暗能中枢的感觉还是不错的。”</p>\n<p>“你的名字叫什么？”</p>\n<p>“不是早说过这不重要了吗。”</p>\n<p>“接下来会和你一起度过很长的时间，不能一直叫你老家伙吧。”</p>\n<p>“......”</p>\n<p>“卜思尔。卡斯特拉。尼奥罗思。”</p>\n<p>“奇怪的发音，上一个世代的人都是这种名字吗。”</p>\n<p>“有意见那就别叫了，一个毁灭世代的人名本身就没有什么意义。”</p>\n<p>“可以简短一点吗？”</p>\n<p>“真是个麻烦的宿主。尼奥罗思，这是我的最终识别名。”</p>\n<p>“这就好多了，今后请多指教，尼奥罗思。”</p>\n<p>“...... 快到了，这是最后的确认，前面是招致我的世代毁灭的力量，你现在要解放他们。”</p>\n<p>“没错，只有这样才能结束世界大战，重构新秩序。”</p>\n<p>“我了解了，去吧，站到那里就可以了，它会读取你记忆里的钥匙。”</p>\n<p>隧道的尽头是一面金属墙，弗莱走到墙的面前，墙上逐渐出现亮光，一股仿佛要吞噬一切的威圧感扑面而来，弗莱艰难地站着，坚持着保持意识。</p>\n<p>“接下来就交给我吧。” 尼奥罗思说，“我会尽力捕获从这里释放的暗能体，不过别太指望能拦住多少。”</p>\n<p>“嗯，交给你了。” 弗莱松了一口气一般。</p>\n<p>光芒中自己的意识逐渐下沉，尼奥罗思的意识接管了身体。</p>\n<hr />\n<h2 id=\"救世的天使\"><a class=\"anchor\" href=\"#救世的天使\">#</a> 救世的天使</h2>\n<p>究竟睡了多久，弗莱完全没有印象，在威严感最强的时候失去了意识，醒来时那面墙已经失去了光芒，仿佛这里一切都没有发生过。</p>\n<p>“哟，你醒了。” 尼奥罗思的声音传了出来。</p>\n<p>“怎么样了？”</p>\n<p>“比想象中要顺利不少，关键的几个暗能体基本都捕获成功了，比起这个，你的身体是第一次运转暗能就被我开这么大的功率，没问题吧？”</p>\n<p>“还好。” 弗莱站起身，向隧道外走去，弗莱只感觉全身像是火烧一般的刺痛。</p>\n<p>“现在说这个可能不太合时宜，虽然你的身体已经被我用到了极限，但是大部分暗能体还是从黑洞中逃逸了，大概再过不久，就会有大量适配体觉醒了吧。”</p>\n<p>“这个早就做好思想准备了不是吗，重要的是我们现在拿到了相当一部分力量，有你在可以提前觉醒这些暗能体，先结束现在的战争再说，以后的事情慢慢想办法。”</p>\n<p>“也是，不过我在此之前已经说过很多次了，这可是会招致人类毁灭的混乱。” 尼奥罗思说，“你现在后悔也来不及了。”</p>\n<p>“...... 我不后悔。”</p>\n<p>即使人类因此而换了一种方式毁灭，那就让我来做那个罪人吧。</p>\n<p>“弗莱，你受伤了 ————” 不知不觉走到的隧道的入口，雪莉跑到弗莱面前，焦急地询问。</p>\n<p>“没事，雪莉。” 弗莱把手搭在雪莉肩上，“走吧，去结束战争。”</p>\n<p>“嗯。”</p>\n<hr />\n<p>卫星区的天空总是灰蒙蒙的，唯一可以抬头判断时间的，大概只有远方主城区的时钟塔。</p>\n<p>钟声响起，一个少女拉着红发少年的手。</p>\n<p>“我会一直在你身边！” 红发少年注视着少女。</p>\n<p>少女笑而不答，轻抚着少年的头。</p>\n<p>清风拂过少女的脸庞，长发舞动在少年的双眸。</p>\n<p>突然，整个场景变的支离破碎，少女在少年眼前逐渐虚化，握着的手也逐渐失去了分量。</p>\n<p>“姐姐！”</p>\n<p>洛从梦中惊醒，睁开眼，抬起头看见了熟悉的天花板，床头柜上还放着小时候和姐姐一起拍的照片。</p>\n<p>“是梦啊。”</p>\n<p>洛摇了摇头。</p>\n<p>“哥哥，再不起床要迟到了哦！”</p>\n<p>房间门被猛的推开，一个扎着双马尾的小女孩站在门外。</p>\n<p>“别忘了，今天可是开学日呢，可不能 ———— 诶，哥哥已经醒了啊，有进步哦！”</p>\n<p>洛转头看了看日历，是呢，今天是洛入学阿斯特雷亚高中的第一天。</p>\n<p>“早安，月。”</p>\n<p>“早安，哥哥。” 月吐了吐舌头，“那月先走了，哥哥不要走错路哦，高中是在左边的。”</p>\n<p>“我知道啦。”</p>\n<p>洛迅速地准备好，拿起一块吐司面包，关上了门。</p>\n<p>“左边 ——”</p>\n<p>洛朝右看了看，月的背影还没有完全消失，小跑着。看来为了叫洛起床，月的时间有点紧张了呢。</p>\n<p>其实，月并不是洛的妹妹，只是远房亲戚加邻居而已，但却在洛搬来的第一天就这样亲昵地叫着，久而久之，洛也便接受了这样的关系，月的父母这几年应征在卫星区的工厂工作，没有太多休息时间，便把月交给洛照顾，不过现在的情况显然是相反的。</p>\n<p>左边的路，对洛来说有点陌生。</p>\n<p>“姐姐......”</p>\n<p>洛在路上不断回想这这个梦。</p>\n<hr />\n<hr />\n<h2 id=\"阿斯特雷亚\"><a class=\"anchor\" href=\"#阿斯特雷亚\">#</a> 阿斯特雷亚</h2>\n<p>这个叫阿斯特雷亚的地方，是一个被划作卫星区的小城，抬头可见的灰暗天气，是这里的常态，虽然在几十年前并不是这样，这是已故的父母在洛小时候告诉他的。</p>\n<p>曾经，世界被名为国家的体制划分为了许多个小块，后来出于不知名的原因，这些国家走上了自我毁灭的道路。阿斯特雷亚过去也属于这些国家中的一个，不过现在是六合天使组织下的一个卫星区。</p>\n<p>据说，六合天使消灭了所有国家，阻止了人类的毁灭。</p>\n<p>卫星区吗？洛对这个词语再熟悉不过了。</p>\n<p>所谓的卫星区，就是被剥夺了来自太阳的供能，服务于主城区的存在而已。这里的人成年后，如果没有学校的升学证明，就必须在一定时间内应征入工厂，为主城区工作很长一段时间。这颗星球 99% 的面积被六合天使开发的叫做天使之翼的装置覆盖，仅有的 1% 是唯一能够看见太阳的主城区。</p>\n<p>其实，洛本来住在主城区，不过父母在十年前的一次科研事故中遇难，自己和姐姐便被托付给了远房亲戚，搬来了阿斯特雷亚。</p>\n<p>而姐姐，也在五年前突然失去踪迹，毫无预兆。治安队帮忙找了几个月后也不了了之，只能以失踪结案。卫星区的治安相对主城区要差不少，尽管洛一直祈求姐姐的平安，但也很清楚姐姐凶多吉少。</p>\n<p>这当然是他最痛苦的两个回忆，这两件事，让洛变得孤身一人。</p>\n<p>洛正走着，隐约从身后感觉到了视线，也许是因为自己身上的校服吧，这所高中的校服辨识度是很高的，穿在身上很显眼，况且卫星区的孩子很少有机会能像洛一样进入区立高中，会是这个原因吗？洛正困惑着，经过一个暗巷时，偶然间一瞥。</p>\n<p>“那是 ——”</p>\n<p>洛看到四五个壮汉围着一个蓝发女生，手里拿着电话，似乎在威胁女生做什么事。女生个子不是很高，手提书包紧紧地被抱在胸前，背靠着墙，双瞳散发着颤抖的气息。那个校服，看来和洛一样是阿斯特雷亚高中的学生。</p>\n<p>“看来是遇到麻烦了。”</p>\n<p>见死不救可不是洛的风格，而且要是真的万不得已，打架这方面，洛也还是有点信心的。</p>\n<p>洛深呼吸了一口气，向那边走去。</p>\n<p>“你在这里啊，我正找你来着”</p>\n<p>洛伸出手试图把蓝发女生拉了出来，立刻感觉到了来自那一伙人的阻力。</p>\n<p>其中一个高个子小混混用力推开了洛，那个蓝发女生也疑惑地看着洛。</p>\n<p>“哼，不知道你是哪来的，但我们今天有事要这个家伙配合，办完之前谁都别想带走她，识相就给我赶紧滚，别妨碍我们干活！”</p>\n<p>高个子一脸不耐烦，“要是没事找事，我可不管你是谁。”</p>\n<p>事情演变成这样，洛也有所心理准备，在这方面洛的身手并不算差，要对付眼前这个高个子倒也还有机会能打赢，可是对方有四个，一个高中生对付四个壮汉，再怎么说也太夸张了，只是，不能放着那个女生不管。</p>\n<p>也只有试试了，洛握紧了拳头。</p>\n<p>蓝发女生看着眼前这个陌生的红发少年，紫色的双瞳透露出无比的惊讶。</p>\n<p>“不用担心。”</p>\n<p>洛说着，向前走去。</p>\n<p>这场架，似乎是躲不掉了。</p>\n<p>“可以麻烦各位稍微暂停一下吗？”</p>\n<p>暗巷的入口，传来了女性的声音。不是巡逻队，因为巡逻队根本不可能来这个地方，而且 ——</p>\n<p>—— 这个声音，好熟悉。</p>\n<p>洛转过了头，像是电击般的一颤。</p>\n<p>站在那的，是一个带着帽子的女生，红发顺着帽子的边缘一直延伸到腰部，帽子是四叶草款式的，帽子的前沿遮住了眼睛，嘴角带着一丝笑容，双手插在红色的风衣两边，正慢慢向这里走来。</p>\n<p>不会错的，这个感觉，尽管多年没见，洛还是一眼认出来：</p>\n<p>“姐姐 ——”</p>\n<p>洛甚至不敢相信自己的眼睛。</p>\n<p>“是姐姐吗！”</p>\n<p>红发少女微笑着渐渐加快了步伐，最后径直冲过来，一把抱住了洛。</p>\n<p>“好久不见，洛。”</p>\n<p>红发少女抬起头，“比我要高了呢，七年前，我明明是比你高一头的呀！”</p>\n<p>“澪 —— 姐姐”</p>\n<p>这次轮到洛抱住姐姐，全然不顾状况，把脸埋在姐姐的肩上，“为什么要离开我！？”</p>\n<p>澪抚摸着洛的头，“我会好好解释的，我这不是回来了吗，嘛，真是的，个子都长这么高了，爱撒娇的毛病还是和小时候一样啊～”</p>\n<p>“喂，那边的臭小子，要开重逢会就赶紧滚出老子的视线。”</p>\n<p>那边的高个子不耐烦了，冲着两人怒吼。</p>\n<p>“解释的话等会再说，洛，这里先交给我好吗？”</p>\n<p>澪拍了拍洛的肩膀，转过身站在洛的前面，把帽子的前沿稍微抬了一点。</p>\n<p>“姐姐？”</p>\n<p>虽然姐姐比自己大，但看上去也只是一个柔弱的女生啊，这回轮到洛疑惑了。</p>\n<p>“嘛，相信姐姐好吗？”</p>\n<p>澪说完，双手插进风衣口袋，慢慢走到那群小混混身前。</p>\n<p>“哼，又是个女人了吗，虽然不是我的风格，但可不要以为我会下不去手！”</p>\n<p>高个子一阵不屑的语气。</p>\n<p>“事先说一句，你们应该感谢我及时出现，否则你们现在应该已经是四具尸体了哦。”</p>\n<p>澪轻轻抽出右手，指着高个子说。</p>\n<p>“混蛋，敢指着老子！”</p>\n<p>高个子一个箭步猛冲了过来，右拳向着少女腹部飞去。</p>\n<p>“姐姐！”</p>\n<p>洛担心地大叫，可下一个瞬间，他便发现这算是多余的。</p>\n<p>澪的身体丝毫没有动，还慢慢把右手插回兜里。</p>\n<p>“我说，很明显了吧，差不多收手吧，免得等会受伤了。”</p>\n<p>“你这怪物！”</p>\n<p>高个子怒吼着，左手从兜里抽出一把匕首，往澪的腰间刺去。</p>\n<p>“嘛，这可不好，怎么能用这么危险的东西呢？”</p>\n<p>话还没说完，高个子便瞬间中了一记膝击，飞了出去，匕首落在地上，发出了一阵清响。</p>\n<p>“这就晕过去了啊，所以说让你们收手嘛，抱歉抱歉，下手稍微重了一点。”</p>\n<p>澪看了看躺在地上的那个人，捡起匕首，用三根手指轻轻捏断，就好像这个匕首是泡沫做的一般，但落在地上清脆的声音证实了这是货真价实的凶器。</p>\n<p>“所以说，你们还要继续吗，我可不建议这么做，你们要是都倒在这里了，我会很困扰的。”</p>\n<p>“你，你究竟是什么东西？”</p>\n<p>“哎呀哎呀，突然问一个女生这种问题，还真不想回答呢。”</p>\n<p>那三个人看着澪，谁也没有胆量冲上来，那对于他们来说只有一个选择了。</p>\n<p>“可恶，下次你就没这么好运了！”</p>\n<p>那群小混混对着坐在地上的蓝发女生抛下这句话，就抬着高个子一溜烟逃跑了。</p>\n<p>“姐姐，你 ——”</p>\n<p>目睹了这一切的洛不敢相信自己的姐姐会有这样的身手，不，这压根不是身手的问题了。</p>\n<p>“很惊讶，是吗？”</p>\n<p>澪笑着看着一脸茫然的洛，</p>\n<p>“嘛，这个以后再说，我现在还有重要的事情要办，那我们就此暂别吧”</p>\n<p>“什么呀，不解释就算了，现在又要突然离开我了吗？”</p>\n<p>洛十分不满，摇了摇头，靠在了墙上。澪一向是按照自己的想法来行动的，洛知道。</p>\n<p>澪把帽子拿了下来，感觉到了不妥。</p>\n<p>“对不起啊，这些年一直我没有出现，不过我也有不得不这么做的原因，以后你会知道的。”</p>\n<p>澪走近了洛，踮起脚，在洛的额头上轻轻一吻。</p>\n<p>澪眯起了眼，看着脸微微泛红的洛。</p>\n<p>洛感到一阵温暖，一种失而复得的满足感充斥着洛。</p>\n<p>澪看着洛，把手放到洛头上。</p>\n<p>“好了，我差不多也要走了，不过，我们马上会再见的。”</p>\n<p>澪把帽子前沿拉了下来，准备走出小巷。</p>\n<p>“今天吗。哦对，还有，那个 ——”</p>\n<p>“嗯？”</p>\n<p>“你说的那句话是什么意思啊？”</p>\n<p>“哪句？”</p>\n<p>“你和那伙人交手前说的那句，我和他们交手的话，为什么你会认为我能打赢？还是说只是随口说的？正常情况下一个十七八岁的高中生对付一群混子不可能有机会的吧。”</p>\n<p>“哦，在意那个啊，还真是和小时候一样爱较真呢，嘛，不是随口说的哦，但也不是说肯定你能打赢，只是 ——”</p>\n<p>“只是？”</p>\n<p>“只是他们要是敢让我可爱的洛受伤的话，我可是会杀死他们所有人的哦～～”</p>\n<p>澪回头眯着眼，微微一笑。</p>\n<hr />\n<h2 id=\"迷离的茶会\"><a class=\"anchor\" href=\"#迷离的茶会\">#</a> 迷离的茶会</h2>\n<p>“那个，不好意思 ——”</p>\n<p>蓝发女生看着出神的洛，用手指碰了碰他。</p>\n<p>“哦，对不起 ，把你给忘了。” 回过神来的洛赶紧整理了一下表情。</p>\n<p>“对了，还没自我介绍呢，我叫近卫洛，刚刚那位是我的姐姐，近卫澪。”</p>\n<p>“我叫水无月昴，阿斯特雷亚高中的新生，初次见面，谢谢你帮忙解围。”</p>\n<p>“不用这么客气的，我也是阿斯特雷亚高中的新生，就住在附近，看样子我们是同一个学校的呢。”</p>\n<p>“不只是同一个学校哦。”</p>\n<p>“啊？”</p>\n<p>“应该是一个班的吧。你的校徽上不是有写吗？”</p>\n<p>“是吗？我还没有注意到呢。”</p>\n<p>被昴这么一说，洛想起来了，校徽右下角好像有一串字母，那是代指班级吗？洛转过头费力的把右肩的字母念了出来。</p>\n<p>“SMSA 316，水无月同学的也是这个吗？”</p>\n<p>“是啊，真是巧呢，近卫同学。”</p>\n<p>洛好像突然想起了什么，看了一下手表。</p>\n<p>“糟了，再不快点就赶不上开学了！”</p>\n<p>“对不起，因为我的事害你耽搁了。”</p>\n<p>“都说不用介意了，快走啦！”</p>\n<p>“诶！”</p>\n<p>洛拉着昴的手臂，在树林里小跑着。</p>\n<p>“话说你为什么会在那种地方啊？女生还是少走这种路的好。”</p>\n<p>“唔 ——”</p>\n<p>“算了，现在的当务之急是赶上上课。”</p>\n<p>“其实，也不用这么急呀，听说我们班的负责老师是新野老师，不会来的很早哦。”</p>\n<p>“这种传言是不是真的先不管，这种开学仪式总不能迟到嘛！”</p>\n<p>“也是哦。”</p>\n<p>洛和昴于是加快了步伐，终于在铃声响起时到了教室外。打开教室门，学生们基本都到齐了，讲台还空着，这都不意外，毕竟快上课了，迟到的也是少数。</p>\n<p>“新野老师果然没有到啊。” 洛松了口气，突然发现气氛有些不对劲。</p>\n<p>“什么情况？”</p>\n<p>洛一脸茫然，回头看昴时，昴已经满脸通红。</p>\n<p>“那个...... 近卫同学，手 ——”</p>\n<p>洛这才注意到，在往这里赶的时候，自己抓着昴手臂的手已经渐渐往下滑，已经到快手牵手的程度了。</p>\n<p>“可以啊，洛，开学就在班上搞雷击吗？” 台下传来一个声音，洛看都没看，刚听到第一个字就知道说话的家伙是夜町助。</p>\n<p>但这个情况果然还是解释一下比较好。</p>\n<p>“那个，我们不是 ——”</p>\n<p>“两位同学请快点找位置坐下，已经上课了。” 新野老师从门外进来了。</p>\n<p>“虽然本校不反对学生恋爱，但请注意场合。”</p>\n<p>“我 ——”</p>\n<p>没有办法，天大的误会，只好以后找机会解释了。洛和昴赶忙在后排找了个位置坐了下来。</p>\n<p>漫长的开学仪式中，洛注意到，昴一直心不在焉。</p>\n<p>开学仪式和一系列其他事情结束之后，就是第一天的校内自由活动时间了。</p>\n<p>“近卫同学，可以请你陪我一起参观校园吗？” 昴低着头说。</p>\n<p>“这样啊，没问题啊。” 洛也不好拒绝。</p>\n<p>不过，这样难免误会会加深，不过既然昴不在意，那也就无所谓了。</p>\n<p>“那么，你说的要告诉我的事情是 ——”</p>\n<p>两个人一言不发的并排走了一会，洛率先打破了沉默。</p>\n<p>“就是你之前问我的那个问题，我为什么会在那个暗巷。” 昴的声音很小，就算是走在他身旁的洛也只能勉强听见。</p>\n<p>“其实，我不是阿斯特雷亚的人，我的父母是主城区的商人，因为一次疏忽而欠下了债务，为了让我躲避追债人，把我送到了阿斯特雷亚，托付给了这所学校的一个老师。”</p>\n<p>“所以，你会在那个暗巷，是被抓到了吗？”</p>\n<p>“嗯，就在上学的路上。”</p>\n<p>“那个老师呢，既然接受了你，就应该保护你啊。”</p>\n<p>“风见老师为了照顾他的生病的父亲，前几天离职回到了主城区，临走时把住所暂借给了我，所以我现在是一个人住。”</p>\n<p>“这样啊，那确实是没办法呢。”</p>\n<p>“近卫同学是阿斯特雷亚的人吗？”</p>\n<p>“其实，我也是几年前搬来阿斯特雷亚的，不过应该算是吧，毕竟也住在这里好久了。”</p>\n<p>“这样啊，总之，谢谢你今天救了我，我以后会想办法报答你的。”</p>\n<p>“报答什么的就不用了，而且，这应该算是我姐姐的功劳吧。”</p>\n<p>“不管怎样，近卫同学还是有帮到很大的忙的。”</p>\n<p>“是这样吗？你这么说，我还真有点不好意思啊。”</p>\n<p>“谢谢，说出来之后好多了，那，接下来我也没什么事情了，我就先回去了，近卫同学应该还有别的事情吧。那就明天见吧。”</p>\n<p>昴指了指洛的身后。</p>\n<p>“嗯，明天见。”</p>\n<p>昴一脸轻松的样子转过身，向洛挥挥手。</p>\n<p>洛刚想回头看看，夜町助就从身后扑住了洛。</p>\n<p>“约会怎么样了？”</p>\n<p>“误会而已，别想多了。”</p>\n<p>“好好好，误会误会。对了，刚刚忘了说了，早上校门口有个人让我把这个给你。”</p>\n<p>助掏出一封信交给洛。</p>\n<p>信？谁写的？</p>\n<p>洛打开了信封。</p>\n<p>“东巷 119 号，近卫澪。” 是姐姐的信。</p>\n<p>“抱歉，助，我要先走了。”</p>\n<p>“看来是有事情要办啊，需要帮忙记得给我打电话。”</p>\n<p>“嗯，好，明天见。” 洛转身就往信上的地址走去。</p>\n<p>“居然在这么偏僻的地方，东巷 119 号，是这里吧。”</p>\n<p>洛抬起头，是一个废弃的民宅。“这么破旧，是马上要被拆除了吧。”</p>\n<p>“有人吗 ？” 洛敲了敲门。</p>\n<p>几乎在敲门的瞬间，门打开了，一个身穿黑色风衣的侍者出现在了洛的眼前，“在下埃德尔久等了。”</p>\n<p>侍者摘下了帽子，洛这才发现，这个人，面色惨白。洛不断回忆着自己听过的传说，该说像是吸血鬼呢，还是僵尸呢～</p>\n<p>“请不要介意，以在下的外貌示人实在有些失礼，还请阁下谅解。”</p>\n<p>“不，不是那回事。”</p>\n<p>洛为自己的以貌取人感到十分抱歉，再怎么说也不能把人想成那种怪物啊。</p>\n<p>“那么请跟随在下进屋等候，” 埃德尔戴上帽子，招呼洛进去，“伊瑟芙妮大人很快就会回来。”</p>\n<p>“伊瑟芙妮大人？”</p>\n<p>洛边走边疑惑，邀请自己的，不是姐姐吗？而且，这里面黑漆漆的一片，无底的黑暗让洛很不安心。</p>\n<p>“恕在下愚钝，还望见谅，可能对于阁下来说，近卫澪大人这个本世代的称呼更亲切一些。” 埃德尔继续向前走着，突然停了下来。</p>\n<p>“阁下就在此处稍候片刻。” 埃德尔说完，四周忽然亮了起来，弄得洛有些睁不开眼。</p>\n<p>好不容易适应了光线，却发现埃德尔已经不见了。</p>\n<p>“真是的，就算是习惯了，居然能在这么强烈的光暗差下看得见走路，他真的是个人类吗。” 洛抱怨了一句。</p>\n<p>“算了，这个先不管了。”</p>\n<p>洛找了个地方坐了下来，“伊瑟芙妮，这个名字是姐姐的？还有本世代是什么意思？姐姐为什么会在这种地方？”</p>\n<p>一连串的疑问涌了上来，“话说这地方也太诡异了吧。” 洛看了看四周，虽然有光线，但却完全找不到光源，仿佛是空气自己在发光，而且，这里根本没有称的上是墙壁的东西，自己只是在一个十分规则的四方体的光域里而已，四周除了黑暗一无所有，这算是超自然力量吗？</p>\n<p>“这超过科学范畴了吧！”</p>\n<p>洛站起来，向光与暗的分界处走去，想看个究竟。</p>\n<p>“阁下稍安勿躁，” 埃德尔从黑暗中走来，手里端着一盘子招待用的茶水。</p>\n<p>“澪大人已经快到门外了，在下即刻出门迎接。”</p>\n<p>埃德尔放下茶水，左手背在身后，消失在了黑暗中。</p>\n<p>洛越来越怀疑埃德尔是不是人类了，居然对这个屋子和周围的动态了如指掌，不过比起这个，洛很清楚地听到了和早上一样的脚步声，果然是姐姐，脚步声越来越近。</p>\n<p>“埃德尔，怎么说也不必对我的弟弟使用视域限制吧。”</p>\n<p>“对不起，伊瑟芙妮大人，在下只是谨慎起见。”</p>\n<p>“你应该清楚他不可能是六合天使的人吧，立刻解除限制，还有，我现在叫近卫澪，伊瑟芙妮这个第二世代的名字我早就已经舍弃了，虽然改口很麻烦，但还请你努力。”</p>\n<p>“是的，近卫澪大人。”</p>\n<p>洛隐隐约约听到了二人在交谈，但却连大概都没听出来，只知道声音越来越近。</p>\n<p>突然，洛身边的黑暗立刻消失了，整个空间瞬间亮了起来。惊讶之余，洛这才发现，这是一个巨大的房间，刚刚自己所看见的只是冰山一角。</p>\n<p>就在洛一头雾水的时候，房间门打开了，澪正如早上一样穿着红色的风衣，跑过来抱住了洛，洛感觉一股电流一般的东西涌进了自己的身体，但又瞬间消失了，洛也并没有在意。</p>\n<p>“诶，姐姐......”</p>\n<p>“抱歉啦，不过早上我要办的事情，现在差不多已经结束了，接下来姐姐的时间是洛的哦 ——”</p>\n<p>澪搂着洛，把头埋在洛的胸口上。</p>\n<p>洛满脸通红，不过应该是被勒的，毕竟澪的力气，洛已经见识过了。</p>\n<p>“哈哈哈，分开好久了，得好好聊会。” 澪松开了洛，拉着洛的手，“来，坐下谈吧。埃德尔，你可以出去了。”</p>\n<p>“是，伊 —— 近卫澪大人。” 埃德尔鞠躬之后走出房间，关上了门。</p>\n<p>“好了，现在就我们两个人了，洛现在一定有很多话想问吧，不过在那之前，” 澪端起茶，递给了洛，“埃德尔没有吓到你吧。”</p>\n<p>“稍微有那么一点点 ——”</p>\n<p>洛接过了茶。</p>\n<p>“埃德尔虽然长相吓人了一点，其实是一个很谨慎可靠的人。” 澪喝了一口茶，“不过太谨慎往往也让人头疼啊。刚刚你应该看不到这个房间的全部吧，这是一个叫做视域限制的技术。”</p>\n<p>“我也知道跟姐姐一起他肯定不是坏人，但，视域限制？那是什么？”</p>\n<p>洛仿佛听到了不属于这个时代的词汇。</p>\n<p>“对于正常的人类来说，视觉器官只能捕捉到特定波长范围内的电磁波，这个世代的人类称这段电磁波为可见光，然后人类通过将不同波长的可见光表现为各种颜色，才形成视觉这一感官。”</p>\n<p>“嗯，这我知道，可这和你说的视域限制有什么联系呢？”</p>\n<p>“如果有人可以操纵一片区域内的电磁波波长，是不是就可以限制人的视觉了呢？”</p>\n<p>“这...... 做的到吗？”</p>\n<p>洛不可思议地看着姐姐，这确实超出洛的认知太远太远。</p>\n<p>“埃德尔就做得到，基于这个前提，洛也应该能理解视域限制的原理了吧。”</p>\n<p>“这样倒可以理解，但埃德尔居然能控制电磁波，如果这是真的，埃德尔还是人类吗？”</p>\n<p>姐姐所说的，洛还是不敢相信，毕竟人能随心所欲控制电磁波简直是天方夜谭，可这又似乎是自己所看见的现象最合理的解释。</p>\n<p>“不是哦。”</p>\n<p>“诶？”</p>\n<p>“最简单的一点，他和人类的基因不同，从生物学的角度来讲，他不属于人类这个物种哦。”</p>\n<p>“这样啊。”</p>\n<p>面对这样一个震惊的事实，洛反倒表现地不是那么惊讶，多了埃德尔拥有超过人类的力量这个前提，至少这一切讲的通了。</p>\n<p>可是姐姐为什么会不告而别，又为什么会和这样的人在一起？这几年姐姐身上发生了什么？还有伊瑟芙妮这个名字是怎么回事？莫非？洛刚想着，抬头却看见了一反常态的澪。</p>\n<p>“那么，既然知道了这些，洛对于埃德尔的看法有没有什么改变？” 澪放下了杯子，注视着洛，跟之前活泼的态度截然相反，言语里带着些许不安，“比如，他这样的‘人’不该存在之类的想法？”</p>\n<p>“没有。” 洛斩金截铁，“虽然有点惊讶，但是因为有着特殊能力就不应该存在，这个想法未免太荒谬了。”</p>\n<p>澪像是松了一口气，脸上又浮现出平时的笑容，重新拿起了茶杯。</p>\n<p>“洛还是一如既往的可爱呢！”</p>\n<p>“我...... 只是把自己的想法说出来了而已 ——”</p>\n<p>“这样的话，我就放心了。”</p>\n<p>“放心？” 洛似乎已经知道姐姐接下来想说什么了。</p>\n<p>“我想你大概已经猜到了”，澪把脸凑近了洛，“近卫澪，你的姐姐，也是埃德尔的同类哦。”</p>\n<hr />\n<h2 id=\"羽化者\"><a class=\"anchor\" href=\"#羽化者\">#</a> 羽化者</h2>\n<p>“这样啊”，尽管从现在的情况来看，自己已经猜的八九不离十，但从姐姐那里亲耳听到这样的话，洛还是感受到了惊讶。</p>\n<p>“我离开的这几年，发生了好多事。姐姐现在是作为一种名为羽化者的存在。” 澪坐回了座位上，“从刚刚到现在，我说的话，都是真的哦。”</p>\n<p>“羽化者......” 洛好像听说过这个词语，稍加思索，“那个拯救了世界的六合天使组织好像也是这么自称的。”</p>\n<p>“拯救世界？” 澪一反常态的冷笑，“不过这也难怪，毕竟是对整个地球宣布了主权的组织，会做出这方面的宣传也很正常。”</p>\n<p>“不是吗？” 洛不解。</p>\n<p>“从结果上来看，六合天使确实阻止了第四次世界大战”，澪叹了口气，“不过，也可以换个说法，六合天使打赢了世界大战，占领了全世界。”</p>\n<p>“......”</p>\n<p>“身在卫星区的你应该明白吧，卫星区是为了服务主城区的存在，无法进入主城区的人只能获得燃料一样的待遇。”</p>\n<p>这点洛明白，毕竟近在眼前的月的父母没能获得主城区公民的身份，不断申请推迟征召，才能把洛和月养大，前几年开始应征，在工厂里拼命工作。</p>\n<p>“这算是拯救世界吗？” 澪坐了下来，端起了茶杯。</p>\n<p>“但，六合天使的出现阻止了战争这一点应该没有错吧，这场战争似乎确实会毁灭世界。”</p>\n<p>“那么，你有想过为什么会有这场战争吗？”</p>\n<p>“这......” 洛确实不知道，自己接受的历史从来没有提到过这一点，洛也曾想过为什么会有这场灾难性的战争，以及这场战争为什么会有毁灭人类的能力，洛只能推测到可能是人类争夺的本性导致了战争。换句话说，历史出现了断层，六合天使的历史可能掺杂有虚假。</p>\n<p>“我也不知道，” 澪喝了一口茶，“准确来说，我还没有准确的证据。只不过从我的角度推断，我认为这场战争的始作俑者就是六合天使，他们启动了战争，等战争发展到一定程度的时候出手结束战争，夺取了全世界。”</p>\n<p>“这样的吗......” 洛还没有想过这种可能性，只不过六合天使的执政确实让卫星区承载了太多的苦痛。</p>\n<p>“哈哈，话题不小心严肃了起来，” 澪放下茶杯，放松了表情，“回到羽化者这个话题吧。”</p>\n<p>“所以，羽化者就是所谓的超越科学的能力者吗？” 洛也听说过六合天使组织成员的一些故事，包括瞬间让战场上全部炮弹哑火、用超能力中断核聚变，甚至有传言说天使之翼是来自其一个核心成员的能力。</p>\n<p>“羽化者确实有特殊的能力，但超越科学，这个说法本身是错的。” 澪纠正，“这只是这个世代的的科学还没有触及的部分而已。包括埃德尔的能力，我的能力，六合天使的能力，以及所有羽化者的能力，都是来自于科学的。”</p>\n<p>“来自未来的科学？”</p>\n<p>“来自过去的科学。”</p>\n<p>“过去？”</p>\n<p>“嘛，虽然解释起来很麻烦，但至少有一点希望洛能够明白，那就是，目前的人类文明，不是第一个人类文明，就地球的寿命而言，也不会是最后一个人类文明。”</p>\n<p>“也就是说，姐姐的能力，来自于史前文明？” 洛干脆将现有的概念抛的一干二净，这样交流起来似乎更容易，事实也正是如此。</p>\n<p>“不愧是洛，这么快就理解了，就是这么一回事。” 澪表扬似的摸了摸洛的头，“其实更深一步讲，羽化者的能力来自于叫做暗能体的东西，这是上一个世代极度发达的科技下的产物，暗能体这个东西，甚至拥有人格。”</p>\n<p>想不到曾经的地球还有一个这样强大的文明。</p>\n<p>可是为什么那样的文明，会在地球上消失？究竟发生了什么足以摧毁这种程度文明的力量？洛很是不解，不过现在最重要的，是姐姐身上到底发生了什么。</p>\n<p>“所以，五年前姐姐不告而别，是和这个有关吗？”</p>\n<p>“是的。” 澪抬头望向窗外，“五年前，有一个叫阿沃德尔的人找到了我，向我展示了羽化者的存在，以及六合天使的罪恶，并告诉我，我是一个叫做伊瑟芙尼的暗能体的适配者。”</p>\n<p>“所以姐姐就是在那之后有了这样的能力？”</p>\n<p>“差不多就是这么一回事，嘛，虽然过程没那么简单就是了，不过具体的情况现在也不必急着告诉你。”</p>\n<p>“那姐姐为什么离开了，” 洛终于问出了最想问的问题，“姐姐说有原因，到底是什么原因？还有，羽化者 ——”</p>\n<p>洛的话还没说完，埃德尔就敲开了门。</p>\n<p>“近卫澪大人，伊斯坦娜大人到了。”</p>\n<p>“知道了。” 澪慢慢站了起来，“嘛，虽然还有很多想说的话，但今天就到这里吧，时间也不早了，再待下去，那个叫月的小女孩怕是要着急了吧。”</p>\n<p>“可是 ——”</p>\n<p>“关于羽化者的剩余问题下次再说好吗？姐姐现在也有很重要的事情要办。” 澪拍了拍洛的肩膀，“关于今天的事情，不要告诉其他人。”</p>\n<p>“这倒是没问题。”</p>\n<p>“嗯，还有就是，不要过分信任六合天使。那么再见了。” 澪拥抱了一下洛，“埃德尔，送洛回去。”</p>\n<p>没办法了，不过，今天知道的事情已经够多了，而且，姐姐今天刻意向我透露出一些事情，又有些事情不愿说明，是有什么苦衷吗？还有，为什么这个叫伊斯坦娜的人一来，姐姐就要支开我？</p>\n<p>洛走出房间的时候，和一个银发少女擦肩而过，洛回头时，那个少女看了他一眼，那一瞬间，洛感觉到她眼神中有着本不属于这个女孩的寒意，气势上的一股威压感让洛不寒而栗，她就是埃德尔说的伊斯坦娜吗？这洛也没有时间多想，时间确实也不早了，再不回去，恐怕月真的要担心了。</p>\n<p>“伊瑟芙妮，刚刚那个小鬼就是你的弟弟？” 银发少女坐在了澪的对面，恰好就是刚刚洛所坐的地方。</p>\n<p>“是的。” 澪也坐了下来，“嘛，你觉得怎么样，伊斯坦娜？”</p>\n<p>“就那个人对他的期望程度而言，我觉得没有达到我的预期程度。” 银发少女面无表情，“还有，我想我应该已经告诉你我现在的名字了，请你用那个称呼我。你知道我并不喜欢伊斯坦娜这个名字。”</p>\n<p>“这一点上我们倒是出奇的一致呀，” 澪递给了银发少女一杯茶，“作为条件，以后你也同样要用近卫澪称呼我哦，菲利斯 - 李思菲特。”</p>\n<p>“可以，澪小姐。那么废话不多说，那两件事情办的怎么样了？” 银发少女把茶杯放下，用手指轻点一下，热气腾腾的茶水瞬间失去了温度，甚至可以看到些许冰块漂浮在表面。少女这才重新端起来，喝了一点。</p>\n<p>“哎呀，下次给你准备好冰镇的茶吧。”</p>\n<p>“无所谓。”</p>\n<p>“那么就进入正题吧。第一件事，六合天使在阿斯特雷亚的爪牙以及被我肃清了，至少 12 小时内我们的人行动没有危险，不过在那之后六合天使可能会派来更大的兵力，风险会增加。另外，行动过程没有发现‘路西法’的行踪，根据线人的情报，她正在亚特拉提处理那边的反抗军问题。” 路西法是六合天使的核心成员之一，也是少数有活动迹象的核心成员。</p>\n<p>提到‘路西法’这三个字，菲利斯冷若冰霜的神情明显有了变化，紧咬牙关，握在手里的陶瓷茶杯明显的绽开了裂痕，茶杯里的水也瞬间完全凝固，茶杯口冒着白烟，澪甚至可以从菲利斯周围的空气中感觉到刺骨的寒冷，抬头看时，菲利斯银白的头发正渐渐转变成淡金色。</p>\n<p>“你，没事吧～”</p>\n<p>看到菲利斯突然这样，澪也是大吃一惊，对于菲利斯这样完美控制能力的羽化者，能力溢出只有在情绪极度失控的时候才会出现，“我是说了什么不该说的话吗？”</p>\n<p>“没有，请不要介意。” 菲利斯似乎意识到了自己的失态，“大体敌情我已经了解了，那么第二件事情，确认好了吗？” 菲利斯周围的空气正慢慢变得正常，淡金色的头发却没有立刻变回去。</p>\n<p>“确认好了。”</p>\n<p>“结果如何？”</p>\n<p>“洛..... 不能成为那个暗能体的适配者。”</p>\n<p>“‘不能’吗？” 菲利斯淡淡的回应，“既然‘不能’，那样也没办法了，没想到那个人也有看走眼的时候啊，我会如实上报的，不过......”</p>\n<p>菲利斯凑到了澪的耳边，“你这句话的意思应该是，‘我不能让洛成为那个暗能体的适配者’吧？”</p>\n<p>“你在说什么呢，” 澪苦笑着说，“不能就是不能啊。”</p>\n<p>“知道了，那么，” 菲利斯站起身，“告辞。”</p>\n<p>“菲利斯真是跟外在不一样的急性子呢，不再坐一会吗？”</p>\n<p>“还不明白吗，澪小姐，阿斯特雷亚的情形十分严峻，虽然你解决掉了那些杂鱼，但是从现在开始敌人可不再会是这种水平，明天还有一场佯攻，如果敌人你应付不来，你的结局会是怎样你应该明白吧。”</p>\n<p>“这倒也是，” 澪叹了口气，作为羽化者，她的能力确实说不上很强，至少面对六合天使的高阶羽化者，是毫无还手之力的。</p>\n<p>“所以在我走之前给你两个选择，一是提高你自己的实力，这样或许可以在阿斯特雷亚站稳脚，第二个选择，想必你也很清楚吧，那个暗能体的适配者，可以直接左右不只是这次，而是从今往后的战局。” 菲利斯留下这样几句话便离开了。</p>\n<p>“第二个选择 —— 吗？”</p>\n<p>听着菲利斯仓促的脚步声越来越远，澪瞬间明白了自己的处境，怅然若失的站在房间里。埃德尔推门进来，准备把茶水端出去。</p>\n<p>回想起刚刚在这里的洛的身影，澪闭上了眼睛，下定了决心。</p>\n<p>“埃德尔，我打算立刻唤醒伊瑟芙尼。”</p>\n<p>埃德尔愣住一会儿，继而摇了摇头。</p>\n<p>“近卫澪大人，虽然作为伊瑟芙尼大人的侍者，我无比希望见到伊瑟芙尼大人，但以现在的状况，强行下沉意识，最糟糕的后果就是两个意识都醒不来。”</p>\n<p>“怎么这样 ——”</p>\n<p>但事实就是如此，所谓的暗能体，其实就是暗能中枢加上这个暗能中枢在上一世代的原本主人的意识。这个叫做伊瑟芙尼的暗能体，从寄宿到现在，就没有任何想要浮现的迹象，自己尝试过无数次和她交流，可她一直没有回应，埃德尔的话完全正确。</p>\n<p>没有伊瑟芙尼的协助，自己对于暗能中枢的控制完全算是新手级别，只能使用最基本的身体强化和物体控速，而这个控制动能的暗能中枢所能做到的事情远不止如此。</p>\n<p>澪强忍着泪水，向地面猛地一拳，地板瞬间塌陷了一大块。</p>\n<p>前些天接到的两个任务，一个是突袭六合天使在阿斯特雷亚的分部，给组织在另一个卫星区的行动做佯攻，另一个，就是考量阿沃德尔所看中的人能不能成为羽化者 ———— 那个人就是洛，所要适配的暗能体是叫做米斯凯尔的最高级的暗能体，据说，是直接控制暗能的压倒性能力。</p>\n<p>刚刚拥抱的同时，澪将洛和暗能体做了匹配，结果是洛完美适配这个被称作米斯凯尔的暗能体，适配度高达罕见的 99.8%，而作为对比，自己和伊瑟芙尼的适配度仅有 51.6%。</p>\n<p>“居然是这样高的适配度......” 澪从怀中拿出一个小小的仪器，这是阿沃德尔交给她的暗能体的匹配检测器。</p>\n<p>“近卫澪大人对于弟弟的担心在下也理解，可是以您现在的状况，倘若伊瑟芙尼大人最终不愿意降临，您就会变成一具活着的尸体。” 埃德尔冷静地分析。</p>\n<p>“可是，就算这样，要让洛放弃现在的平静的生活，来和六合天使作对，我，我做不到......”</p>\n<p>“请相信您的弟弟，我认为可以将实情全部告诉他，由他自己来做选择。毕竟，有着这样的适配度，就算您不告诉他真相，六合天使的人也迟早发现并会找上他的。”</p>\n<p>“我......” 澪犹豫着站了起来，“让我再想想。”</p>\n<p>“希望您可以做出最理智的判断。” 埃德尔收拾了茶具，走了出去。</p>\n<p>澪走向窗边，外面的天气依旧是灰蒙蒙的，远处的钟声响起，大概是到了晚上 6 点了。澪打开窗户，并没有风吹进来，也是，被天使之翼包裹的卫星区，很难有气压差，没有风才是正常。只是，澪也没有心情去深究这些，她现在能做的，真的很少。</p>\n<p>“洛，请原谅姐姐的无能......” 澪无助地趴在窗台上。</p>\n<p>“伊瑟芙尼 ————”</p>\n<p>澪再一次向脑中的伊瑟芙尼请求，然而依然没有回应，沉默，沉默，沉默......</p>\n<hr />\n<hr />\n<h2 id=\"平静的生活\"><a class=\"anchor\" href=\"#平静的生活\">#</a> 平静的生活</h2>\n<p>太阳快下山了，尽管走道没有灯光，洛却觉得比来时要亮不少，是因为解除了视域限制吗？洛虽然也是见怪不怪的人，但这一天对他来说，还是太不寻常了，要立刻接受还是有些勉强。</p>\n<p>走出了大门，洛回头看了一下东巷 119 号这栋古老的建筑，落日中映衬出了一股厚重感，破旧的感觉荡然无存。夕阳西下，霞光中，洛的背影随着这栋房子一起融入了黑暗。</p>\n<p>“我回来了！”</p>\n<p>洛打开自己家虚掩着的门，换上了拖鞋。</p>\n<p>“真的是太晚了，哥哥！” 客厅里看着电视的那个叫月的女孩朝着洛嘟哝了一句，“肚子都饿扁了。”</p>\n<p>“抱歉抱歉，因为一些事情耽搁了，” 洛走进了厨房，打开电饭煲，盛出两盘子温热的米饭，淋上路上买的热菜，端到餐桌上，“今天没多少时间准备，就凑合着吃吧？”</p>\n<p>“也可以啦。” 月从沙发上一路蹦过来，“那我不客气了。”</p>\n<p>“刀辉叔叔和秋阿姨还是没有回来吗？”</p>\n<p>“唔 —— 爸爸和妈妈的话，” 月费力的咽下满嘴的食物，“他们说这个月会回来一次。”</p>\n<p>“真是的，慢点吃嘛。” 洛从冰箱里拿出一瓶水递给了月，“喝点水吧，不够的话电饭煲里还有一些。”<br />\n。<br />\n“吃完啦！” 只过了一小会，月眼前的盘子便空空如也，月抽出纸巾抹了抹嘴。</p>\n<p>“都说不要吃这么快了，对消化不好的。” 洛无奈的摇了摇头，“稍微休息一会再去洗澡吧，热水还要再过一会。”</p>\n<p>洛给自己盛的饭并不多，所以也差不多吃完了。</p>\n<p>“正好我还有功课要做呢。”</p>\n<p>“开学第一天就有功课啊？”</p>\n<p>“对啊，新老师让我们每天都要写日记，记录生活。”</p>\n<p>“日记呀，你打算写什么呢？”</p>\n<p>洛拿起桌子上自己的水杯，喝了点水。</p>\n<p>月想了一会，突然露出了谜之笑容。</p>\n<p>“那 —— 就写 ——‘洛哥哥的高中生活第一天’。”</p>\n<p>“噗～” 洛差点把嘴里的水喷出来，“干嘛写我呀，写月你自己不好吗？”</p>\n<p>“有什么关系嘛，反正也是写。”</p>\n<p>“那你要怎么写呀，你又没跟着我去学校。”</p>\n<p>“所以就需要哥哥配合一下了，” 月拉着洛的手撒娇，“讲一讲今天的事情嘛，月也很好奇高中生活是怎样的。”</p>\n<p>“日记这种东西怎么能写别人的事情呢？”</p>\n<p>“好不好嘛 ————”</p>\n<p>“真拿你没办法，” 洛摇了摇头，“那先等我把盘子之类的洗了吧。”</p>\n<p>“嗯！”</p>\n<p>月蹦蹦跳跳回到了客厅的沙发上又看起了电视。</p>\n<p>其实洗盘子也只是一个借口，洛正在脑海中构思一个正常的开学第一天，没有路见不平，没有重逢，更没有羽化者出现的开学第一天，这些还是不要告诉月比较好。</p>\n<p>不知不觉，盘子都洗了好几遍。</p>\n<p>“哥哥快点啊，热水都好了，那我先洗澡了。”</p>\n<p>也不能让月等太久啊，得赶快了。</p>\n<p>“哦，这里要洗的东西有点多，不过马上就好。你先洗澡吧。”</p>\n<p>等月洗完澡，洛便把他的‘开学第一天’的故事告诉了月。</p>\n<p>......</p>\n<p>“哇，没想到夜町哥哥也在啊。”</p>\n<p>“倒是让我很意外，没想到你会认识助。”</p>\n<p>“之前他不是来过哥哥家里好几次吗，我就顺便认识他了啊。”</p>\n<p>“月的记忆原来这么好啊，一直没发现。”</p>\n<p>“那哥哥也太迟钝了吧，连自己妹妹的才能都看不见。”</p>\n<p>“是是是，” 洛假装赔礼道歉的样子，“那么现在可以去睡觉了吗，外面已经快 10 点了啊，明天可不是周末”</p>\n<p>“嗯，说起来是有点困呢，那么晚安，哥哥。” 月打了个哈欠，回到了自己的房间。</p>\n<p>洛松了口气，总算是蒙混过去了。</p>\n<p>“我也差不多该洗澡睡觉了，今天确实也蛮累人的。”</p>\n<p>洛伸了个懒腰，向浴室走去。</p>\n<p>躺在床上，洛的思绪终于回到了今天发生的种种事情上。姐姐还有很多事情没有告诉自己，并不完全是因为时间来不及的关系，而是暂时不打算告诉自己。</p>\n<p>但到底是什么洛自然无从而知，反正就像这几年一直没有出现一样，姐姐一定有她的苦衷吧，总之，最重要的一点，姐姐还活着，这比任何其他事都要重要！</p>\n<p>第二天早晨，月早早的就叫醒了洛。</p>\n<p>“真是的，就不能让我多睡一会吗？”</p>\n<p>洛揉了揉惺忪的眼睛，抱怨道。</p>\n<p>“已经不是假期了哦。” 月哼了一声，“昨天差点迟到不是吗？”</p>\n<p>洛很不情愿地从床上下来，开始换上校服。昨天确实差点迟到，虽然不是出门太晚的缘故了，这届高中因为社团活动，取消了早自习，但这才开学第二天，洛并没有参加什么社团活动，所以上学时间并不比月要早。</p>\n<p>水无月的那件事昨天没有跟月说，所以差点迟到这件事只能用出门晚来解释了。</p>\n<p>“那，我先走喽。” 月监督洛起床后，和昨天一样先出发了。</p>\n<p>“好，路上小心。”</p>\n<p>“嗯。” 月轻巧地回应着。</p>\n<p>距离上学还有一小段时间，洛又坐回了床上，床头柜上的照片又在一次映入了洛的眼帘。洛看了看日历，把手伸到相框下面，摸出一块支离破碎的手表。</p>\n<p>洛闭上眼睛，回想起来，就在十年前的这一天，公司的工作人员把这块手表交给了年幼的洛，因为这是父亲的遗物，他们在处理残骸善后的时候发现了父亲握在手里的这块手表，他们一定是觉得这个手表很重要，才特地派人送过来的吧。</p>\n<p>洛注视着这块手表，破碎的表面，锈迹斑斑的表带，以及刻在背面的一个奇怪而不太和谐的羽翼图案。如果父母能像姐姐一样还活着、只是没有出现该有多好啊。</p>\n<p>洛自嘲般叹了口气，这这么可能呢，毕竟这不是失踪，而是那么大的爆炸事故，这样的期望，是不可能实现了。</p>\n<p>洛收起了手表，心不在焉地走进厨房拿起小刀切面包。</p>\n<p>“啊！” 洛明显感觉切到了手，慌忙拿开面包，准备清理一下伤口。</p>\n<p>“奇怪，明明感觉......” 洛准备用水冲洗一下，但却发现并没有受伤，“难道是错觉？”</p>\n<p>洛也没有多想，没受伤总归是好事。</p>\n<p>到了教室，跟坐在前排的助互相问好，看来到的不算太早但也并不迟。</p>\n<p>“早上好，水无月同学。” 洛在昴的旁边坐下，第一天上课并没有重新调位置，洛和昴也成了同桌。</p>\n<p>“早上好，近卫同学。” 昴看起来并没有精神，像是没睡醒一样，勉强向洛打了个招呼。</p>\n<p>“怎么了，” 洛显然发现了不对劲，“昨天晚上没睡好吗？”</p>\n<p>“唔～” 昴支支吾吾，“那个...... 我...... 很早就来了，一直在教室外面那个...... 等着开门，所以...... 今天起的比较早 ——，所以...... 有点困。”</p>\n<p>“那为什么要来这么早？” 洛不解，“明明没有早自习的啊。”</p>\n<p>看样子昴是在教室开门前好久来的，其实就算有早自习，也不用来这么早的啊。</p>\n<p>“我 ——” 昴越来越吞吞吐吐，蓝色头发下的脸色低落到了极点。</p>\n<p>难道说......</p>\n<p>洛回想起的昴昨天找他说的话。</p>\n<p>“是为了躲避那群人吗？”</p>\n<p>昴轻轻点了点头。“因为决定要早起，昨天晚上也没有太敢睡。”</p>\n<p>“可恶！还真是没完没了。” 洛很是气愤，“你有试过拜托巡逻队的警察吗？”</p>\n<p>“有，但是 ——”</p>\n<p>“光这样没有用是吧。”</p>\n<p>“嗯。”</p>\n<p>确实，就算是警察，也不可能一直保护着昴，而且那群人也应该是没有什么罪名，不能直接逮捕，况且，卫星区的警察本身靠不靠得住都是个问题。</p>\n<p>真是很难办呀，洛想了一会儿。</p>\n<p>“要不，住来我家吧？” 洛脱口而出，下一秒感到了不对。</p>\n<p>“诶？” 昴很惊讶地看着洛。</p>\n<p>“啊，不是，” 洛急忙解释，“我没有别的的意思，就是说我可以在事情解决之前保护你，不过如果你不愿意的话，就当这是一句玩笑吧。”</p>\n<p>真是的，怎么能贸然说出让一个女同学住来自己家这种话，还是在全班面前有过误会的情况下。如果回答不愿意那也是当然的吧。</p>\n<p>“近卫同学的心意我收到了，但我还是不愿意继续麻烦近卫同学了，毕竟这是我自己的事。” 昴摇了摇头，“而且，这样子的话，不光是近卫同学，你的家人也会很困扰的吧。”</p>\n<p>“同学之间互相帮忙不是应该的吗？”</p>\n<p>“但是......”</p>\n<p>“而且，其实，我没有什么家人，一直是一个人住，要说有的话，也就是一直照顾我的邻居还有昨天刚刚重逢的姐姐吧。”</p>\n<p>“这么说的话，你的父母......”</p>\n<p>洛点了点头。</p>\n<p>“对不起，谈到这个话题......”</p>\n<p>“没事，毕竟这已经是我接受的事实了。”</p>\n<p>“近卫同学很坚强啊。”</p>\n<p>“啊？”</p>\n<p>“一个人走到现在，不像我，在主城区生活的时候依赖父母，被送到阿斯特雷亚市的时候依赖风见老师，遇到那群人的时候又依赖近卫同学脱身。” 昴似乎感到有些气馁。</p>\n<p>“一个人走到现在什么的，这是没有的事，” 洛反驳，“其实，我也是一路上靠着值得信赖的人的帮助，才一步步走到今天的。父母去世之后，邻居的刀辉叔叔，秋阿姨，月，还有助，都给了我很多支持，没有他们的帮助，我也就不可能是现在的我。”</p>\n<p>“是这样子的吗？”</p>\n<p>昴松了一口气，“近卫同学很会安慰人呢。”</p>\n<p>“只是在说我自己而已..... 而且，你为什么会把别人对你的帮助称作你对别人的依赖？互帮互助不是理所应当的事吗？”</p>\n<p>“所以说......”</p>\n<p>“所以说你要是有需要帮忙的地方尽管提出来，作为同学，我还是很乐意帮忙的。”</p>\n<p>“这样啊，不过虽然说近卫同学也是为我着想，但是要我直接住近卫同学家实在是有一点不太方便 ——”</p>\n<p>“不对不对，刚刚那个不算，那是我随口乱说的！！” 洛慌忙的又解释了一遍。</p>\n<p>“那，你可以陪我一起上下学吗？我的住宅附近有巡逻队的监控，他们也是知道的，所以应该是安全的，但上学路上会穿过几个小巷子，所以......”</p>\n<p>“知道了，今天放学后我就送你回去吧。” 洛点了点头，表示认可这个方案，毕竟这个比刚刚自己的胡说八道要靠谱的多。</p>\n<p>“那就先谢谢你了，有近卫同学陪着，我就放心多了。” 昴一脸感激。</p>\n<p>“不用谢，我正好也多走些路锻炼一下，最近体力感觉有些下降。” 洛看了一下时间，拿出课本，“好了，快上课了，准备一下吧，不过，看你的样子，还是稍微去休息一下比较好吧，我之后会找来笔记借给你看的。”</p>\n<p>“嗯。” 昴苦笑着点了点头，这个状态看来是没法上课了。</p>\n<p>“助，等会老师来了帮我向他请个假，我陪水无月同学去一趟医务室。”</p>\n<p>洛点了点坐在前排的助，小声地跟他说道。</p>\n<p>“哦？有情况？” 助眯起了眼睛，看向洛。</p>\n<p>“想什么呢！这是有原因的，别误会啊，她只是身体不舒服而已，你刚刚多少也听到一点了吧。”</p>\n<p>“哈啊？刚刚教室那么嘈杂，你还指望我听见你们蚊子一样的说话声？”</p>\n<p>夜町助摆出双手，做出一副无辜的样子，“虽然啥也不知道，但看在你是我手下败将兼好友的份上，就依你了，今天下课得好好给我解释你们俩这两天到底什么情况。”</p>\n<p>虽然对手下败将这个词很不想接受，但也没办法，功课被甩下一大截不说，洛在初中的剑道社三年，跟夜町助算是老对手了，万年老二这个名号也是在二人很多次交手之后稳稳的扣在了洛的头上。更令人气馁的是，洛看的出来，夜町助在跟他交手的时候远没有使出全力，仅凭最基础的几个剑法打败了洛。</p>\n<p>不过，这也不能怪洛，作为一个普通学生，洛的剑术绝对算是鹤立鸡群，但对手是夜町助这样的犯规人物也没办法。事实上，夜町助是主城区一个剑道馆掌门的儿子，但其实这么说也不准确，因为助在 12 岁时就击败了父亲继承了道馆，现在他就是掌门，他父亲已经是前代了。这是他们夜町家族一直以来的做法，不过这么年轻就继任也是他们家族首例。</p>\n<p>不知不觉间，医务室已经到了。拜托了一下这里的医生，借用了一些病床，洛就回到了教室，这时课已经上了一大半了。</p>\n<p>没办法，只好向助借笔记先抄一下了，顺便解释一下吧，那家伙现在误会是越来越深了，搞不好真的把我们当情侣了。</p>\n<p>“看不出来你还很温柔的嘛！”</p>\n<p>听完整个事情的前因后果，助拍了拍洛的肩膀。</p>\n<p>“怎么就温柔了？！” 洛没好气的说，“只不过是顺手帮个忙而已。”</p>\n<p>“帮忙吗？哈哈，不过，在这一点上，你倒是很靠得住。” 助拍了拍洛的肩膀，“既然误会解开了，不介意的话，我今天可以跟你一起哦。”</p>\n<p>“一起？”</p>\n<p>“一起送水无月同学回家啊。” 助说，“本来打算，开学就去你家逛逛，昨天你又有事，没机会说，今天就顺道绕个路呗。”</p>\n<p>“就算你这么说...... 水无月同学也 ——”</p>\n<p>“照你的说法，对方是有一伙人的吧，万一真遇到，也好搭把手。” 助好像带着一些开玩笑的口气。</p>\n<p>“就那几个人我还是能对付的！”</p>\n<p>“其实我今天主要是想去你家，有件事想跟你商量一下。”</p>\n<p>“有件事吗，这样的话就没办法了，也可以吧。”</p>\n<p>洛答应了助的要求。其实助说的也没错，自己一个人确实应付不过来，助也一起的话，那就完全没问题了。</p>\n<p>不过，助要跟自己商量的事情是什么呢？</p>\n<p>算了，反正到时候就知道了，眼下还是先把这份笔记抄完吧，还得借给水无月同学看呢。洛想了想，决定中午吃饭的时候再去叫昴，让她多休息一会吧。</p>\n<p>这样的话，下面几节课节课我也得好好做笔记呢。</p>\n<hr />\n<hr />\n<h2 id=\"六合天使\"><a class=\"anchor\" href=\"#六合天使\">#</a> 六合天使</h2>\n<p>第五章 重重包围</p>\n<p>“还真是难懂啊，” 下课后，洛摸着脑袋，“简直是降维打击。”</p>\n<p>“这是又变成四肢发达头脑简单的笨蛋了吗。” 助拿着笔记本在洛眼前晃了晃，“没办法，就给你带回去看吧，顺便抄给水无月同学。”</p>\n<p>“你这家伙～” 虽然这么说，洛也很无奈，助明明是个剑道天才，功课还这么好。</p>\n<p>“哈哈哈，” 助把笔记本放在洛的桌上，“我先下去去买点喝的，你要来点吗？”</p>\n<p>“那就帮我带一瓶咖啡吧。”</p>\n<p>等助出去之后，洛趴在桌上，看来上课消耗了他不少精力。</p>\n<p>“初次见面，近卫洛同学。”</p>\n<p>“啊？” 洛疑惑地抬起头，一个黑发女生站在他身边，这是在跟新同学打招呼吗？也对，昨天走的比较早，还没来得及认识新同学，可是她为什么会知道自己的名字？“呃 —— 那个，初次见面，你好，请问......”</p>\n<p>“我叫千姬。”</p>\n<p>“千姬同学吗？” 洛仔细地看了看她，作为学生，齐腰的长发可不多见。</p>\n<p>“可是为什么你会知道我的名字？我应该还没有自我介绍过吧。”</p>\n<p>班上并没有姓名之类的信息，破冰活动也是安排在下午进行。</p>\n<p>“因为 ——” 千姬把嘴巴凑到洛的耳边，“你是我盯上的人。”</p>\n<p>“！” 洛背脊一阵发凉，“请不要开这样的玩笑。”</p>\n<p>“没有开玩笑哦。” 千姬鬼魅一笑，“那么果然是你吗。”</p>\n<p>“抱歉我听不懂你在说什么，” 洛确实摸不着头脑，“我现在很确信你找错人了。”</p>\n<p>“是么，那么就这么希望吧，” 千姬转过身，又回头说了一句，“因为如果是你的话，会死哦。”</p>\n<p>“借你吉言。”</p>\n<p>“哈哈哈，那么告辞了。” 千姬回到了座位上。</p>\n<p>“刚刚那个又是谁？” 助把一瓶饮料丢到洛的面前，“话说我们学校允许留这么长的头发吗？”</p>\n<p>“好像叫千姬，不知道哪里来的，刚刚应该是认错人了，说了些奇怪的话。” 洛打开咖啡，“真是摸不懂。”</p>\n<p>“奇怪的话？”</p>\n<p>“感觉像是胡言乱语。”</p>\n<p>“那就不必理会了。对了，水无月那边你不过去看看吗？”</p>\n<p>“拜托过那边的老师了，有事情会给我打电话的，就让她再休息一会吧。”</p>\n<p>“那也行，现在马上要上课了，下课再聊吧。” 刚说完上课铃声就响起来了。</p>\n<p>“下一课是，物理学，新野老师的课啊，那应该不会那么早来的。” 洛想。</p>\n<p>“请各位同学回到座位，现在开始上课。” 进来了一个女老师，“自我介绍一下，我叫木村漓，新野老师身体不适，今天由我代课一天。”</p>\n<p>“刚开学就出状况吗，还真是稀奇。” 助转过头来悄悄跟洛说。</p>\n<p>“后面那边的同学希望可以稍微尊重一下我的课堂。” 木村老师说。</p>\n<p>“抱歉。” 助把头转了回去。</p>\n<p>“那么，就开始我们今天的课吧，虽然是第一课，但我并不打算从头开始，由于大家都通过了入学考试，考试内容包括物理，说明大家都有一些基础，我就从这之后开始讲吧，关于这个宇宙的能量表现形式，我们都知道有......”</p>\n<p>......</p>\n<p>“下课，关于这节课的内容有不理解的可以私下找我解决，课后习题已经发给大家了，下一节课会由新野老师来讲解，请按时完成。”</p>\n<p>“我的天，又是一节听不懂的课。” 洛叫苦不迭。</p>\n<p>“是有一点难了。”</p>\n<p>就连助也这么觉得吗。</p>\n<p>“诶等等，发给我的作业有点奇怪。” 洛翻开了习题本，第一页上写着 “来实验室 01 近卫洛”</p>\n<p>“嗯？不会吧” 助拿起来翻来覆去看了几遍，“没什么奇怪的吧。”</p>\n<p>“你看不见上面的字？”</p>\n<p>“是你眼花了还是我眼花了，第一页是空白的啊。”</p>\n<p>“怎么可能？！”</p>\n<p>洛把在作业本拿过来一看，果然没有，显然是白纸一张。</p>\n<p>“刚刚明明有字的啊。”</p>\n<p>“行了，又不是魔法，没有就是没有啊，别多想了。”</p>\n<p>“魔法？” 听到魔法两个字，洛忽然想到了昨天的事情，“说不定是那个。”</p>\n<p>“刚刚我绝对没有看错，而且这个老师的出现确实很莫名其妙，是跟姐姐有关吗。” 洛想道。</p>\n<p>“我出去一下。” 洛决定去看一看。</p>\n<p>“你要去哪，中午不是要去叫水无月同学的吗？”</p>\n<p>“那边就麻烦你了，我等会打电话给你。”</p>\n<p>“是什么急事吗”</p>\n<p>“也不是，你去水无月同学那边吧。” 洛跑出了教室。</p>\n<p>“真会使唤人。” 助摇了摇头，往保健室走去。</p>\n<p>......</p>\n<p>“实验室 01，应该就是这里。” 洛看了看门牌，这个时间实验室自然是不开的，但是门却虚掩着，“果然叫我来吗。”</p>\n<p>实验楼距离教室并不近，洛一路跑过来，却完全没有喘气的感觉。</p>\n<p>洛推开门，木村老师在试验台上摆弄着一堆实验器械，烧杯，里面漂浮着一些茶叶一样的东西，下面是一盏酒精灯，是在用这些东西煮茶吗，这也太诡异了吧。</p>\n<p>“打扰了，老师，您叫我来有什么事情吗。”</p>\n<p>木村漓抬起头，拿着玻璃棒搅动着烧杯，“你知道，这是什么吗？”</p>\n<p>“茶叶？” 洛突然困惑到了。</p>\n<p>“没错，茶叶说到底也就是一种树叶。” 木村老师指了指窗外的落叶，“为什么那些叶子就享有归根的权利？”</p>\n<p>“因为，可以茶叶可以泡茶？”</p>\n<p>“你喜欢喝茶吗？”</p>\n<p>“一般般，没有特别喜欢。”</p>\n<p>“这样啊。”</p>\n<p>木村老师抬起烧杯，晃了晃杯里的茶叶，“但是有些人非常喜欢，所以茶树的叶子才会出现在这里。”</p>\n<p>“抱歉我有点听不懂您在说什么。”</p>\n<p>“那么如果给你选择的机会，你会做哪种叶子？” 木村漓抬起头，凝视着一脸茫然的洛，“茶叶，还是的窗外的树叶？你会接受因为别人的欲望而存在的价值吗？”</p>\n<p>“我会做窗外的树叶。” 洛略作思考。</p>\n<p>“果然是这样吗，洛还是和小时候一样的性格啊。” 木村漓严肃的脸上烧过一刹那的笑容，而又转瞬即逝，“我也猜你会这么选，但是如果不给你选择的机会，你不得不做这个茶树的叶子，你会努力去完成你的宿命吗？换句话说，你会接受命运吗？”</p>\n<p>小时候？洛惊讶到了，小时候自然是指自己来阿斯特雷亚之前的时间段，但是无论洛如何在记忆中检索，都没有这个人的信息，这个人，对洛来说，理应是完完全全的陌生人才对，但是现在这个人很显然是认识自己的，这一点洛在看到消失的字迹的时候就想到了。</p>\n<p>“可以请你回答我的问题吗，这对我对你都很重要。”</p>\n<p>“抱歉，刚刚在想一些事情。命运这种东西我是不会相信的，但如果有些事情我非做不可，那我一定会倾尽全力。” 洛回过神来，坚定地回答。</p>\n<p>“我知道了。” 木村漓放下了手中的玻璃棒，“我想知道的就是这些，那么到你了，你也一定有很得多问题想问我吧，我会尽量回答你的，毕竟，你的姐姐应该没有全部告诉你。”</p>\n<p>确实，洛现在是满肚子的疑惑，虽然有很多问题，包括为什么会这么了解自己，甚至是为什么她会知道自己见到过姐姐、姐姐又告诉过自己什么，但是洛决定直切要害，“老师，你是羽化者吗？”</p>\n<p>“上来就问这种问题吗，这我倒是没有想到，我以为你会问为什么我会知道这么多事情呢。” 木村漓着实有些许吃惊，“不过，我还是会回答的，我是哦。”</p>\n<p>“果然吗，那个字迹就是你能力的一种使用吧。”</p>\n<p>“一个小花招罢了。” 木村漓站了起来，“关于羽化者，我现在有时间说的也并不多，只是希望你知道，因为你姐姐的错误行动，现在的处境很危险。”</p>\n<p>“什么？为什么你知道姐姐的事？”</p>\n<p>“告诉你也无妨，我是隶属六合天使的成员，你的姐姐昨天对我们组织发动了突袭，现在组织上已经做出了肃清的决定，恐怕再过一会，六合天使的剿灭部队就会抓到你姐姐了吧。”</p>\n<p>“姐姐被抓住？为什么要告诉我这些？”</p>\n<p>“哈哈哈，很冷静嘛，其实说到底，六合天使内部对此也并非一心，主张剿灭的是叫路西法的核心成员，是个高阶羽化者，和驻守部队完全不可同日而语，就我对近卫澪的了解，就这样放任不管的话，她绝无生还可能。”</p>\n<p>“那么你到底是谁？你有什么目的？我该怎么做？” 洛接连发问，很显然自己面前这个人非同小可，也绝对不可能无缘无故的来报个信，她一定也有她的目的，也有解救姐姐的方法。</p>\n<p>“问到核心问题了啊，” 木村漓看着面前这个少年，“如我之前所说，我隶属六合天使，但自然不可能叫木村漓。我的目的很简单，就是让路西法的部队失败，降低他在六合天使中的公信力。” 木村漓看着窗外，“至于有没有其他目的，等会看你表现我自会挑明，现在我只能说，你的话，可以救你姐姐。”</p>\n<p>“我？” 洛疑惑，虽很很希望如此，但连姐姐都对付不了的人，自己怎么可能做到，这点洛还是有自知之明的。</p>\n<p>“到现在都还没有身为羽化者的自觉吗？”</p>\n<p>“什么？” 洛完全没有察觉到自己的身体有什么异样。</p>\n<p>“完全没有感觉啊，这倒是出乎我的意料，没想到相性这么好。” 木村稍有惊讶，“这可真是前所未有。”</p>\n<p>“这又是什么意思？”</p>\n<p>“羽化者，就是寄宿着暗能体的人类。所谓的暗能体，就是来自上个世代的亡灵，因为有着暗能中枢，所以即使肉体消亡，灵魂也能以纯能量形式保存在暗能中枢中，并且可以再度激活，以寄宿的形式和宿主共享身体，而宿主的身体不可能和暗能体原本的身体一模一样，于是便有各种排斥反应，这是一个非常痛苦的过程，你的姐姐也不例外。”</p>\n<p>“姐姐居然经历了这样的事吗？” 洛说。</p>\n<p>“而你只用了这么短的时间就完成了，甚至自己都没有发觉，就算对我来说，这也实在是难以置信。不过这样一来，我对你的评估又上升了一点哦。”</p>\n<p>洛不太明白木村老师在说什么，但有一点洛很确信，姐姐的确有事瞒着自己，并且眼前这个叫做木村漓的人，非常不简单。</p>\n<p>“姐姐在哪，我该怎么做？” 如果眼前这个人说的是真的，那么姐姐现在确实很危险，洛必须想办法。</p>\n<p>“既然你都这么说了，” 木村漓微微一笑，“我当然可以告诉你，包括你姐姐的所在，和六合天使剿灭部队行动的具体信息，前提是。”</p>\n<p>“前提？”</p>\n<p>“我要你加入我的组织。”</p>\n<p>“...... 六合天使吗？”</p>\n<p>“不完全是，虽然名义上会是这样，但是，” 木村凑到洛的耳边，“准确来说，是直接隶属于我的组织，我会给你你想要的所有答案，但你要帮助我一起净化这个被堕天使玷污的世界。”</p>\n<p>“堕天使？” 洛第一次听到这样的形容，“是说六合天使吗？”</p>\n<p>“详细的事情我会告诉你的，现在你只需要给出答案，我需要你的力量。”</p>\n<p>为什么要如此大费周章的拉拢自己，洛完全不明白，只是洛无法拒绝，并不是因为这个奇怪的说辞，而是天秤的另一边，是他重要的人。</p>\n<p>“我接受。” 洛平静的说。</p>\n<p>“这样就可以了。” 洛的话仿佛在木村的意料之中，木村稍作停顿，“那么，米斯凯尔，你对这个名字有印象吗？”</p>\n<p>“米斯凯尔？” 洛听到这个名字，仿佛一股电流穿过大脑，这个名字，从来没有听过，但却又无比熟悉，是谁的名字？洛不停的在大脑中检索着。</p>\n<p>“被发现了啊，抱歉这么晚打招呼，希望没有给你造成太大的困扰。”</p>\n<p>洛的脑中传来了声音。</p>\n<p>“谁？” 洛自处张望，但这间实验室里，除了木村漓之外别无他人。</p>\n<p>“你是叫近卫洛对吧，初次见面，我叫米斯凯尔，抱歉自作主张的寄宿到了你身上，因为理亏，一直没敢说话。”</p>\n<p>“......” 洛很快冷静了下来，“你就是那个暗能体吗？”</p>\n<p>“是的。”</p>\n<p>“看来交流很顺利啊，洛，还有米斯凯尔。”</p>\n<p>“连这能听到吗，如果没猜错的话，你的能力是暗能监测吧，明明藏的很小心，居然会一下子就被找到。” 米斯凯尔说。暗能体和宿主的交流，完全是通过暗能中枢来的，被他人介入本身就是一件不可思议的事情。</p>\n<p>“没错。” 木村漓收拾了一下手里的杯子，“暂时你们需要知道的东西我都写在这里了。” 木村从怀里掏出一个信封，“这件事过后去信上的地址找我，提醒你们一下，时间还是比较紧张的，不管是对你还是对我。”</p>\n<p>木村漓说完离开了实验室。</p>\n<p>洛打开信封。</p>\n<p>“刚刚那个人，好像认识你。” 洛一遍看信一遍说。</p>\n<p>“嗯，直接就报出了我的名字。不过我暂时还想不起来她，比起这个，果然我还是对擅自闯入感到抱歉，但我也是有原因的，按理讲我的意识会在进入暗能中枢前被冻结，但好像出了点问题，我一直无法休眠，先是那个完全透不过气的暗能黑洞，好不容易找到机会跑出来又被一个莫名熟悉又叫不上名的暗能体给捕获了，要不是有机会接近你，我还不知道要被关多久。”</p>\n<p>“这样啊。” 洛完全听不懂他在说什么，但是好像明白了这个叫米斯凯尔的暗能体似乎不是什么坏东西。</p>\n<p>“说起来也奇怪，之前的那个容器是模仿暗能黑洞的构造，不知道为什么，一遇到你，束缚力就一下子变小了。而且，你身体的暗能中枢居然是天生激活状态，太不可思议了。”</p>\n<p>“得抓紧时间了，” 洛显然没有仔细听米斯凯尔的话，信上的内容对洛来说更重要，如果信上的是真的，那么时间确实很紧急。“你叫米斯凯尔是吗，可以请你帮我吗？”</p>\n<p>“完全没听我的话啊，不过算了，既然已经是宿主关系了，我当然没理由拒绝，要去哪？”</p>\n<p>“阿斯特雷亚郊区的一个废弃工厂，信里说姐姐会去这里行动，然后正中六合天使的埋伏。” 洛收起了信，“我们走吧。”</p>\n<p>“走过去的话，会来不及的吧。”</p>\n<p>“那还能怎么办，难道你会飞吗？”</p>\n<p>“虽然做不到这种程度，不过我之前也偷偷用暗能中枢改动了一下你的供能系统，行动速度大概是正常的好几倍吧，可能对你来说可能有点难以理解，但可以让我来吗？”</p>\n<p>“让你来是指？而且你知道在哪？” 洛确实难以理解。</p>\n<p>“总之我会把意识上浮，在这期间你会感觉到自己的意识模糊，不要强行保持就行。而且，这种状态下，我能共享你一段时间内的记忆。”</p>\n<p>也正如米斯凯尔所说，就算用跑的，时间也可能会来不及，虽然这样的操作听起来有点危险，但为了赶时间也只能这样了。</p>\n<p>“我试试。”</p>\n<p>洛突然感觉到了一阵晕眩，自己的视野逐渐变得模糊，是要就这么睡过去吗？</p>\n<p>......</p>\n<p>没过多久，意识又从模糊变得清晰，洛惊讶地发现看到了自己的身影以完全非人类的速度移动着。</p>\n<p>“这是...... 我吗？”</p>\n<p>“哦？这么快就醒过来了吗。”</p>\n<p>是米斯凯尔的声音，现在操控着身体的是米斯凯尔吗，自己的身体居然能有这样的体能。</p>\n<p>“一般情况下，第一次苏醒是很困难的，因为需要借助暗能中枢的功能才能保持意识。”</p>\n<p>“这样吗？”</p>\n<p>“虽然我也不知道具体情况，但你似乎有使用过暗能中枢，可以确定的是，你的身上有很多秘密。”</p>\n<p>“秘密？” 洛更是满头雾水。</p>\n<p>自己身上唯一称得上秘密的，可能只是来自父母，除此之外，自己只是个卫星区的普通人。</p>\n<p>“快到了，听那个女人说起来，敌人没那么好对付，要交换吗？”</p>\n<p>“不必了，我还不熟悉使用羽化者的力量。” 洛虽然很希望能帮到姐姐，但眼下最好的选择还是交给这个叫米斯凯尔的家伙。</p>\n<p>“哈哈哈，很冷静嘛，我就喜欢这样的。” 米斯凯尔大笑着说，“其实就算是为了我自己考虑，我刚刚也没打算让你上，我从很远就感受到了，这里有一股很强的暗能富集点，敌人可能不好对付。”</p>\n<p>“.......”<br />\n“那个人就是你的姐姐吗？”</p>\n<p>“是澪姐姐。”</p>\n<p>洛看见姐姐躲在工厂外的围墙外，似乎正准备潜入。</p>\n<p>木村漓的消息没错，六合天使真的对姐姐的动作一清二楚，接下来放任不管的话，会被瓮中捉鳖吧。</p>\n<p>“姐姐！”</p>\n<p>米斯凯尔飞快的跑过去向澪打招呼。</p>\n<p>“居然自顾自的叫上姐姐了。” 洛有点忿忿不平。</p>\n<p>“洛，你怎么在这里！” 澪回过头来，很震惊，但显然更着急，“这里不是你该来的地方，快回去。”</p>\n<p>“噗嗤 ———” 米斯凯尔忍不住笑了出来。</p>\n<p>“你笑什么？”</p>\n<p>“失礼了。”</p>\n<p>“洛？不对，你是谁？” 澪察觉到了异常。</p>\n<p>“我”，米斯凯尔凑近了澪的耳朵，“是洛的暗能体。”</p>\n<hr />\n<p>“该死，这到底是怎么回事！” 澪看着眼前被暗能体掌控身体的洛，后退一步摆出了战斗的架势，“你把洛怎么样了？”</p>\n<p>“别急嘛，等我说完。” 米斯凯尔看着情况不对，赶忙解释，“情况有些复杂，但我并不是敌人。”</p>\n<p>“你要怎么证明？”</p>\n<p>“这就有点头疼了，现在还不方便换出你的弟弟。”</p>\n<p>“什么意思？” 还没等澪说完，工厂的门突然打开。</p>\n<p>“来了啊。” 米斯凯尔看向澪的身后，迎面走来一个戴着半副面具的女人。</p>\n<p>“你是 ————” 澪转过身，瞬间惊出一身冷汗。</p>\n<p>“还以为情况会好一点，这下麻烦了，这家伙，比想象中要难对付。” 对方爆发出的这股强大的暗位面引力，已经是局面难以收场最好的解释。</p>\n<p>“你为什么会在这里，你不是应该在亚特拉提吗 ————”</p>\n<p>“很吃惊是吗，这还要感谢你那可爱的伙伴哦。” 路西法轻蔑一笑，“居然愚蠢到想要打入六合天使内部，不得不佩服你们这些人的勇气呢。”</p>\n<p>“难道说！” 澪仿佛能够听到自己急促的心跳声。</p>\n<p>路西法伸出左手，身后的随从便将一个柱状的器皿递了上去。</p>\n<p>“真是可怜，直到最后还在挣扎着想要逃走。” 路西法从器皿中提出一颗头颅，“是想去告诉你不要过来吗，可惜她没能做到哦。”</p>\n<p>女孩的金发已经被鲜血大片染红，干结成片状，失去高光的双眼还在目视着前方。</p>\n<p>“怎么会 ————” 身处暗能中枢的洛感觉到了一阵毛骨悚然。</p>\n<p>“樱！” 澪发了疯般，准备冲上去，却被米斯凯尔一把拉住。</p>\n<p>“放开我！我要干掉这家伙！”</p>\n<p>“冷静点！” 米斯凯尔环顾四周，就在路西法吸引两人注意时，剿灭部队已经包围住了他们。</p>\n<p>“和计划一样，传达了陷阱信息，你就乖乖跳进来了，要不然你这种半吊子混在普通人里还真找不出来。” 路西法把樱的头丢在面前，看着米斯凯尔，“唯一的变数，就是你，你是什么人。”</p>\n<p>“可恶，我要杀了你！” 澪试图挣脱米斯凯尔，却没能成功。</p>\n<p>“澪！” 米斯凯尔握着澪的手臂，“我们先走！”</p>\n<p>“走？” 路西法冷笑，“不管你是什么人，想从我的手下逃走，可没那么容易。”</p>\n<p>剿灭部队大约二十人，这种情况要逃走也确实不简单。</p>\n<p>“可是，这家伙竟敢把樱 ———— 我不甘心，” 澪使不上半点力气，“洛，快放开我！”</p>\n<p>米斯凯尔松开了手，“不要天真了，我来拖住她，你趁机逃走。”</p>\n<p>“这样的话，我也留下来”，澪握紧了拳头，“对面这个人是路西法，六合天使的统领之一，不能留你一个人。”</p>\n<p>“如果是担心你弟弟的身体的话，我会保护好的，毕竟现在来说这也是我的身体，我会全身而退。” 米斯凯尔说，“如果是想为那个叫樱的女孩报仇的话，现在还不是时候。”</p>\n<p>“这么不把我放在眼里吗”，路西法丢掉手中的器皿，“得好好让你们领会一下六合天使的压倒性力量。”</p>\n<p>路西法抬起右手，瞄准了澪。</p>\n<p>“危险！” 米斯凯尔一把把澪拉开，瞬间一股气流从澪刚刚的位置呼啸而过，伴随着爆裂的声音，击中了后面的墙壁，墙壁被轰开了如同马蜂窝般的口子。</p>\n<p>“反应不错，居然能躲开这一下。” 路西法的脸上闪过一瞬间的惊讶，“反抗军里也有不错的羽化者嘛。”</p>\n<p>“好险。” 澪擦了擦额头。</p>\n<p>“要小心，这家伙是高阶动能系羽化者，刚才的攻击是针状空气柱。”</p>\n<p>“动能系的吗？” 澪虽然知道路西法的实力十分强，但对于她能力的本质还是第一次听到，而且居然还是和自己一样的动能系，这种加速能力，真是望尘莫及。</p>\n<p>“光是这一下，就连我的能力都看出来了吗，你这小子到底是什么人。”</p>\n<p>“我想我没必要告诉你吧。” 米斯凯尔镇静地说。</p>\n<p>“能看穿支系能力，是暗能系的羽化者吗，呵呵，原来如此。” 路西法脱下面具，露出了像是经历过重度烧伤的半边脸，“那就更不能让你走了，原初之羽。”</p>\n<p>“原初之羽？” 米斯凯尔说，“虽然不知道你在说什么，但我可不能让你如愿。”</p>\n<p>路西法抬起双手，瞄准着米斯凯尔，发射出数以万计的细小的高速空气针，巨大的音爆震耳欲聋。</p>\n<p>米斯凯尔灵敏地闪开了几个身位，躲开了攻击。</p>\n<p>“在后面！” 澪大喊。</p>\n<p>路西法将自己加速到了米斯凯尔身后，对准头部踢出一脚，米斯凯尔早已回身伸出右臂挡下了这一击，路西法挥出右拳对着太阳穴，米斯凯尔用左掌接下了重拳。</p>\n<p>“这样就结束了。” 路西法左手食指放在米斯凯尔左胸前，“给我射穿吧！”</p>\n<p>“洛！” 澪还没喊出来，便发现担心是多余的。</p>\n<p>“怎么会？” 路西法的技能没能放出空气针，反而是米斯凯尔一记膝击顶到了路西法的右腰上。</p>\n<p>“啊 ————” 路西法迅速后撤，但显然受了点伤，扶住了腰。</p>\n<p>“趁现在，快走！” 米斯凯尔想趁此机会让澪脱身。</p>\n<p>“可恶，没办法了，你要小心！” 这种战斗，自己在这里确实也只能拖后腿，不能白费洛的暗能体创造出的机会。澪使用能力将自己加速，开始撤离。</p>\n<p>无法插手的战斗，只能选择相信洛和他的的暗能体了，可恶，要是伊瑟芙尼能够觉醒的话......</p>\n<p>“休想！” 路西法瞄准澪，准备发射空气针，但却被米斯凯尔加速到眼前的一脚飞踢阻止了。</p>\n<p>“不愧是原初之羽。” 路西法闪开了攻击，“真是麻烦的能力。”</p>\n<p>刚刚的动能加速，是米斯凯尔在这场短暂的较量中现学的。</p>\n<p>“你们去拦住她！” 路西法一声令下，剿灭部队追着澪全数离开。</p>\n<p>米斯凯尔抬起右手瞄准了路西法。</p>\n<p>“连这个也学会了吗”，路西法也抬起手，双重音爆瞬间炸开，两人中间的场地上扬起了巨大的灰尘团。</p>\n<p>米斯凯尔加速离开，路西法见状也加速追了上去。</p>\n<p>“别想跑！” 显然路西法的速度更快一些，很快就拦在了米斯凯尔的前面。</p>\n<p>“嘁。” 米斯凯尔重新摆好战斗架势。</p>\n<p>“虽然你的能力确实很好用，让我吃了一惊，但似乎没有办法做到原版的水平哦。” 路西法狡黠一笑，“还有，刚刚我进攻时的能力失效，是因为肢体接触后你的某些能力所导致的对吧，虽然棘手，但也不是完全不能对付。”</p>\n<p>“真不好应对。” 米斯凯尔说，“即使不是暗能系羽化者，也能这么快分析出对手的能力。”</p>\n<p>“能得到原初之羽的夸奖，还真是荣幸”，路西法慢慢收起笑容，烧伤的半边脸颊变得更加可怖了起来，“那么，我要上了哦！”</p>\n<p>“有把握吗？” 洛问道。</p>\n<p>“不确定。” 米斯凯尔擦了擦额头，“逃跑应该是可以做到的，但在那之前要争取一点时间。”</p>\n<p>很快，米斯凯尔便发现自己的预计还是出了点差错。</p>\n<p>路西法张开双手，一股巨大的气流包围住了战场，天空中零散的一丝丝云雾也被吸拢在了战场的上方，原本晴朗的天气突然间阴沉了下来，路边的树叶被这股气压差吸附了过来，却在碰到气流壁的瞬间被绞碎，被染绿的风暴之壁包裹着两人。</p>\n<p>“本来不想这么大动干戈，但似乎现在不是省力气的时候了，现在开始，我要用上六合天使统领之一的全力来歼灭你。”</p>\n<p>“这也太夸张了吧。” 洛很显然被惊到了。</p>\n<p>“居然还留有这种手段，” 米斯凯尔有些动摇，“该死，这个世代的身体的调整太小，发挥不出原本的能力，这下糟糕了。”</p>\n<p>暗能系羽化者强大之处就在于可以通过暗能直接抵消掉其他形式的所有能量，但面对眼前这种程度的对手，要调度这种量级的暗能，基本没有进行过强化的洛的身体恐怕会先支撑不住。</p>\n<p>没办法，只能走一步看一步了。</p>\n<p>路西法加速自己，瞬间冲到了米斯凯尔的后方。</p>\n<p>“想学就尽管学吧！” 路西法握紧双拳，向米斯凯尔的后背挥来。</p>\n<p>米斯凯尔侧过身，用右臂挡在胸前，试图挡下这一击。</p>\n<p>但在下一瞬间，米斯凯尔便发现这是一个错误的决定。</p>\n<p>路西法在接触前的瞬间，将拳头周围布满了高速流动的空气将米斯凯尔瞬间弹开。</p>\n<p>“啊 ————” 被弹开的米斯凯尔撞到了风壁后又被弹了回去，高速的气体将米斯凯尔的身体划的伤痕累累，用来防御的右臂被割破了无数道口子。</p>\n<p>“不过如此。” 路西法轻蔑地一笑，“又想故技重施，通过接触来无效我的能力吗，真遗憾。”</p>\n<p>“你还好吗？” 洛担心的问。</p>\n<p>“还凑合，不过再这样下去就不妙了，得快想想办法。”</p>\n<p>“就此停手！” 突然传来了一阵声音，路西法和米斯凯尔同时看向了声音的来源，一个熟悉的身影从阴影中走了出来。</p>\n<p>“这是，木村老师？” 洛不禁喊了出来。</p>\n<p>“居然出现在这里”，路西法把头转了回来，并没有在看木村漓，“我警告你不要妨碍我，加百利，我的行动是经过六合天使中心议会半数通过的，你要违抗六合天使的意志吗？”</p>\n<p>“我可没说要违抗六合天使，路西法。”</p>\n<p>木村漓停在风壁外，“不过我要提醒你，你通过的行动是剿灭在阿斯特雷亚的反抗军，不是对其他人出手。”</p>\n<p>“别开玩笑了，这家伙可是暗能系的羽化者！”</p>\n<p>“说的没错，那又如何？”</p>\n<p>“嘁 ————” 路西法也知道，这次拟定的剿灭名单里面，只有两个人，桐谷樱和近卫澪，除此之外的行动都不受中心议会保护，也就是说加百利就可以自由行动。</p>\n<p>这家伙，来的可真是时候。</p>\n<p>“看来你也明白了，如果你要继续，你要面对的可就不仅仅是暗能系羽化者了。”</p>\n<p>“我记得你可是个讨厌战斗的人”，风壁逐渐变小，乌云也渐渐散去，路西法放下了双手，“虽然我自认为不会输，但毕竟不是稳操胜券，这次就先这样吧。”</p>\n<p>“那还真是好险，有一点你说对了，我确实讨厌战斗。” 木村漓推了推眼镜。</p>\n<p>“这次的剿灭部队也是你负责安排的人手吧，故意放走近卫澪。我真应该带我的直属部队的。”</p>\n<p>路西法看着不远处空手而归的剿灭部队，突然明白了什么。</p>\n<p>“哎呀哎呀，你在说什么。” 木村漓一脸无辜，“是我平时疏于管理，他们的战斗力确实下滑，我后面会给中心议会一个交代的。”</p>\n<p>“哼，油嘴滑舌。” 路西法转过身，走回了废弃工厂的大门。</p>\n<p>“木村 ———— 老师？” 米斯凯尔试探性的打了声招呼。</p>\n<p>“听刚才的话来看，姐姐她应该没事吧？” 洛看着局势缓和了下来，连忙发问。</p>\n<p>“你们干的不错，居然真的能从那个女人手上争取到近卫澪逃走的时间。”</p>\n<p>木村漓摸了摸洛的头，“放心吧，你姐姐现在应该回到安全的地方了。”</p>\n<p>“那就好 ————”</p>\n<p>“还有一点，你也是六合天使的统领之一吧，至少是和这个叫路西法的有同等的地位。” 轮到米斯凯尔发问。</p>\n<p>“嘘～～～”</p>\n<p>木村漓把食指放在嘴唇上，“还记得，要我帮忙，你们要做什么吗？”</p>\n<p>“...... 加入你的组织？”</p>\n<p>“很好，那就跟我来吧，我会把一切都告诉你们。”</p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<p>“近卫澪大人？发生什么事了”</p>\n<p>埃德尔感觉到了快速靠近的近卫澪，提前打开了大门，却看到了伤痕累累的澪。</p>\n<p>“可恶，中圈套了。”</p>\n<p>“是个陷阱？”</p>\n<p>“嗯，刚刚摆脱追击的敌人，马上联系菲利斯。”</p>\n<p>“是！”</p>\n<p>埃德尔走向房间深处，澪瘫坐在沙发上，几十分钟前的景象又再一次映然眼前。</p>\n<p>“樱 ————”</p>\n<p>失去了多年的好友，弟弟那边也不知现在情况如何，澪的心理防线又再一次崩溃。</p>\n<p>发生了太多事情，以至于洛是如何变成羽化者的，都已经没有时间去思考了。</p>\n<p>澪知道，如果洛没有出现，自己必然是和樱一样的结局。</p>\n<p>该庆幸吗？</p>\n<p>不，是自己把洛带进了深渊，又怎么有脸面去庆幸？</p>\n<p>和五年前一样丢下了洛独自一人面对一切一样，此刻洛的更是生死未卜。</p>\n<p>如果，如果自己的手能哪怕再有力一些，自己不安的心，又是否能够平静一些？</p>\n<p>只是，要无愧于洛，哪怕有了这一点，也是远远不够的，更何况，现在的自己，什么都做不到。</p>\n<p>“洛，原谅姐姐的无能 ————”</p>\n<h3 id=\"凛冬将至\"><a class=\"anchor\" href=\"#凛冬将至\">#</a> 凛冬将至</h3>\n<p>天空灰蒙蒙的，洛打开窗户，一阵微风夹杂着清晨的湿气扑面而来。</p>\n<p>“真是少见，卫星区的风。” 木村漓坐在沙发上，喝着茶。</p>\n<p>坐在旁边的一个外表叫做澪的红发女孩，躯体里的，只有一个叫伊瑟芙尼的暗能体。</p>\n<p>“找我来，是有什么事吗？” 洛坐到了沙发对面，无神的双眼注视着如同人偶一般的红发女孩。</p>\n<p>“首先，很遗憾，依然没有办法唤醒澪。”</p>\n<p>“这样啊。” 洛黯淡的双眼，又似乎失去了几分神采。</p>\n<p>“不要这么消极嘛，既然暗能体还没有消散，就有苏醒的可能。” 脑中的米斯凯尔安慰道。</p>\n<p>“也许吧。” 洛看向窗外，“还有呢？”</p>\n<p>“最近阿斯特雷亚出现内能系羽化者，你也听说了吧。”</p>\n<p>“肆意摧毁政府大楼，暗杀了阿斯特雷亚数位议员，逼得政府下令全民禁足来追查。”</p>\n<p>“没错。这件事也惊动了六合天使那边。”</p>\n<p>“明白了。”</p>\n<p>洛站起来转身就要出门。</p>\n<p>“不把她带上吗？我可是特意提前调整好她的状态，在你身边待着的话或许比在我这里更有机会苏醒。”</p>\n<p>“......” 洛片刻迟疑后说，“跟我来吧，伊瑟芙尼。”</p>\n<p>“告知，明白。” 红发女孩机械般的站起身，走到了洛的后面。</p>\n<p>“学校那边安排人手了，不过也请你多留意一下情况，一切小心行事，内能型羽化者恐怕是你最不好对付的类型。”</p>\n<p>木村漓放下了手中的茶杯，“直接带去学校吧，手续我已经安排好了。”</p>\n<p>洛没有回答，推开门离开了。</p>\n<p>“澪 ———— 洛 ————” 独自一人留下的木村漓长叹一口气，“我到底 ——————”。</p>\n<p>洛走出大楼，伊瑟芙尼跟在后面，现在是秋天，久违的风吹起路边的树叶，抬头便是阴蒙蒙的云，似乎还有些雨点。</p>\n<p>“还记得埃德尔吗？”</p>\n<p>“告知，记得，埃德尔是伊瑟芙尼的侍从。”</p>\n<p>“我是说这个世代的埃德尔。”</p>\n<p>“告知，埃德尔并没有和伊瑟芙尼一起降临这个世代。”</p>\n<p>“还是什么都不记得吗？”</p>\n<p>“告知，伊瑟芙尼记忆缺失，无法判断。”</p>\n<p>“......” 洛也知道，再问下去也没用。</p>\n<p>洛一直和姐姐有着联系，但自从反抗军和六合天使全面开战，姐姐就不见了踪影，洛在暗部不停的调查着姐姐的下落，但都没有回应，直到有一天，身受重伤的埃德尔把昏迷不醒的姐姐送回了曾经姐姐的根据地，洛这才得到了姐姐的下落。</p>\n<p>只是，埃德尔也在不久后重伤身亡，姐姐从沉睡中醒来后，就是这个样子，洛想尽一切办法，但都无济于事。</p>\n<p>渐渐的，随着战争愈演愈烈，一个接着一个的伙伴失去了生命，原本的校园生活也被无情的冲垮，等到战争以反抗军接受招安为止结束时，洛已经失去了太多太多。</p>\n<p>战后一切都在恢复正常，只不过由于反抗军将羽化者的存在公诸于世，曾经引起了不小的动荡，但在六合天使的某人的能力下，在大众的记忆中仿佛经历过的不是一场难以想象的超能力者之间的战争，而是一场简单的局部武装动乱而已。</p>\n<p>六合天使也是在使用羽化者的力量结束世界大战后，做了同样的事吧，至少在六合天使看来，隐藏羽化者的存在，这很重要。</p>\n<p>不过，至少今天要打起精神，因为今天是阿斯特雷亚高中复课的第一天，洛虽然没有心情继续上课，但同学们的情况洛还是有一点关心的，更重要的事，阿斯特雷亚的这个内能系羽化者会不会趁着这种机会破坏学校，洛不得而知。不过木村漓说过，学校是六合天使的重要设施，虽然洛有些不太理解，但总归是会加强防范的，大概洛就是措施之一吧。</p>\n<p>洛转头看了看跟在身后的伊瑟芙尼。</p>\n<p>其实刚刚要带走姐姐时的迟疑多半也是这一点，去学校的话，带着这样的姐姐，多半会有点行动不便，不过既然能提高姐姐苏醒的几率，倒也无所谓了。</p>\n<p>一路的沉默，时间也过的飞快，不知不觉就到了学校门口，SMSA 的金色大字让洛感受到了些许感触。</p>\n<p>经过了战火的洗礼，学校也收到了些冲击，不过因为远离主战场，受损情况还算比较小，此时已经来了不少人了。</p>\n<p>316 班，洛还清楚的记得。</p>\n<p>走进教室，洛环视了一周，大概来了一半的人，水无月昴，夜町助，都没有出现。</p>\n<p>虽然，洛早就提前了解到了这样的情况。</p>\n<p>不多久，新野老师进来了，右手缠着绷带，右脚略有些瘸，左手捧着文件夹，看来是受过伤。</p>\n<p>“很高兴能再次看到各位同学，也由于暴徒的袭击，很遗憾有些同学我们再也见不到了。首先向大家告知一下，根据学校方面的调查，以下同学已经在暴乱中丧生，三泽元、黑崎千姬、千岛凛人、...... 水无月昴、水泽明日香、......”</p>\n<p>水无月昴......</p>\n<p>洛在一次执行任务时，偶然得知了这个消息。据暗部的消息说，是在两个动能系羽化者之间的战斗中不幸受到波及遇难的。</p>\n<p>羽化者之间的纷争，反而是无辜的平民受难最多。</p>\n<p>那个黑崎千姬，是六合天使的人，据说是来监视木村漓的，在战争开始前确认完什么东西之后回总部了，貌似这个身份就这样被她丢弃了。</p>\n<p>“全体起立，让我们向这些同学们致以最沉痛的默哀。” 新野老师放下文件夹，手放在左胸前低下了头，过了几分钟。</p>\n<p>“接着是因伤住院不能到场的同学，夜町助、井野真纯、上井草咲夜...... 希望他们能早日康复。”</p>\n<p>夜町助，是在战争爆发后还在坚守剑道馆，不过再怎么强大的人，也不会是羽化者的对手，反抗军最终还是轻松攻下了这块地方，夜町助也被打成了重伤。洛曾去看过他一次，不过得到的情报是伤势过重，可能治好后也站不起来。</p>\n<p>新野老师说完后，又再次环视了一下教室，“其实也不全是坏消息，今天我们迎来了一位新同学，也是近卫洛同学的远房亲戚，澪同学，不过澪同学比较内向，自我介绍环节就跳过吧，大家好好相处。”</p>\n<p>居然还有这种大张旗鼓的环节，有点出乎了洛的预料。</p>\n<p>“那么接下来的时间，就先留给大家自由活动吧。” 新野老师拿着文件夹，慢慢的走了出去。</p>\n<p>“洛，要开始调查吗？” 脑中的米斯凯尔忍不住发问。</p>\n<p>从木村漓那边出来开始，气氛就一直不怎么对，米斯凯尔也一直没找到机会和洛搭话。</p>\n<p>“嗯，学校这边应该没有问题，去政府大楼那边看看吧。”</p>\n<p>“告知，提问，如何应对？”</p>\n<p>洛回过头，发现伊瑟芙尼的周围围着好几个人，是来欢迎新同学的吗，可现在没有时间搞这些了。</p>\n<p>“我们走。”</p>\n<p>“告知，明白。”</p>\n<p>“诶？”</p>\n<p>“虽然这么说有点不礼貌，但我怎么感觉澪同学好像个机器人啊。”</p>\n<p>“没关系吗？” 米斯凯尔看到这种情况问。</p>\n<p>“走吧，那个危险的羽化者那边比较要紧”</p>\n",
            "tags": [
                "轻小说",
                "零落之羽"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/hyperscan/hyperscan-demo/",
            "url": "https://echidna-sxh.github.io/hyperscan/hyperscan-demo/",
            "title": "section3--hyperscan的示例程序及其编译",
            "date_published": "2021-08-17T08:29:28.000Z",
            "content_html": "<h1 id=\"单模\"><a class=\"anchor\" href=\"#单模\">#</a> 单模</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;errno.h></span> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 用于生成错误代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;limits.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 用于确定在本机整数所占字节数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;hs.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 包含 hyperscan 库</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>time<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">.</span>tv_sec<span class=\"token operator\">*</span><span class=\"token number\">1000000</span><span class=\"token operator\">+</span>time<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">eventhandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> from<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"from:%d to%d\"</span><span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span>   </span><span class=\"token comment\">// 注释作用</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc<span class=\"token operator\">!=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pattern <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>inputdata <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">char</span> pattern<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"样本\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">char</span> inputdata<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"测试样本\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token class-name\">hs_database_t</span> <span class=\"token operator\">*</span>database<span class=\"token punctuation\">;</span><span class=\"token comment\">// 声明 hs 的模式数据库</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token class-name\">hs_compile_error_t</span> <span class=\"token operator\">*</span>compile_err<span class=\"token punctuation\">;</span><span class=\"token comment\">// 编译报错指针</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// 宏定义编译模式数据库时使用的标志位</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RULES_HS_FLAGS</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>HS_FLAG_CASELESS <span class=\"token operator\">|</span> HS_FLAG_SINGLEMATCH <span class=\"token operator\">|</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token expression\">HS_FLAG_DOTALL<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 单一匹配模式，与下面的选项不兼容</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">RULES_HS_LEFTMOST</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span>HS_FLAG_CASELESS <span class=\"token operator\">|</span> HS_FLAG_DAOTALL <span class=\"token operator\">|</span></span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        <span class=\"token expression\">HS_FLAG_LEFTMOST<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 附带返回匹配结果的起始位置，即 from</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 编译模式数据库</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hs_compile</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> RULES_HS_FLAGS<span class=\"token punctuation\">,</span> HS_MODE_BLOCK<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>database<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>compile_err<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>HS_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%s error compiled,err->%s\\n\"</span><span class=\"token punctuation\">,</span>pattern<span class=\"token punctuation\">,</span>compile_err<span class=\"token operator\">-></span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">// 创造草稿空间，用于后续匹配</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token class-name\">hs_scratch_t</span> <span class=\"token operator\">*</span>scratch <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">hs_alloc_scratch</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>scratch<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> HS_SUCCESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error,can not allocate scratch space!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">hs_free_database</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 记录匹配开始时间，用于计算匹配用时.</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> start_time<span class=\"token operator\">=</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">// 开始匹配</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">hs_scan</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span>inputdata<span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>inputdata<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            scratch<span class=\"token punctuation\">,</span>eventhandler<span class=\"token punctuation\">,</span>pattern<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> HS_SUCCESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"can not scan the data.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token function\">hs_free_scratch</span><span class=\"token punctuation\">(</span>scratch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">hs_free_database</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">// 输出结果</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str:%s\\n pattern:%s\\n spend %lu(us)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    inputdata<span class=\"token punctuation\">,</span>pattern<span class=\"token punctuation\">,</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token function\">hs_free_scratch</span><span class=\"token punctuation\">(</span>scratch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token function\">hs_free_database</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>编译：<br />\n使用 g++ 编译，链接 hs 库</li>\n</ul>\n<pre><code>gcc -o demo demo.c -lhs\n./demo\n</code></pre>\n<ul>\n<li>输出：</li>\n</ul>\n<p><img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/hyperscan/%5D~R7JF%7D%7D%7D9KRZP2EDZK8%25J8.png\" alt=\"\" /></p>\n<h1 id=\"多模\"><a class=\"anchor\" href=\"#多模\">#</a> 多模</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;errno.h></span> </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 用于生成错误代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;limits.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 用于确定在本机整数所占字节数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;hs.h></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 包含 hyperscan 库</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>time<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">.</span>tv_sec<span class=\"token operator\">*</span><span class=\"token number\">1000000</span><span class=\"token operator\">+</span>time<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">eventhandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> from<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>content<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"offset %d id=%d\\n\"</span><span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token number\">0</span>   </span><span class=\"token comment\">// 注释作用</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc<span class=\"token operator\">!=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pattern <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>inputdata <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> patterns<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foobar.*gh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"teakettle&#123;4,10&#125;\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ijkl[mMn]\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(101 &amp; 102 &amp; 103) | (104 &amp; !105)\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"!101 &amp; 102\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"!(!101 | 102)\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"101 &amp; !102\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">char</span> inputdata<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefxxfoobarrrghabcxdefxteakettleeeeexxxxijklmxxdef\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> ids<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">102</span><span class=\"token punctuation\">,</span> <span class=\"token number\">103</span><span class=\"token punctuation\">,</span> <span class=\"token number\">104</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1002</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1003</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1004</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>HS_FLAG_QUIET<span class=\"token punctuation\">,</span> HS_FLAG_QUIET<span class=\"token punctuation\">,</span> HS_FLAG_QUIET<span class=\"token punctuation\">,</span>HS_FLAG_QUIET<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>HS_FLAG_COMBINATION <span class=\"token operator\">|</span> HS_FLAG_SINGLEMATCH<span class=\"token punctuation\">,</span>HS_FLAG_COMBINATION<span class=\"token punctuation\">,</span>HS_FLAG_COMBINATION <span class=\"token operator\">|</span> HS_FLAG_SINGLEMATCH<span class=\"token punctuation\">,</span>HS_FLAG_COMBINATION <span class=\"token operator\">|</span> HS_FLAG_SINGLEMATCH<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token class-name\">hs_database_t</span> <span class=\"token operator\">*</span>database<span class=\"token punctuation\">;</span><span class=\"token comment\">// 声明 hs 的模式数据库</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token class-name\">hs_compile_error_t</span> <span class=\"token operator\">*</span>compile_err<span class=\"token punctuation\">;</span><span class=\"token comment\">// 编译报错指针</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>// 宏定义编译模式数据库时使用的标志位</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>#define RULES_HS_FLAGS (HS_FLAG_CASELESS | HS_FLAG_SINGLEMATCH |\\</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        HS_FLAG_DOTALL)</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>// 单一匹配模式，与下面的选项不兼容</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>#define RULES_HS_LEFTMOST (HS_FLAG_CASELESS | HS_FLAG_DAOTALL |\\</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        HS_FLAG_LEFTMOST)</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>// 附带返回匹配结果的起始位置，即 from</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 编译模式数据库</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token comment\">/*if (hs_compile(pattern, RULES_HS_FLAGS, HS_MODE_BLOCK, NULL, &amp;database, &amp;compile_err)!=HS_SUCCESS)&#123;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    fprintf(stderr,\"%s error compiled,err->%s\\n\",pattern,compile_err->message);</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    return -1;</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>&#125;*/</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hs_compile_multi</span><span class=\"token punctuation\">(</span>patterns<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> HS_MODE_BLOCK<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>database<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>compile_err<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>HS_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"%s error compiled,err->%s\\n\"</span><span class=\"token punctuation\">,</span>patterns<span class=\"token punctuation\">,</span>compile_err<span class=\"token operator\">-></span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 创造草稿空间，用于后续匹配</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token class-name\">hs_scratch_t</span> <span class=\"token operator\">*</span>scratch <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">hs_alloc_scratch</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>scratch<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> HS_SUCCESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error,can not allocate scratch space!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">hs_free_database</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">// 记录匹配开始时间，用于计算匹配用时.</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> start_time<span class=\"token operator\">=</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">// 开始匹配</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">hs_scan</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span>inputdata<span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>inputdata<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            scratch<span class=\"token punctuation\">,</span>eventhandler<span class=\"token punctuation\">,</span>patterns<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> HS_SUCCESS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"can not scan the data.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">hs_free_scratch</span><span class=\"token punctuation\">(</span>scratch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token function\">hs_free_database</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">// 输出结果</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"str:%s\\n spend %lu(us)\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    inputdata<span class=\"token punctuation\">,</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token function\">hs_free_scratch</span><span class=\"token punctuation\">(</span>scratch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token function\">hs_free_database</span><span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>输出：</li>\n</ul>\n<p><img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/hyperscan/E%60VK8YCD1%2421G%5BAM%40GIOFX.png\" alt=\"\" /></p>\n",
            "tags": [
                "计算机科学",
                "高性能正则"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/hyperscan/hyperscan-api/",
            "url": "https://echidna-sxh.github.io/hyperscan/hyperscan-api/",
            "title": "section2--hyperscan的对应接口",
            "date_published": "2021-08-16T08:29:28.000Z",
            "content_html": "<h1 id=\"调用方式\"><a class=\"anchor\" href=\"#调用方式\">#</a> 调用方式</h1>\n<ul>\n<li>#include&lt;hs.h&gt;</li>\n</ul>\n<h1 id=\"api的内容\"><a class=\"anchor\" href=\"#api的内容\">#</a> api 的内容</h1>\n<ul>\n<li>参考:<span class=\"exturl\" data-url=\"aHR0cDovL2ludGVsLmdpdGh1Yi5pby9oeXBlcnNjYW4vZGV2LXJlZmVyZW5jZS9hcGlfZmlsZXMuaHRtbCNmaWxlLWhzLWg=\">http://intel.github.io/hyperscan/dev-reference/api_files.html#file-hs-h</span></li>\n</ul>\n<h2 id=\"hsh\"><a class=\"anchor\" href=\"#hsh\">#</a> hs.h</h2>\n<ul>\n<li>包含 hs_compile.h 和 hs_runtime.h</li>\n</ul>\n<h2 id=\"hs_commonh\"><a class=\"anchor\" href=\"#hs_commonh\">#</a> hs_common.h</h2>\n<p>hyperscan 的通用定义，供上述两个头文件调用</p>\n<ul>\n<li>hyperscan 的 API 返回值宏定义 (失败时返回数值不同，但都是负数):</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>define</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HS_SUCCESS</td>\n<td>引擎正常工作的返回值</td>\n</tr>\n<tr>\n<td>HS_INVALID</td>\n<td>传递给此函数的参数无效。</td>\n</tr>\n<tr>\n<td>HS_NOMEM</td>\n<td>内存分配失败。</td>\n</tr>\n<tr>\n<td>HS_SCAN_TERMINATED</td>\n<td>引擎被回调函数手动终止。</td>\n</tr>\n<tr>\n<td>HS_COMPILER_ERROR</td>\n<td>模式编译失败，具体错误见结构体 hs_compile_error_t 的结果</td>\n</tr>\n<tr>\n<td>HS_DB_VERSION_ERROR</td>\n<td>数据库版本不是当前版本的</td>\n</tr>\n<tr>\n<td>HS_DB_PLATFORM_ERROR</td>\n<td>数据库不是当前平台 (cpu) 的</td>\n</tr>\n<tr>\n<td>HS_DB_MODE_ERROR</td>\n<td>数据库不是当前操作模式的 (流 / 块 / 向量)</td>\n</tr>\n<tr>\n<td>HS_BAD_ALIGN</td>\n<td>传递给此函数的参数未正确对齐。</td>\n</tr>\n<tr>\n<td>HS_BAD_ALLOC</td>\n<td>内存分配器没有正确返回适合此平台上最大可表示数据类型的内存。</td>\n</tr>\n<tr>\n<td>HS_SCRATCH_IN_USE</td>\n<td>草稿区域正在被使用</td>\n</tr>\n<tr>\n<td>HS_ARCH_ERROR</td>\n<td>CPU 架构不支持</td>\n</tr>\n<tr>\n<td>HS_INSUFFICIENT_SPACE</td>\n<td>（压缩流时）提供的缓冲区太小。</td>\n</tr>\n<tr>\n<td>HS_UNKNOWN_ERROR</td>\n<td>可能与用户对流和暂存空间的无效使用或无效的内存操作有关。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>其中定义的 typedef (结构体别名和函数指针):</p>\n<p><code>typedef struct hs_database hs_database_t   模式数据库的数据结构</code></p>\n<p><code>typedef int hs_error_t     hs中函数的返回值类型</code></p>\n<p><code>typedef void *(*hs_alloc_t)(size_t size)回调函数的函数指针,用于申请内存,返回一个void*类型指针.</code></p>\n<p><code>typedef void (*hs_free_t)(void *ptr)   回调函数的函数指针,只用于释放上述函数申请的内存</code></p>\n</li>\n<li>\n<p>其中的函数</p>\n<p><code>hs_error_t hs_free_database(hs_database_t *db)</code></p>\n<ul>\n<li>释放已编译的模式数据库，编译后的模式数据库。参数为 NULL 也可以安全地提供，在这种情况下，函数什么都不做。</li>\n</ul>\n<p><code>hs_error_t hs_serialize_database( const hs_database_t * db , char ** bytes , size_t * length )</code></p>\n<ul>\n<li>\n<p>将模式数据库序列化为字节流。</p>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li>db：编译后的模式数据库。</li>\n<li>bytes: 成功时，将在此处返回指向字节数组的指针。这些字节随后可以重新定位或写入磁盘。调用者负责释放这个块。\n<ul>\n<li>length: 成功时，生成的字节数组中的字节数将在此处返回。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_deserialize_database( const char * bytes , const size_t length , hs_database_t ** db )</code></p>\n<ul>\n<li>\n<p>从上述函数生成的字节流中重建数据库</p>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li>bytes：由 hs_serialize_database () 生成的字节数组，表示已编译的模式数据库。</li>\n<li>length: hs_serialize_database () 生成的字节数组的长度。这应该与 hs_serialize_database () 返回的值相同。</li>\n<li>db: 成功时，这里将返回一个指向新分配的 hs_database_t 的指针。然后可以使用该数据库进行扫描，并最终由调用者使用 hs_free_database () 释放。</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_deserialize_database_at( const char * bytes , const size_t length , hs_database_t * db )</code></p>\n<ul>\n<li>\n<p>与上述函数在参数类型上不同.</p>\n</li>\n<li>\n<p>参数:</p>\n<ul>\n<li>db, 由用户定义并分配空间，由用户手动释放.</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_database_size( const hs_database_t * database , size_t * database_size )</code></p>\n<ul>\n<li>\n<p>以字节为单位提供给定数据库的大小。</p>\n</li>\n<li>\n<p>参数:</p>\n<ul>\n<li>database: 指向编译模式数据库的指针。</li>\n<li>database_size: 成功时，编译数据库的大小（以字节为单位）放置在此参数中。</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_stream_size( const hs_database_t * database , size_t * stream_size )</code></p>\n<ul>\n<li>\n<p>提供由针对给定数据库打开的单个流分配的流状态的大小。</p>\n</li>\n<li>\n<p>参数:</p>\n<ul>\n<li>database：指向已编译（流模式）模式数据库的指针。</li>\n<li>stream_size：成功时，针对给定数据库打开的单个流的大小（以字节为单位）放置在此参数中。</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_serialized_database_size(const char *bytes, const size_t length, size_t *deserialized_size)</code></p>\n<ul>\n<li>\n<p>用于给出数据库反序列化时所需大小的工具函数，配合 hs_error_t hs_deserialize_database_at 使用。</p>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li>bytes：指向由 hs_serialize_database () 生成的字节数组的指针，表示已编译的模式数据库。</li>\n<li>length: hs_serialize_database () 生成的字节数组的长度。这应该与 hs_serialize_database () 返回的值相同。</li>\n<li>deserialized_size: 成功时，将在此处返回 hs_deserialize_database_at () 生成的已编译数据库的大小。</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_database_info(const hs_database_t *database, char **info)</code></p>\n<ul>\n<li>用于给出数据库版本和平台信息的工具函数</li>\n<li>参数\n<ul>\n<li>database: 指向一个已编译的数据库的指针</li>\n<li>info: 成功时，此处会放一个二维字符数组，给出信息.</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_serialized_database_info(const hs_database_t *database, char **info)</code></p>\n<ul>\n<li>\n<p>用于给出已经序列化的数据库版本和平台信息的工具函数</p>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li>database: 指向一个已编译的数据库的指针</li>\n<li>info: 成功时，此处会放一个二维字符数组，给出信息.</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_set_allocator( hs_alloc_t alloc_func , hs_free_t free_func )</code></p>\n<ul>\n<li>\n<p>设置 Hyperscan 用于为编译调用 hs_compile、hs_compile_multi、hs_compile_ext_multi 和 hs_deserialize_database 生成的数据库字节码分配内存的分配和释放函数。</p>\n</li>\n<li>\n<p>如果未设置数据库分配函数，或者使用 NULL 代替两个参数，则内存分配将默认为标准方法（例如系统 malloc () 和 free () 调用）</p>\n</li>\n</ul>\n<p><code>hs_error_t hs_set_misc_allocator(hs_alloc_t alloc_func, hs_free_t free_func)</code></p>\n<p><code>hs_error_t hs_set_scratch_allocator(hs_alloc_t alloc_func, hs_free_t free_func)</code></p>\n<p><code>hs_error_t hs_set_stream_allocator(hs_alloc_t alloc_func, hs_free_t free_func)</code></p>\n<p><code>hs_error_t hs_valid_platform(void)</code></p>\n<ul>\n<li>测试当前系统架构是否支持 hyperscan 的函数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hs_compileh\"><a class=\"anchor\" href=\"#hs_compileh\">#</a> hs_compile.h</h2>\n<ul>\n<li>此头文件包含用于将正则表达式编译到数据库的函数。</li>\n</ul>\n<h3 id=\"宏定义\"><a class=\"anchor\" href=\"#宏定义\">#</a> 宏定义</h3>\n<p>1. 标志位</p>\n<table>\n<thead>\n<tr>\n<th>flag</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HS_FLAG_CASELESS</td>\n<td>设置不区分大小写的匹配。</td>\n</tr>\n<tr>\n<td>HS_FLAG_DOTALL</td>\n<td>设置。允许匹配下一行的字符 (默认无法跨行)</td>\n</tr>\n<tr>\n<td>HS_FLAG_MULTILINE</td>\n<td>设置表达式中的 ^ 和 $ 标记匹配换行符以及流的开始和结束，否则只匹配流的开始和结束</td>\n</tr>\n<tr>\n<td>HS_FLAG_SINGLEMATCH</td>\n<td>设置单次匹配，只返回一个结果</td>\n</tr>\n<tr>\n<td>HS_FLAG_ALLOWEMPTY</td>\n<td>强制允许正则表达式匹配空，如.? 等，很耗性能，建议不开</td>\n</tr>\n<tr>\n<td>HS_FLAG_UTF8</td>\n<td>使用 UTF-8 字符集</td>\n</tr>\n<tr>\n<td>HS_FLAG_UCP</td>\n<td>使用 Unicode 编码，而非 ASCII</td>\n</tr>\n<tr>\n<td>HS_FLAG_PREFILTER</td>\n<td>开启预过滤模式，简化匹配模式，允许使用不支持的语法，如零宽断言后向引用等，结果是原结果的超集</td>\n</tr>\n<tr>\n<td>HS_FLAG_SOM_LEFTMOST</td>\n<td>报告最左侧匹配位置，即 from, 但耗费性能，且对下一个参数的模式选择有挑剔</td>\n</tr>\n<tr>\n<td>HS_FLAG_COMBINATION</td>\n<td>开启逻辑组合模式，允许表达式中使用 &amp;|! 对拥有 id 的表达式进行组合，这些被组合的一般要开 quiet 模式</td>\n</tr>\n<tr>\n<td>HS_FLAG_QUIET</td>\n<td>不做任何匹配报告</td>\n</tr>\n</tbody>\n</table>\n<p>2. 模式标志位</p>\n<table>\n<thead>\n<tr>\n<th>mode</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HS_MODE_BLOCK</td>\n<td>块扫描模式</td>\n</tr>\n<tr>\n<td>HS_MODE_NOSTREAM</td>\n<td>同上</td>\n</tr>\n<tr>\n<td>HS_MODE_STREAM</td>\n<td>流扫描模式</td>\n</tr>\n<tr>\n<td>HS_MODE_VECTORED</td>\n<td>矢量扫描模式</td>\n</tr>\n<tr>\n<td>HS_MODE_SOM_HORIZON_LARGE</td>\n<td>无视代价的实现最左侧报告 (默认不报告)</td>\n</tr>\n<tr>\n<td>HS_MODE_SOM_HORIZON_MEDIUM</td>\n<td>寻找最左侧的精度限制为从最右向左 2^32 字节</td>\n</tr>\n<tr>\n<td>HS_MODE_SOM_HORIZON_SMALL</td>\n<td>寻找最左侧精度限制为从最右向左 2^16 字节</td>\n</tr>\n</tbody>\n</table>\n<p>3. 类型定义（结构体成员见下文）</p>\n<p><code>typedef struct hs_compile_error hs_compile_error_t</code></p>\n<ul>\n<li>\n<p>包含错误详细信息的类型，其作为参数由 hs_compile ()、hs_compile_multi () 和 hs_compile_ext_multi () 在失败时赋值。调用者可以检查以这种类型返回的值以确定失败的原因。</p>\n</li>\n<li>\n<p>常见错误包括 (来自 hs_compile.h, 此部分内容和该头文件下的介绍重复):</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>错误</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Invalid parameter</td>\n<td>参数无效</td>\n</tr>\n<tr>\n<td>Unrecognised flag</td>\n<td>标志 (flag) 无法识别</td>\n</tr>\n<tr>\n<td>Pattern matches empty buffer</td>\n<td>未开启 HS_FLAG_ALLOWEMPTY 的情况下匹配到了空</td>\n</tr>\n<tr>\n<td>Embedded anchors not supported</td>\n<td>^ 和 $ 不支持嵌入表达式</td>\n</tr>\n<tr>\n<td>Bounded repeat is too large</td>\n<td>重复构造过大</td>\n</tr>\n<tr>\n<td>Unsupported component type</td>\n<td>不支持的表达式组件</td>\n</tr>\n<tr>\n<td>Unable to generate bytecode</td>\n<td>虽然语法上可行，但模式太复杂</td>\n</tr>\n<tr>\n<td>Unable to allocate memory</td>\n<td>编译时无法分配临时空间</td>\n</tr>\n<tr>\n<td>Allocator returned misaligned memory</td>\n<td>分配器未返回最大可表示数据类型的内存</td>\n</tr>\n<tr>\n<td>Internal error</td>\n<td>发生意外错误，指 hs 本身的 bug</td>\n</tr>\n</tbody>\n</table>\n<p> </p>\n<p><code>typedef struct hs_platform_info hs_platform_info_t</code></p>\n<ul>\n<li>\n<p>包含目标平台信息的类型，可以选择提供给编译调用 hs_compile ()、hs_compile_multi ()、hs_compile_ext_multi ()</p>\n</li>\n<li>\n<p>hs_platform_info 结构可以通过 hs_populate_platform 函数事先赋值</p>\n</li>\n</ul>\n<p><code>typedef struct hs_expr_info hs_expr_info_t</code></p>\n<ul>\n<li>包含表达式的相关信息，由 hs_expression_info () 或 hs_expression_ext_info 赋值.</li>\n</ul>\n<p><code>typedef struct hs_expr_ext hs_expr_ext_t</code></p>\n<ul>\n<li>包含表达式附加参数的结构体，在构建时传入 hs_compile_ext_multi () 或 hs_expression_ext_info</li>\n</ul>\n<p>4. 函数定义</p>\n<p><code>hs_error_t hs_compile(const char *expression, unsigned int flags, unsigned int mode, const hs_platform_info_t *platform, hs_database_t **db, hs_compile_error_t **error)</code></p>\n<ul>\n<li>最基本的编译函数</li>\n<li>参数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expression</td>\n<td>要解析的以 NULL 结尾的表达式，没有分隔符或标志</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>修改表达式行为的标志，多个建议用宏定义，如下一章示例</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>生成的数据库的匹配模式 (块 / 流 / 矢量)</td>\n</tr>\n<tr>\n<td>platform</td>\n<td>如果不为 NULL，则使用平台结构来确定数据库的目标平台。如果为 NULL，则生成适合在当前主机平台上运行的数据库。</td>\n</tr>\n<tr>\n<td>db</td>\n<td>在此参数中返回指向生成的数据库的指针</td>\n</tr>\n<tr>\n<td>error</td>\n<td>编译失败将返回一个指向 hs_compile_error_t 的指针，调用者负责使用 hs_free_compile_error () 函数释放缓冲区</td>\n</tr>\n</tbody>\n</table>\n<p><code>hs_error_t hs_compile_multi(const char *const *expressions, const unsigned int *flags, const unsigned int *ids, unsigned int elements, unsigned int mode, const hs_platform_info_t *platform, hs_database_t **db, hs_compile_error_t **error) </code></p>\n<ul>\n<li>多模正则匹配编译函数\n<ul>\n<li>参数</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expressions</td>\n<td>二维数组，以编译多条表达式</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>一维数组，存放上述对应下标表达式的标志位</td>\n</tr>\n<tr>\n<td>ids</td>\n<td>以为数组，存放上述对应下标表达式的编号，NULL 则全设 0</td>\n</tr>\n<tr>\n<td>elements</td>\n<td>输入数组中的元素数。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>生成的数据库的匹配模式 (块 / 流 / 矢量)</td>\n</tr>\n<tr>\n<td>platform</td>\n<td>如果不为 NULL，则使用平台结构来确定数据库的目标平台。如果为 NULL，则生成适合在当前主机平台上运行的数据库。</td>\n</tr>\n<tr>\n<td>db</td>\n<td>在此参数中返回指向生成的数据库的指针</td>\n</tr>\n<tr>\n<td>error</td>\n<td>编译失败将返回一个指向 hs_compile_error_t 的指针，调用者负责使用 hs_free_compile_error () 函数释放缓冲区</td>\n</tr>\n</tbody>\n</table>\n<p> </p>\n<p><code>hs_error_t hs_compile_ext_multi(const char *const *expressions, const unsigned int *flags, const unsigned int *ids, const hs_expr_ext_t *const *ext, unsigned int elements, unsigned int mode, const hs_platform_info_t *platform, hs_database_t **db, hs_compile_error_t **error)</code></p>\n<ul>\n<li>具有扩展参数支持的多正则表达式编译器</li>\n<li>此函数调用以与 hs_compile_multi () 相同的方式将一组表达式编译到数据库中，但允许通过每个表达式的 hs_expr_ext_t 结构指定其他参数</li>\n<li>参数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expressions</td>\n<td>二维数组，以编译多条表达式</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>一维数组，存放上述对应下标表达式的标志位</td>\n</tr>\n<tr>\n<td>ids</td>\n<td>以为数组，存放上述对应下标表达式的编号，NULL 则全设 0</td>\n</tr>\n<tr>\n<td>ext</td>\n<td>指向填充的 hs_expr_ext_t 结构的指针数组，这些结构定义了每个模式的扩展行为。如果单个模式不需要扩展行为，则可以指定 NULL，如果任何表达式都不需要它，则可以指定 NULL 代替整个数组。这些结构使用的内存必须由调用者分配和释放。</td>\n</tr>\n<tr>\n<td>elements</td>\n<td>输入这些数组中的元素数</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>生成的数据库的匹配模式 (块 / 流 / 矢量)</td>\n</tr>\n<tr>\n<td>platform</td>\n<td>如果不为 NULL，则使用平台结构来确定数据库的目标平台。如果为 NULL，则生成适合在当前主机平台上运行的数据库。</td>\n</tr>\n<tr>\n<td>db</td>\n<td>在此参数中返回指向生成的数据库的指针</td>\n</tr>\n<tr>\n<td>error</td>\n<td>编译失败将返回一个指向 hs_compile_error_t 的指针，调用者负责使用 hs_free_compile_error () 函数释放缓冲区</td>\n</tr>\n</tbody>\n</table>\n<p><code>hs_error_t hs_compile_lit(const char *expression, unsigned flags, const size_t len, unsigned mode, const hs_platform_info_t *platform, hs_database_t **db, hs_compile_error_t **error) </code></p>\n<ul>\n<li>纯文字匹配，不包含正则语法</li>\n<li>参数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expression</td>\n<td>要解析的以 NULL 结尾的表达式。字符串内容应完全按字面意思解析</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>少量可用标志，忽视大小写 / 单个匹配 / 报告最左偏移</td>\n</tr>\n<tr>\n<td>len</td>\n<td>纯字面量表达式的文本内容的长度，这是必要的，因为 \\0 也被解释为了普通字符，不能自动衡量长度了</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>生成的数据库的匹配模式 (块 / 流 / 矢量)</td>\n</tr>\n<tr>\n<td>platform</td>\n<td>如果不为 NULL，则使用平台结构来确定数据库的目标平台。如果为 NULL，则生成适合在当前主机平台上运行的数据库。</td>\n</tr>\n<tr>\n<td>db</td>\n<td>在此参数中返回指向生成的数据库的指针</td>\n</tr>\n<tr>\n<td>error</td>\n<td>编译失败将返回一个指向 hs_compile_error_t 的指针，调用者负责使用 hs_free_compile_error () 函数释放缓冲区</td>\n</tr>\n</tbody>\n</table>\n<p><code>hs_error_t hs_compile_lit_multi( const char * const *expressions, const unsigned * flags , const unsigned * ids , const size_t * lens , unsigned elements , unsigned mode , const hs_platform_info_t * platform , hs_database_t ** db , hs_compile_error_t ** error )</code></p>\n<ul>\n<li>多重纯文字表达式编译器</li>\n<li>参数</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expressions</td>\n<td>二维数组，解析的以 NULL 结尾的表达式，字符串内容应完全按字面意思解析</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>少量可用标志，忽视大小写 / 单个匹配 / 报告最左偏移</td>\n</tr>\n<tr>\n<td>ids</td>\n<td>一个整数数组，指定要与表达式数组中的相应模式关联的 ID 号。指定 NULL 指针代替数组会将所有模式的 ID 值设置为零。</td>\n</tr>\n<tr>\n<td>lens</td>\n<td>每个纯文字表达式的文本内容的长度数组，存在原因同上</td>\n</tr>\n<tr>\n<td>elements</td>\n<td>输入数组中的元素数。</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>生成的数据库的匹配模式 (块 / 流 / 矢量)</td>\n</tr>\n<tr>\n<td>platform</td>\n<td>如果不为 NULL，则使用平台结构来确定数据库的目标平台。如果为 NULL，则生成适合在当前主机平台上运行的数据库。</td>\n</tr>\n<tr>\n<td>db</td>\n<td>在此参数中返回指向生成的数据库的指针</td>\n</tr>\n<tr>\n<td>error</td>\n<td>编译失败将返回一个指向 hs_compile_error_t 的指针，调用者负责使用 hs_free_compile_error () 函数释放缓冲区</td>\n</tr>\n</tbody>\n</table>\n<p><code>hs_error_t hs_free_compile_error(hs_compile_error_t *error)</code></p>\n<ul>\n<li>\n<p>用来释放编译生成的错误信息的结构体</p>\n</li>\n<li>\n<p>参数:</p>\n<ul>\n<li>error: 要释放的 hs_compile_error_t。NULL 也可以安全地提供。<br />\n <code>hs_error_t hs_expression_info( const char * expression , unsigned int flags , hs_expr_info_t ** info , hs_compile_error_t ** error )</code></li>\n</ul>\n</li>\n<li>\n<p>提供有关正则表达式的信息的实用函数。hs_expr_info_t 中提供的信息包括模式匹配的最小和最大宽度。</p>\n</li>\n<li>\n<p>注意：使用此函数成功分析表达式并不意味着编译相同的表达式会成功。对于 Hyperscan 无法编译的正则表达式，此函数可能会返回 HS_SUCCESS。</p>\n</li>\n<li>\n<p>注意：此调用接受某些模式标志（例如 HS_FLAG_ALLOWEMPTY、HS_FLAG_SOM_LEFTMOST），但由于它们不影响 hs_expr_info_t 结构中返回的属性，因此它们不会影响此函数的结果。</p>\n</li>\n<li>\n<p>参数</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expression</td>\n<td>要解析的以 NULL 结尾的表达式，没有分隔符或标志</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>一维数组，存放上述对应下标表达式的标志位</td>\n</tr>\n<tr>\n<td>info</td>\n<td>此参数将返回指向模式信息的指针</td>\n</tr>\n<tr>\n<td>error</td>\n<td>编译失败将返回一个指向 hs_compile_error_t 的指针，调用者负责使用 hs_free_compile_error () 函数释放缓冲区</td>\n</tr>\n</tbody>\n</table>\n<p><code>hs_error_t hs_expression_ext_info( const char * expression , unsigned int flags , const hs_expr_ext_t * ext , hs_expr_info_t ** info , hs_compile_error_t ** error )</code></p>\n<ul>\n<li>\n<p>函数提供有关正则表达式的信息，并具有扩展的参数支持。hs_expr_info_t 中提供的信息包括模式匹配的最小和最大宽度。</p>\n</li>\n<li>\n<p>注意点同上.</p>\n</li>\n<li>\n<p>参数</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>expression</td>\n<td>要解析的以 NULL 结尾的表达式，没有分隔符或标志</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>一维数组，存放上述对应下标表达式的标志位</td>\n</tr>\n<tr>\n<td>ext</td>\n<td>指向已填充的 hs_expr_ext_t 结构的指针，该结构定义了此模式的扩展行为。如果不需要扩展参数，则可以指定 NULL。</td>\n</tr>\n<tr>\n<td>info</td>\n<td>成功时，此参数将返回指向模式信息的指针，失败时返回 NULL。</td>\n</tr>\n<tr>\n<td>error</td>\n<td>编译失败将返回一个指向 hs_compile_error_t 的指针，调用者负责使用 hs_free_compile_error () 函数释放缓冲区</td>\n</tr>\n</tbody>\n</table>\n<p><code>hs_error_t hs_populate_platform( hs_platform_info_t * platform )</code></p>\n<ul>\n<li>\n<p>给出当前平台信息</p>\n</li>\n<li>\n<p>参数</p>\n<ul>\n<li>platform：成功后，指向的结构将根据当前主机填充。</li>\n</ul>\n</li>\n</ul>\n<p>结构体定义</p>\n<ul>\n<li>摘自源代码</li>\n</ul>\n<p>hs_compile_error_t</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 作为指针传给编译函数，由编译函数赋值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hs_compile_error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>message<span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误描述</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> expression<span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误代码，负数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">hs_compile_error_t</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>hs_platform_info_t</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 一般由 hs_populate_platform () 函数赋值，作为 platform 参数传给编译函数 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hs_platform_info</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> tune<span class=\"token punctuation\">;</span><span class=\"token comment\">// 目标平台信息，不影响数据库能否运行而影响数据库效率</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> cpu_features<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 目标平台上可用的相关 CPU 功能，该值可以通过组合 HS_CPU_FEATURE_* 标志产生，如下。可以将多个 CPU 功能组合在一起以产生该值。*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> reserved1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 保留字段</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> reserved2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 保留字段</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">hs_platform_info_t</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>CPU 特化</p>\n<table>\n<thead>\n<tr>\n<th>HS_CPU_FEATURES_*</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HS_CPU_FEATURES_AVX2</td>\n<td>Intel(R) Advanced Vector Extensions 2</td>\n</tr>\n<tr>\n<td>HS_CPU_FEATURES_AVX512</td>\n<td>Intel(R) Advanced Vector Extensions 512</td>\n</tr>\n<tr>\n<td>HS_CPU_FEATURES_AVX512VBMI</td>\n<td>Intel(R) Advanced Vector Extensions 512 Vector Byte Manipulation Instructions</td>\n</tr>\n</tbody>\n</table>\n<p>平台特化</p>\n<table>\n<thead>\n<tr>\n<th>HS_TUNE_*</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HS_TUNE_FAMILY_GENERIC</td>\n<td>通用，不针对性优化</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_SNB</td>\n<td>Intel (R) Sandy Bridge 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_IVB</td>\n<td>Intel (R) Ivy Bridge 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_HSW</td>\n<td>Intel (R) Haswell 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_SLM</td>\n<td>Intel (R) Silvermont 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_BDW</td>\n<td>Intel (R) Broadwell 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_SKL</td>\n<td>Intel (R) Skylake 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_SKX</td>\n<td>Intel (R) Skylake Server 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_GLM</td>\n<td>Intel (R) Goldmont 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_ICL</td>\n<td>Intel (R) Icelake 平台</td>\n</tr>\n<tr>\n<td>HS_TUNE_FAMILY_ICX</td>\n<td>Intel (R) Icelake Server 平台</td>\n</tr>\n</tbody>\n</table>\n<p>hs_expr_info_t</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hs_expr_info</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> min_width<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表达式的最小匹配长度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> max_width<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表达式的最大匹配长度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> unordered_matches<span class=\"token punctuation\">;</span><span class=\"token comment\">/* 此表达式是否可以生成未按顺序返回的匹配项，例如由断言生成的匹配项。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     如果为假则为零，如果为真则为非零。*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> matches_at_eod<span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以在流模式的 END OF DATA 标识符处匹配</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">char</span> matches_only_at_eod<span class=\"token punctuation\">;</span><span class=\"token comment\">// 只在流模式的 END OF DATA 标识符处匹配</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">hs_expr_info_t</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 表达式相关信息</span></pre></td></tr></table></figure><p>hs_expr_ext_t</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hs_expr_ext</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> flags<span class=\"token punctuation\">;</span><span class=\"token comment\">// 额外标志位</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> min_offset<span class=\"token punctuation\">;</span><span class=\"token comment\">// 产生报告的最小偏移量，数据流模式，要使用此参数，请设置 HS_EXT_FLAG_MIN_OFFSET 标志</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> max_offset<span class=\"token punctuation\">;</span><span class=\"token comment\">// 产生报告的最大偏移量，数据流模式，要使用此参数，请设置 HS_EXT_FLAG_MAX_OFFSET 标志。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> min_length<span class=\"token punctuation\">;</span><span class=\"token comment\">/* 成功匹配此表达式所需的最小匹配长度（从开始到结束）。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    要使用此参数，请设置 HS_EXT_FLAG_MIN_LENGTH 标志。*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> edit_distance<span class=\"token punctuation\">;</span><span class=\"token comment\">// 允许模式在此编辑距离内大致匹配。要使用此参数，请设置 HS_EXT_FLAG_EDIT_DISTANCE 标志。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> hamming_distance<span class=\"token punctuation\">;</span><span class=\"token comment\">// 允许模式在此汉明距离内近似匹配。要使用此参数，请设置 HS_EXT_FLAG_HAMMING_DISTANCE 标志。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">hs_expr_ext_t</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol>\n<li>汉明距离</li>\n</ol>\n<p>在信息论中，两个等长字符串之间的汉明距离是两个字符串对应位置的不同字符的个数。例如，1011101 与 1001001 之间的汉明距离是 2。</p>\n<ol start=\"2\">\n<li>编辑距离</li>\n</ol>\n<p>又称 Levenshtein 距离，是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。例如，kitten 与 sitting 之间的编辑距离为 3。</p>\n</blockquote>\n<h2 id=\"runtimeh\"><a class=\"anchor\" href=\"#runtimeh\">#</a> runtime.h</h2>\n<p>1. 宏定义</p>\n<p><code>HS_OFFSET_PAST_HORIZON</code></p>\n<p>表示 from 开始的位置太遥远，给定的 SOM_HORIZON 精度不够。</p>\n<p>2. 类型定义</p>\n<p><code>typedef struct hs_stream hs_stream_t // hs_open_stream()返回值</code></p>\n<p><code>typedef struct hs_scratch hs_scratch_t //草稿空间的数据结构，自行申请内存</code></p>\n<p><code>typedef int (*match_event_handler)(unsigned int id, unsigned long long from, unsigned long long to, unsigned int flags, void *context) //找到匹配时的回调函数</code></p>\n<ul>\n<li>\n<p>在执行扫描期间，只要匹配项位于目标数据中，就会调用此回调函数。匹配的详细信息作为参数传递给回调函数，回调函数应返回一个值，指示是否应继续对目标数据进行匹配。如果不需要来自扫描调用的回调，则可以提供 NULL 以抑制匹配产生。</p>\n</li>\n<li>\n<p>如果匹配应该停止，则返回非 0（会导致 hs_scan 返回 HS_SCAN_TERMINATED），否则返回 0。如果在流模式下执行扫描并返回非零值，则对该流的任何后续 hs_scan_stream () 调用将立即返回 HS_SCAN_TERMINATED。</p>\n</li>\n<li>\n<p>参数</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>匹配的表达式的 ID 号。如果表达式是使用 hs_compile () 编译的单个表达式，则此值将为零。</td>\n</tr>\n<tr>\n<td>from</td>\n<td>开启 SOM_HORIZON 相关标志时为匹配开始位置，否则为 0，根据过远情况也会返回 HS_OFFSET_PAST_HORIZON</td>\n</tr>\n<tr>\n<td>to</td>\n<td>匹配表达式的最后一个字节之后的偏移量</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>暂时不使用</td>\n</tr>\n<tr>\n<td>context</td>\n<td>用户传给 scan 相关函数的指针，再传进会回调函数以供信息传递</td>\n</tr>\n</tbody>\n</table>\n<p>3. 函数接口</p>\n<p><code>hs_error_t hs_open_stream( const hs_database_t * db , unsigned int flags , hs_stream_t ** stream )//打开并初始化一个数据流(将匹配模式流化)</code></p>\n<ul>\n<li>参数\n<ul>\n<li>db：编译后的模式数据库</li>\n<li>flags：修改流行为的标志。该参数供将来使用，目前未使用。</li>\n<li>stream: 成功时，将返回指向生成的 hs_stream_t 的指针；失败时为 NULL。</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_scan_stream( hs_stream_t * id , const char * data , unsigned int length , unsigned int flags , hs_scratch_t * scratch , match_event_handler onEvent , void * ctxt )//将数据和流匹配</code></p>\n<ul>\n<li>参数\n<ul>\n<li>id：数据将写入的流 ID（由 hs_open_stream () 返回）</li>\n<li>data：指向要扫描的数据的指针</li>\n<li>length：要扫描的字节数</li>\n<li>flags：修改流行为的标志。该参数供将来使用，目前未使用</li>\n<li>scratch：由 hs_alloc_scratch () 分配的草稿空间</li>\n<li>onEvent: 指向匹配事件回调函数的指针。如果给出 NULL 指针，则不会返回匹配项</li>\n<li>ctxt: 用户定义的指针，当匹配发生时将传递给回调函数</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_close_stream( hs_stream_t * id , hs_scratch_t * scratch , match_event_handler onEvent , void * ctxt )//关闭一个流</code></p>\n<ul>\n<li>此函数会判定数据输入结束，对当前数据完成匹配并关闭流。此调用后，指向的流 id 无效，无法再使用。要在完成后重用流状态，而不是关闭它，可以使用 hs_reset_stream 函数。</li>\n<li>必须为使用 hs_open_stream () 创建的任何流调用此函数（类似于 malloc 和 free 的关系），即使扫描已被匹配回调函数的非零返回终止。</li>\n<li>对于锚定到数据流末尾的表达式（例如，通过使用 $ 元字符），此操作可能导致误匹配。如果不需要这些匹配，则可以提供 NULL 作为本次的回调函数，仅此时草稿空间允许也为 NULL。</li>\n<li>参数\n<ul>\n<li>id：hs_open_stream () 返回的流 ID</li>\n<li>scratch：由 hs_alloc_scratch () 分配的草稿空间。仅当 onEvent 回调也是 NULL 时才允许为 NULL</li>\n<li>onEvent: 指向匹配事件回调函数的指针。如果给出 NULL 指针，则不会返回匹配项</li>\n<li>ctxt: 用户定义的指针，当匹配发生时将传递给回调函数</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_reset_stream( hs_stream_t * id , unsigned int flags , hs_scratch_t * scratch , match_event_handler onEvent , void * context )//将流重置为初始状态</code></p>\n<ul>\n<li>可以理解为这个函数将流关闭后重开了，只不过清除了匹配状态。</li>\n<li>和上面的关闭函数一样，也会视为数据输入结束，进行匹配报告。</li>\n<li>对于锚定到数据流末尾的表达式（例如，通过使用 $ 元字符），此操作可能导致误匹配。如果不需要这些匹配，则可以提供 NULL 作为本次的回调函数，仅此时草稿空间允许也为 NULL。</li>\n<li>参数\n<ul>\n<li>id：要重启的流（由 hs_open_stream () 创建）</li>\n<li>flags：修改流行为的标志。该参数供将来使用，目前未使用</li>\n<li>scratch：由 hs_alloc_scratch () 分配的草稿空间。仅当 onEvent 回调也是 NULL 时才允许为 NULL</li>\n<li>onEvent: 指向匹配事件回调函数的指针。如果给出 NULL 指针，则不会返回匹配项</li>\n<li>context: 用户定义的指针，当匹配发生时将传递给回调函数</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_copy_stream( hs_stream_t ** to_id , const hs_stream_t * from_id )//复制给定的流。新流将具有与原始流相同的状态，包括当前流偏移</code></p>\n<ul>\n<li>参数\n<ul>\n<li>to_id: 成功时，将返回指向新复制的 hs_stream_t 的指针；失败时为 NULL</li>\n<li>from_id：要复制的流（由 hs_open_stream () 创建）</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_reset_and_copy_stream( hs_stream_t * to_id , const hs_stream_t * from_id , hs_scratch_t * scratch , match_event_handler onEvent , void * context )//将给定的“from”流状态复制到“to”流上</code></p>\n<ul>\n<li>这个函数会将 'to' 流先重置</li>\n<li>from 流和 to 流必须依赖同一数据库</li>\n<li>参数\n<ul>\n<li>to_id: 成功时，将返回指向新复制的 hs_stream_t 的指针</li>\n<li>from_id：要复制的流（由 hs_open_stream () 创建）</li>\n<li>scratch：由 hs_alloc_scratch () 分配的草稿空间。仅当 onEvent 回调也是 NULL 时才允许为 NULL</li>\n<li>onEvent: 指向匹配事件回调函数的指针。如果给出 NULL 指针，则不会返回匹配项</li>\n<li>context: 用户定义的指针，当匹配发生时将传递给回调函数</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_compress_stream( const hs_stream_t * stream , char * buf , size_t buf_space , size_t * used_space )//压缩这一流的状态</code></p>\n<ul>\n<li>可以理解为创建一个当前流的压缩副本，不会关闭源流。</li>\n<li>HS_SUCCESS，或者缓存区太小返回 HS_INSUFFICIENT_SPACE</li>\n<li>参数\n<ul>\n<li>stream：要压缩的流（由 hs_open_stream () 创建）</li>\n<li>buf: char * 类型的缓冲区，可以用 NULL，此时此函数用作测试压缩所需空间。</li>\n<li>buf_space: buf 中的字节数。</li>\n<li>used_space : 指向 ' 压缩流所用空间的大小 ' 这个变量的指针，如果 buf 溢出则返回压缩应使用空间大小。</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_expand_stream( const hs_database_t * db , hs_stream_t ** stream , const char * buf , size_t buf_size )//将压缩的流解压缩</code></p>\n<ul>\n<li>必须是对应于同一压缩操作，滥用时此函数不会报错但结果未知。</li>\n<li>参数\n<ul>\n<li>db：打开压缩流所针对的编译模式数据库</li>\n<li>stream: 成功时，将返回指向扩展的 hs_stream_t 的指针；失败时为 NULL</li>\n<li>buf：流的压缩表示。这些压缩形式由 hs_compress_stream () 创建</li>\n<li>buf_size：压缩表示的大小（以字节为单位）</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_reset_and_expand_stream( hs_stream_t * to_stream , const char * buf , size_t buf_size , hs_scratch_t * scratch , match_event_handler onEvent , void * context )//将压缩流的状态赋予同一数据库下的另一个流，这一流会先被重置</code></p>\n<ul>\n<li>buf 不对时不会报错，但结果未知。</li>\n<li>参数\n<ul>\n<li>to_stream：指向有效流状态的指针。将返回指向扩展的 hs_stream_t 的指针；失败时为 NULL</li>\n<li>buf：流的压缩表示。这些压缩形式由 hs_compress_stream () 创建</li>\n<li>buf_size：压缩表示的大小（以字节为单位）</li>\n<li>scratch：由 hs_alloc_scratch () 分配的每线程暂存空间。仅当 onEvent 回调也是 NULL 时才允许为 NULL</li>\n<li>onEvent: （EOD 等）性质同上面几个函数。</li>\n<li>context: 用户定义的指针，当匹配发生时将传递给回调函数</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_scan( const hs_database_t * db , const char * data , unsigned int length , unsigned int flags , hs_scratch_t * scratch , match_event_handler onEvent , void * context )//块扫描函数</code></p>\n<ul>\n<li>参数\n<ul>\n<li>db：编译后的模式数据库</li>\n<li>data：指向要扫描的数据的指针</li>\n<li>length：要扫描的字节数</li>\n<li>flags：修改此函数行为的标志。该参数供将来使用，目前未使用</li>\n<li>scratch：由 hs_alloc_scratch () 为此数据库分配的草稿空间</li>\n<li>onEvent: 指向匹配事件回调函数的指针。如果给出 NULL 指针，则不会返回匹配项</li>\n<li>context: 将传递给回调函数的用户定义的指针</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_scan_vector( const hs_database_t * db , const char * const * data , const unsigned int * length , unsigned int count , unsigned int flags , hs_scratch_t * scratch , match_event_handler onEvent , void * context )//矢量模式匹配函数</code></p>\n<ul>\n<li>参数\n<ul>\n<li>db：编译后的模式数据库</li>\n<li>data：指向要扫描的数据块的指针数组</li>\n<li>length：要扫描的每个数据块的长度数组（以字节为单位）</li>\n<li>count：要扫描的数据块数。这应该对应于 data 和 length 数组的大小</li>\n<li>flags：修改此函数行为的标志。该参数供将来使用，目前未使用</li>\n<li>scratch：由 hs_alloc_scratch () 为此数据库分配的每线程暂存空间</li>\n<li>onEvent: 指向匹配事件回调函数的指针。如果给出 NULL 指针，则不会返回匹配项</li>\n<li>context: 将传递给回调函数的用户定义的指针</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_alloc_scratch( const hs_database_t * db , hs_scratch_t ** scratch )//分配草稿空间</code></p>\n<ul>\n<li>\n<p>参数</p>\n<ul>\n<li>db：由 hs_compile () 生成的数据库</li>\n<li>scratch: 在第一次分配时，应该提供一个指向 NULL 的指针，以便可以分配一个新的临时文件。如果之前已经分配了一个临时块，那么应该返回一个指向它的指针，以查看它对该数据库块是否有效。如果需要一个新的临时块，则将释放原始块并返回新的临时块，否则将返回之前的临时块。</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_clone_scratch( const hs_scratch_t * src , hs_scratch_t ** dest )/克隆当前草稿空间</code></p>\n<ul>\n<li>当多个并发线程将使用同一组编译数据库并且需要另一个暂存空间时，这很有用。</li>\n<li>参数\n<ul>\n<li>src: 要克隆的现有 hs_scratch_t</li>\n<li>dest: 这里会返回一个指向新暂存空间的指针</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_scratch_size( const hs_scratch_t * scratch , size_t * scratch_size )//计算草稿空间大小</code></p>\n<ul>\n<li>参数\n<ul>\n<li>scratch：由 hs_alloc_scratch () 或 hs_clone_scratch () 分配的每线程暂存空间</li>\n<li>scratch_size: 成功时，以字节为单位的暂存空间的大小放置在此参数中</li>\n</ul>\n</li>\n</ul>\n<p><code>hs_error_t hs_free_scratch( hs_scratch_t * scratch )//释放草稿空间</code></p>\n<ul>\n<li>释放草稿空间</li>\n<li>参数\n<ul>\n<li>scratch：要释放的暂存块。NULL 也可以安全地提供。</li>\n</ul>\n</li>\n</ul>\n<p>附：流模式、块模式、矢量模式区别<br />\n 1、块模式是最简单的匹配模式，使用一维数组装入所有数据进行匹配。<br />\n2、流模式是将数据库流化，数据不是直接全部装入，而是使用一维数组不完整地分批传入，流化的数据库对这些数据依次拼接匹配，适用于网络场景。<br />\n3、矢量模式可以理解为一次使用多个块模式，即使用二维数组一次匹配若干个块。</p>\n",
            "tags": [
                "计算机科学",
                "高性能正则"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/hyperscan/hyperscan-intro/",
            "url": "https://echidna-sxh.github.io/hyperscan/hyperscan-intro/",
            "title": "section1--hyperscan简介和编译",
            "date_published": "2021-08-15T08:29:28.000Z",
            "content_html": "<h1 id=\"hyperscan简介\"><a class=\"anchor\" href=\"#hyperscan简介\">#</a> hyperscan 简介</h1>\n<ul>\n<li>hyperscan 是英特尔推出的一款正则表达式引擎，以自动机理论为基础，编译内核实现是 c++, 运行期开发使用 c 语言，支持跨平台开发.</li>\n</ul>\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h2>\n<ul>\n<li>高性能\n<ul>\n<li>相对比经典正则表达式匹配库 pcre, 其性能最高有着数百倍的提升.</li>\n</ul>\n</li>\n<li>支持多模\n<ul>\n<li>相对比 pcre 需要单独对每一条正则规则进行编译，hyperscan 支持一条编译接口实现多模式匹配</li>\n</ul>\n</li>\n<li>支持流式匹配\n<ul>\n<li>实际网络应用场景中多是流数据，而 hyperscan 对于这种匹配模式的支持无疑是顺应需求.</li>\n</ul>\n</li>\n<li>大规模匹配\n<ul>\n<li>可以同时支持上万条规则的匹配</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<ul>\n<li>\n<p>hyperscan 的工作流程包括两个，编译期和运行期.</p>\n<ul>\n<li>\n<p>编译期</p>\n<p>编译期主要是将正则表达式作为输入，生成对应的模式数据库，保存在内存中，供运行期调用，也可以使用额外的接口存储在硬盘，供后续使用，该数据库只读，所以支持多核或多线程使用该数据库.</p>\n<p><img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/hyperscan/UX%7BXXMWP7P%404DLDG6R~CRTB.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>运行期</p>\n<p>运行期需要用户分配内存进行匹配信息临时存储，同时其内核使用 NFA/DFA 等自动机进行输入数据和数据库的模式匹配，用户在此时使用自定义的回调函数来对匹配结果进行处理.</p>\n<p><img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/hyperscan/UX%7BXXMWP7P%404DLDG6R~CRTB.png\" alt=\"\" /></p>\n</li>\n</ul>\n<p>其中的详细参数会在后续 API 篇详细介绍.</p>\n</li>\n</ul>\n<h2 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h2>\n<ul>\n<li>\n<p>目标版本:hyperscan-5.1.0</p>\n</li>\n<li>\n<p>编译准备</p>\n<ul>\n<li>\n<p>ragel-6.10</p>\n<p>源码下载地址:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jb2xtLm5ldC9vcGVuLXNvdXJjZS9yYWdlbC8=\">http://www.colm.net/open-source/ragel/</span></p>\n</li>\n<li>\n<p>boost_1_69_0</p>\n<p>源码下载地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYm9vc3Qub3JnL3VzZXJzL2hpc3RvcnkvdmVyc2lvbl8xXzY5XzAuaHRtbA==\">https://www.boost.org/users/history/version_1_69_0.html</span></p>\n</li>\n<li>\n<p>hyperscan-5.1.0</p>\n<p>源码下载地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ludGVsL2h5cGVyc2Nhbi9yZWxlYXNlcy90YWcvdjUuMS4w\">https://github.com/intel/hyperscan/releases/tag/v5.1.0</span></p>\n</li>\n</ul>\n</li>\n<li>\n<p>将所下载的源码包放在同一目录下，以下操作起始目录均为此。然后开始编译安装.</p>\n</li>\n<li>\n<p>安装 regel</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">tar</span> -xvf ragel-6.10.tar.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> ragel-6.10</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ ./configure</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">make</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ ldconfig</pre></td></tr></table></figure></li>\n<li>\n<p>安装 boost</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">tar</span> -xvf boost_1_69_0.tar.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> boost_1_69_0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ ./bootstrap.sh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token function\">sudo</span> ./b2 --with-iostreams --with-random <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ ldconfig</pre></td></tr></table></figure><p>注意此步骤需要的内存较大，请务必保证机器内存充足 (实测内存 2g 报错，4g 通过)</p>\n</li>\n<li>\n<p>安装 hyperscan</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">tar</span> -xvf hyperscan-5.1.0.tar.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> hyperscan-5.1.0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">mkdir</span> cmake-build</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> cmake-build</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>$ cmake -DBUILD_SHARED_LIBS<span class=\"token operator\">=</span>on -DCMAKE_BUILD_TYPE<span class=\"token operator\">=</span>Release <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$ <span class=\"token function\">make</span> -j8</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>$ <span class=\"token function\">sudo</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>$ ldconfig</pre></td></tr></table></figure><p>编辑过程较长，可能会报 warning, 无伤大雅，过程依赖 g++, 请确保 g++ 的安装.</p>\n</li>\n<li>\n<p>安装完成后，在 /usr/local/include 目录下生成 hs 的相关头文件，即为编译完成.</p>\n</li>\n</ul>\n<h2 id=\"环境变量配置\"><a class=\"anchor\" href=\"#环境变量配置\">#</a> 环境变量配置</h2>\n<ul>\n<li>\n<p>hyperscan 不会自动添加环境配置，因此需要手动修改.</p>\n</li>\n<li>\n<p>建议修改<sub> /.bashrc 文件，如希望对所有用户生效，可以修改 /etc/bashrc 文件，如修改</sub> /.bash_profile, 可能每次都需要 source 一下.</p>\n<ul>\n<li>在～/.bashrc 中添加如下配置:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/usr/local/bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token environment constant\">PATH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">C_INCLUDE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\">$C_INCLUDE_PATH</span>:/usr/local/include/hs</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> C_INCLUDE_PATH</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">CPLUS_INCLUDE_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\">$CPLUS_INCLUDE_PATH</span>:/usr/local/include/hs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">export</span> CPLUS_INCLUDE_PATH</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\">$LD_LIBRARY_PATH</span>:/usr/local/lib64:/usr/local/lib</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">export</span> LD_LIBRARY_PATH</pre></td></tr></table></figure><p>然后 source ~/.bashrc 即可.</p>\n</li>\n<li>\n<p>用 echo 将这几个环境变量打印出来，检查是否成功即可.</p>\n</li>\n</ul>\n<p>至此，hyperscan 安装完成.</p>\n",
            "tags": [
                "计算机科学",
                "高性能正则"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/pf_ring/pf_ring/",
            "url": "https://echidna-sxh.github.io/pf_ring/pf_ring/",
            "title": "Pfring高性能原理",
            "date_published": "2021-08-11T10:29:28.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>pf_ring 是一种新型网络套接字，用于高速收发包。</p>\n<p>网络套接字 (network socket) 是程序通过网络进行通信的端点，而在类 UNIX 系统中，端点即是文件，套接字是一种使用标准 UNIX 文件描述符与其他计算机上的程序通信的方法，对于程序员来说，套接字的外观和行为非常类似于低级文件描述符。这是因为 read（）和 write（）等命令处理套接字的方式与处理文件和管道的方式相同。</p>\n<p>pf_ring 具有以下特点：</p>\n<pre><code>1.加载方便，不使用零拷贝模式只需编译加载自带的内核模块即可。\n\n2.支持硬件数据包过滤器\n\n3.提供零拷贝模式，直接将网卡缓冲区数据映射到用户内存(收费)\n\n4.libpcap支持，向下兼容\n</code></pre>\n<p>对于流量监控项目而言，传统上可以使用 libpcap 进行报文捕获，也就是在 linux 网络协议栈流程中加入了一次拷贝，即旁路处理，对发送和接收的数据包通过 Linux 内核做过滤和缓冲处理，最后直接传递给上层应用程序。libpcap 绕开了传统 linux 协议栈处理，直接使用链路层 PF_PACKET 协议族原始套接字方式向用户空间传递报文。</p>\n<p>事实上，这种步骤存在大量性能上的提升点。首先来看以下传统的 linux 协议栈处理流程。<br />\n<img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/pf_ring/Linux_normal.jpg\" alt=\"\" /></p>\n<ol>\n<li>首先，数据到达网卡寄存器</li>\n<li>接着，网卡进行 DMA 操作，将数据从网卡寄存器拷贝至系统态的 DMA 缓冲区，第一次拷贝</li>\n<li>数据拷贝完成后网卡发送中断信号</li>\n<li>系统内核使用网卡驱动将该缓存区域的内容拷贝至内核专用的区域 (也有的系统对此进行了优化，该次拷贝可能不存在)，第二次拷贝</li>\n<li>内核对报文进行协议栈处理</li>\n<li>socket 系统调用将数据从内核态空间搬运至用户态空间，第三次拷贝</li>\n</ol>\n<p>可以看到，这些步骤进行了多次拷贝动作，还发生了一次系统调用，内存拷贝占了约 65% 的时间，系统调用占了约 10% 的时间。</p>\n<p>另外第三步和第四步是指适配 NAPI 的网卡，会采用一次中断后轮询获取多个数据包，否则是采取不断发送中断信号的方式获取数据包。</p>\n<h1 id=\"libpcap\"><a class=\"anchor\" href=\"#libpcap\">#</a> libpcap</h1>\n<p>上面说到，libpcap 就是利用网络分接口实现旁路机制，也就是在数据链路层处复制一份本该传递给网络层的包，直接拷贝到系统内核缓存，再用 PF_PACKET 从系统内核缓存拷贝到用户态空间，其比正常报文处理少了协议栈流程，多了一次拷贝，系统调用次数一样。注意这里报文实际上是同时进入协议栈和系统内核缓冲，不会影响正常报文处理，如下。<br />\n<img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/pf_ring/libpcap.png\" alt=\"\" /></p>\n<p>ps：对于最后一步的系统调用，最新版本的 libpcap 使用了 mmap，减少了最后一次从系统态到用户态的拷贝。</p>\n<h1 id=\"pf_ring\"><a class=\"anchor\" href=\"#pf_ring\">#</a> pf_ring</h1>\n<p>pf_ring 的思路是减少数据包在传输过程中的的拷贝次数，如下图所示。<br />\n<img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/pf_ring/pfring.webp\" alt=\"\" /><br />\npfring 提供三类抓包方式</p>\n<ul>\n<li>第一种是不使用 pfring 抓包的做法，首先将数据拷贝到系统态收包缓冲区，之后复制一份到内核缓冲区，之后复制到用户态空间。</li>\n<li>第二种是 pf_ring 的非 ZC 模式做法，将系统态的收包缓冲区复制到内核缓冲区，然后通过 mmap 映射给用户态空间，减少了一次用户态和系统态之间的拷贝。</li>\n<li>第三种是 pf_ring 的 ZC 模式做法，实现了 DNA，即直接网卡访问技术，将收包缓冲区直接映射给了用户态，除了 DMA 操作之外，没有拷贝。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "pf_ring"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/kafka/kafka_env/",
            "url": "https://echidna-sxh.github.io/computer-science/kafka/kafka_env/",
            "title": "kafka构建",
            "date_published": "2021-08-11T10:29:28.000Z",
            "content_html": "<h1 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h1>\n<ul>\n<li>使用 librdkafka 库接口进行程序开发</li>\n<li>使用 docker-compose 配置 kafka 集群</li>\n<li>使用 kafka tools (即 offset explorer) 管理</li>\n</ul>\n<h1 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h1>\n<p>centos7</p>\n<h1 id=\"命令\"><a class=\"anchor\" href=\"#命令\">#</a> 命令</h1>\n<p>安装 libkafka 库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> librdkafka-devel</pre></td></tr></table></figure><p>进入代码所在目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr></table></figure><p>生成 main 可执行文件</p>\n<p>使用 docker-compose 构建 kafka 集群</p>\n<p>docker-compose 安装方法较多，也可以到本人阿里云的对象存储处直接下载一个可执行文件到 /bin 目录，链接如下：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2hpZG5hLXN4aC5vc3MtY24tYmVpamluZy5hbGl5dW5jcy5jb20vZG9ja2VyLWNvbXBvc2UtTGludXgteDg2XzY0\">下载 docker-compose</span></p>\n<p>拉取镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull zookeeper</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker pull wurstmeister/kafka</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker pull sheepkiller/kafka-manager</pre></td></tr></table></figure><p>创建构造目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> docker-compose</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> docker-compose</pre></td></tr></table></figure><p>将以下两个文件放入该目录</p>\n<p>文件名：kafka-stack.yml</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>version: <span class=\"token string\">'3.1'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>services:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  broker1:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    image: wurstmeister/kafka</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    hostname: broker1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      - <span class=\"token string\">\"9091:9091\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      KAFKA_BROKER_ID: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      KAFKA_LISTENERS: PLAINTEXT://broker1:9091</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:9091</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      KAFKA_ADVERTISED_HOST_NAME: broker1</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      KAFKA_ADVERTISED_PORT: <span class=\"token number\">9091</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181/kafka1,zoo2:2182/kafka1,zoo3:2183/kafka1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      JMX_PORT: <span class=\"token number\">9988</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    external_links:</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    - zoo1</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    - zoo2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    - zoo3</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  broker2:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    image: wurstmeister/kafka</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    hostname: broker2</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      - <span class=\"token string\">\"9092:9092\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      KAFKA_BROKER_ID: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      KAFKA_LISTENERS: PLAINTEXT://broker2:9092</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:9092</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      KAFKA_ADVERTISED_HOST_NAME: broker2</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      KAFKA_ADVERTISED_PORT: <span class=\"token number\">9092</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181/kafka1,zoo2:2182/kafka1,zoo3:2183/kafka1</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      JMX_PORT: <span class=\"token number\">9988</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    external_links:</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    - zoo1</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    - zoo2</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    - zoo3</pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  broker3:</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    image: wurstmeister/kafka</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    hostname: broker3</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      - <span class=\"token string\">\"9093:9093\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      KAFKA_BROKER_ID: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      KAFKA_LISTENERS: PLAINTEXT://broker3:9093</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:9093</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      KAFKA_ADVERTISED_HOST_NAME: broker3</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      KAFKA_ADVERTISED_PORT: <span class=\"token number\">9093</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      KAFKA_ZOOKEEPER_CONNECT: zoo1:2181/kafka1,zoo2:2182/kafka1,zoo3:2183/kafka1</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      JMX_PORT: <span class=\"token number\">9988</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    external_links:</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    - zoo1</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    - zoo2</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    - zoo3</pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  kafka-manager:</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    image: sheepkiller/kafka-manager:latest</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    hostname: kafka-manager</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      - <span class=\"token string\">\"9000:9000\"</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    links:</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      - broker1</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      - broker2</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      - broker3</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    external_links:</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      - zoo1</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      - zoo2</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      - zoo3</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      ZK_HOSTS: zoo1:2181/kafka1,zoo2:2182/kafka1,zoo3:2183/kafka1</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      KAFKA_BROKERS: broker1:9091,broker2:9092,broker3:9093</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      APPLICATION_SECRET: letmein</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      KM_ARGS: -Djava.net.preferIPv4Stack<span class=\"token operator\">=</span>true</pre></td></tr></table></figure><p>文件名：zk-stack.yml</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>version: <span class=\"token string\">'3.1'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>services:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  zoo1:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    image: zookeeper</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    hostname: zoo1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      - <span class=\"token number\">2181</span>:2181</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      ZOO_SERVERS: server.1<span class=\"token operator\">=</span>zoo1:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2181</span> server.2<span class=\"token operator\">=</span>zoo2:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2182</span> server.3<span class=\"token operator\">=</span>zoo3:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2183</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  zoo2:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    image: zookeeper</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    hostname: zoo2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      - <span class=\"token number\">2182</span>:2182</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      ZOO_SERVERS: server.1<span class=\"token operator\">=</span>zoo1:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2181</span> server.2<span class=\"token operator\">=</span>zoo2:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2182</span> server.3<span class=\"token operator\">=</span>zoo3:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2183</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  zoo3:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    image: zookeeper</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    hostname: zoo3</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      - <span class=\"token number\">2183</span>:2183</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      ZOO_SERVERS: server.1<span class=\"token operator\">=</span>zoo1:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2181</span> server.2<span class=\"token operator\">=</span>zoo2:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2182</span> server.3<span class=\"token operator\">=</span>zoo3:2888:3888<span class=\"token punctuation\">;</span><span class=\"token number\">2183</span></pre></td></tr></table></figure><p>在该目录下运行以下命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start docker</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>docker-compose -f zk-stack.yml up -d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>docker-compose -f kafka-stack.yml up -d</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>docker <span class=\"token function\">ps</span> -a</pre></td></tr></table></figure><p>看到六个容器全部 up 了即成功。</p>\n<p>此时 kafka 集群已经构建完成。</p>\n<p>在 hosts 文件中加入映射：</p>\n<pre><code>0.0.0.0     zoo1 zoo2 zoo3 broker1 broker2 broker3 #此处ip地址代指本机的所有ipv4地址。\n</code></pre>\n<p>我们使用编译完成的 demo 测试以下，打开两个终端，cd 到 main 可执行文件的目录下，分别执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./main p</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./main c</pre></td></tr></table></figure><p>可以看到生产者和消费者的进程。</p>\n<p>生产者：</p>\n<p><img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/producer.png\" alt=\"\" /></p>\n<p>消费者：</p>\n<p><img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/consumer.png\" alt=\"\" /></p>\n<p>在带有 GUI 的系统中下载<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2Fma2F0b29sLmNvbS9kb3dubG9hZC5odG1s\"> kafka tools</span></p>\n<p>安装之前修改一下本机 hosts，</p>\n<pre><code>192.168.88.132 zoo1 zoo2 zoo3 broker1 broker2 broker3    # 此处ip地址为安装kafka集群的机器的ip，若使用多个机器请分别映射。\n</code></pre>\n<p>安装完成后，FILE-&gt;ADD CONNECTION, 配置如下：<br />\n<img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/kafkatools.png\" alt=\"\" /></p>\n<p>即可连接并管理。</p>\n<ul>\n<li>\n<p>注意当使用非本机访问本机 kafka 时，需要配置并使用对外 ip 和端口，如下：</p>\n<p><img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/server.properties.png\" alt=\"\" /><br />\n该配置文件为 kafka 安装目录下的 config/server.properties</p>\n</li>\n<li>\n<p>生产消息时，partition 建议使用 - 1 值来自动决定 partition。</p>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "kafka"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/kafka/kafka_config/",
            "url": "https://echidna-sxh.github.io/computer-science/kafka/kafka_config/",
            "title": "kafka附录",
            "date_published": "2021-08-11T10:29:28.000Z",
            "content_html": "<h1 id=\"摘自官网配置项相关\"><a class=\"anchor\" href=\"#摘自官网配置项相关\">#</a> 摘自官网，配置项相关</h1>\n<h2 id=\"global-configuration-properties\"><a class=\"anchor\" href=\"#global-configuration-properties\">#</a> Global configuration properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>C/P</th>\n<th>Range</th>\n<th style=\"text-align:right\">Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>builtin.features</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\">gzip, snappy, ssl, sasl, regex, lz4</td>\n<td>Indicates the builtin features for this build of librdkafka. An application can either query this value or attempt to set it with its list of required features to check for library support. &lt;br&gt;<em>Type: CSV flags</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2NsaWVudC5pZA==\">client.id</span></td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\">rdkafka</td>\n<td>Client identifier. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>metadata.broker.list</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Initial list of brokers. The application may also use  <code>rd_kafka_brokers_add()</code>  to add brokers during runtime. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>bootstrap.servers</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Alias for  <code>metadata.broker.list</code></td>\n</tr>\n<tr>\n<td>message.max.bytes</td>\n<td>*</td>\n<td>1000 .. 1000000000</td>\n<td style=\"text-align:right\">1000000</td>\n<td>Maximum transmit message size. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>message.copy.max.bytes</td>\n<td>*</td>\n<td>0 .. 1000000000</td>\n<td style=\"text-align:right\">65535</td>\n<td>Maximum size for message to be copied to buffer. Messages larger than this will be passed by reference (zero-copy) at the expense of larger iovecs. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>receive.message.max.bytes</td>\n<td>*</td>\n<td>1000 .. 1000000000</td>\n<td style=\"text-align:right\">100000000</td>\n<td>Maximum receive message size. This is a safety precaution to avoid memory exhaustion in case of protocol hickups. The value should be at least fetch.message.max.bytes * number of partitions consumed from + messaging overhead (e.g. 200000 bytes). &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>max.in.flight.requests.per.connection</td>\n<td>*</td>\n<td>1 .. 1000000</td>\n<td style=\"text-align:right\">1000000</td>\n<td>Maximum number of in-flight requests the client will send. This setting applies per broker connection. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL21ldGFkYXRhLnJlcXVlc3QudGltZW91dC5tcw==\">metadata.request.timeout.ms</span></td>\n<td>*</td>\n<td>10 .. 900000</td>\n<td style=\"text-align:right\">60000</td>\n<td>Non-topic request timeout in milliseconds. This is for metadata requests, etc. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3RvcGljLm1ldGFkYXRhLnJlZnJlc2guaW50ZXJ2YWwubXM=\">topic.metadata.refresh.interval.ms</span></td>\n<td>*</td>\n<td>-1 .. 3600000</td>\n<td style=\"text-align:right\">300000</td>\n<td>Topic metadata refresh interval in milliseconds. The metadata is automatically refreshed on error and connect. Use -1 to disable the intervalled refresh. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL21ldGFkYXRhLm1heC5hZ2UubXM=\">metadata.max.age.ms</span></td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Alias for  <code>topic.metadata.refresh.interval.ms</code></td>\n</tr>\n<tr>\n<td>topic.metadata.refresh.fast.cnt</td>\n<td>*</td>\n<td>0 .. 1000</td>\n<td style=\"text-align:right\">10</td>\n<td>When a topic looses its leader this number of metadata requests are sent with  <code>topic.metadata.refresh.fast.interval.ms</code>  interval disregarding the  <code>topic.metadata.refresh.interval.ms</code>  value. This is used to recover quickly from transitioning leader brokers. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3RvcGljLm1ldGFkYXRhLnJlZnJlc2guZmFzdC5pbnRlcnZhbC5tcw==\">topic.metadata.refresh.fast.interval.ms</span></td>\n<td>*</td>\n<td>1 .. 60000</td>\n<td style=\"text-align:right\">250</td>\n<td>See  <code>topic.metadata.refresh.fast.cnt</code>  description &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>topic.metadata.refresh.sparse</td>\n<td>*</td>\n<td>true, false</td>\n<td style=\"text-align:right\">true</td>\n<td>Sparse metadata requests (consumes less network bandwidth) &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>topic.blacklist</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Topic blacklist, a comma-separated list of regular expressions for matching topic names that should be ignored in broker metadata information as if the topics did not exist. &lt;br&gt;<em>Type: pattern list</em></td>\n</tr>\n<tr>\n<td>debug</td>\n<td>*</td>\n<td>generic, broker, topic, metadata, queue, msg, protocol, cgrp, security, fetch, feature, all</td>\n<td style=\"text-align:right\"></td>\n<td>A comma-separated list of debug contexts to enable. Debugging the Producer: broker,topic,msg. Consumer: cgrp,topic,fetch &lt;br&gt;<em>Type: CSV flags</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3NvY2tldC50aW1lb3V0Lm1z\">socket.timeout.ms</span></td>\n<td>*</td>\n<td>10 .. 300000</td>\n<td style=\"text-align:right\">60000</td>\n<td>Timeout for network requests. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3NvY2tldC5ibG9ja2luZy5tYXgubXM=\">socket.blocking.max.ms</span></td>\n<td>*</td>\n<td>1 .. 60000</td>\n<td style=\"text-align:right\">100</td>\n<td>Maximum time a broker socket operation may block. A lower value improves responsiveness at the expense of slightly higher CPU usage. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>socket.send.buffer.bytes</td>\n<td>*</td>\n<td>0 .. 100000000</td>\n<td style=\"text-align:right\">0</td>\n<td>Broker socket send buffer size. System default is used if 0. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>socket.receive.buffer.bytes</td>\n<td>*</td>\n<td>0 .. 100000000</td>\n<td style=\"text-align:right\">0</td>\n<td>Broker socket receive buffer size. System default is used if 0. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>socket.keepalive.enable</td>\n<td>*</td>\n<td>true, false</td>\n<td style=\"text-align:right\">false</td>\n<td>Enable TCP keep-alives (SO_KEEPALIVE) on broker sockets &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>socket.max.fails</td>\n<td>*</td>\n<td>0 .. 1000000</td>\n<td style=\"text-align:right\">3</td>\n<td>Disconnect from broker when this number of send failures (e.g., timed out requests) is reached. Disable with 0. NOTE: The connection is automatically re-established. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>broker.address.ttl</td>\n<td>*</td>\n<td>0 .. 86400000</td>\n<td style=\"text-align:right\">1000</td>\n<td>How long to cache the broker address resolving results (milliseconds). &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>broker.address.family</td>\n<td>*</td>\n<td>any, v4, v6</td>\n<td style=\"text-align:right\">any</td>\n<td>Allowed broker IP address families: any, v4, v6 &lt;br&gt;<em>Type: enum value</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3JlY29ubmVjdC5iYWNrb2ZmLmppdHRlci5tcw==\">reconnect.backoff.jitter.ms</span></td>\n<td>*</td>\n<td>0 .. 3600000</td>\n<td style=\"text-align:right\">500</td>\n<td>Throttle broker reconnection attempts by this value +-50%. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3N0YXRpc3RpY3MuaW50ZXJ2YWwubXM=\">statistics.interval.ms</span></td>\n<td>*</td>\n<td>0 .. 86400000</td>\n<td style=\"text-align:right\">0</td>\n<td>librdkafka statistics emit interval. The application also needs to register a stats callback using  <code>rd_kafka_conf_set_stats_cb()</code> . The granularity is 1000ms. A value of 0 disables statistics. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>enabled_events</td>\n<td>*</td>\n<td>0 .. 2147483647</td>\n<td style=\"text-align:right\">0</td>\n<td>See  <code>rd_kafka_conf_set_events()</code>  &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>error_cb</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Error callback (set with rd_kafka_conf_set_error_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>throttle_cb</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Throttle callback (set with rd_kafka_conf_set_throttle_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>stats_cb</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Statistics callback (set with rd_kafka_conf_set_stats_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>log_cb</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Log callback (set with rd_kafka_conf_set_log_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>log_level</td>\n<td>*</td>\n<td>0 .. 7</td>\n<td style=\"text-align:right\">6</td>\n<td>Logging level (syslog(3) levels) &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2xvZy50aHJlYWQubmFtZQ==\">log.thread.name</span></td>\n<td>*</td>\n<td>true, false</td>\n<td style=\"text-align:right\">false</td>\n<td>Print internal thread name in log messages (useful for debugging librdkafka internals) &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>log.connection.close</td>\n<td>*</td>\n<td>true, false</td>\n<td style=\"text-align:right\">true</td>\n<td>Log broker disconnects. It might be useful to turn this off when interacting with 0.9 brokers with an aggressive  <code>connection.max.idle.ms</code>  value. &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>socket_cb</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Socket creation callback to provide race-free CLOEXEC &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>open_cb</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>File open callback to provide race-free CLOEXEC &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>opaque</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Application opaque (set with rd_kafka_conf_set_opaque()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>default_topic_conf</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Default topic configuration for automatically subscribed topics &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>internal.termination.signal</td>\n<td>*</td>\n<td>0 .. 128</td>\n<td style=\"text-align:right\">0</td>\n<td>Signal that librdkafka will use to quickly terminate on rd_kafka_destroy(). If this signal is not set then there will be a delay before rd_kafka_wait_destroyed() returns true as internal threads are timing out their system calls. If this signal is set however the delay will be minimal. The application should mask this signal as an internal signal handler is installed. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>api.version.request</td>\n<td>*</td>\n<td>true, false</td>\n<td style=\"text-align:right\">false</td>\n<td>Request broker's supported API versions to adjust functionality to available protocol features. If set to false the fallback version  <code>broker.version.fallback</code>  will be used. <strong>NOTE</strong>: Depends on broker version &gt;=0.10.0. If the request is not supported by (an older) broker the  <code>broker.version.fallback</code>  fallback is used. &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2FwaS52ZXJzaW9uLmZhbGxiYWNrLm1z\">api.version.fallback.ms</span></td>\n<td>*</td>\n<td>0 .. 604800000</td>\n<td style=\"text-align:right\">1200000</td>\n<td>Dictates how long the  <code>broker.version.fallback</code>  fallback is used in the case the ApiVersionRequest fails. <strong>NOTE</strong>: The ApiVersionRequest is only issued when a new connection to the broker is made (such as after an upgrade). &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>broker.version.fallback</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\">0.9.0</td>\n<td>Older broker versions (&lt;0.10.0) provides no way for a client to query for supported protocol features (ApiVersionRequest, see  <code>api.version.request</code> ) making it impossible for the client to know what features it may use. As a workaround a user may set this property to the expected broker version and the client will automatically adjust its feature set accordingly if the ApiVersionRequest fails (or is disabled). The fallback broker version will be used for  <code>api.version.fallback.ms</code> . Valid values are: 0.9.0, 0.8.2, 0.8.1, 0.8.0. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>security.protocol</td>\n<td>*</td>\n<td>plaintext, ssl, sasl_plaintext, sasl_ssl</td>\n<td style=\"text-align:right\">plaintext</td>\n<td>Protocol used to communicate with brokers. &lt;br&gt;<em>Type: enum value</em></td>\n</tr>\n<tr>\n<td>ssl.cipher.suites</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>A cipher suite is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. See manual page for  <code>ciphers(1)</code>  and `SSL_CTX_set_cipher_list(3). &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>ssl.key.location</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Path to client's private key (PEM) used for authentication. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>ssl.key.password</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Private key passphrase &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>ssl.certificate.location</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Path to client's public key (PEM) used for authentication. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>ssl.ca.location</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>File or directory path to CA certificate(s) for verifying the broker's key. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>ssl.crl.location</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Path to CRL for verifying broker's certificate validity. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>sasl.mechanisms</td>\n<td>*</td>\n<td>GSSAPI, PLAIN</td>\n<td style=\"text-align:right\">GSSAPI</td>\n<td>SASL mechanism to use for authentication. Supported: GSSAPI, PLAIN. <strong>NOTE</strong>: Despite the name only one mechanism must be configured. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3Nhc2wua2VyYmVyb3Muc2VydmljZS5uYW1l\">sasl.kerberos.service.name</span></td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\">kafka</td>\n<td>Kerberos principal name that Kafka runs as. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>sasl.kerberos.principal</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\">kafkaclient</td>\n<td>This client's Kerberos principal name. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>sasl.kerberos.kinit.cmd</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\" sasl.kerberos.principal=\"\">kinit -S &quot;%{<span class=\"exturl\" data-url=\"aHR0cDovL3Nhc2wua2VyYmVyb3Muc2VydmljZS5uYW1l\">sasl.kerberos.service.name</span>}/%{<span class=\"exturl\" data-url=\"aHR0cDovL2Jyb2tlci5uYW1l\">broker.name</span>}&quot; -k -t &quot;%{sasl.kerberos.keytab}&quot; %</td>\n<td>Full kerberos kinit command string, %{<span class=\"exturl\" data-url=\"aHR0cDovL2NvbmZpZy5wcm9wLm5hbWU=\">config.prop.name</span>} is replaced by corresponding config object value, %{<span class=\"exturl\" data-url=\"aHR0cDovL2Jyb2tlci5uYW1l\">broker.name</span>} returns the broker's hostname. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>sasl.kerberos.keytab</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Path to Kerberos keytab file. Uses system default if not set.<strong>NOTE</strong>: This is not automatically used but must be added to the template in sasl.kerberos.kinit.cmd as  <code> ... -t %&#123;sasl.kerberos.keytab&#125;</code> . &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>sasl.kerberos.min.time.before.relogin</td>\n<td>*</td>\n<td>1 .. 86400000</td>\n<td style=\"text-align:right\">60000</td>\n<td>Minimum time in milliseconds between key refresh attempts. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>sasl.username</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>SASL username for use with the PLAIN mechanism &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>sasl.password</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>SASL password for use with the PLAIN mechanism &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2dyb3VwLmlk\">group.id</span></td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Client group id string. All clients sharing the same <span class=\"exturl\" data-url=\"aHR0cDovL2dyb3VwLmlk\">group.id</span> belong to the same group. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td>partition.assignment.strategy</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\">range,roundrobin</td>\n<td>Name of partition assignment strategy to use when elected group leader assigns partitions to group members. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3Nlc3Npb24udGltZW91dC5tcw==\">session.timeout.ms</span></td>\n<td>*</td>\n<td>1 .. 3600000</td>\n<td style=\"text-align:right\">30000</td>\n<td>Client group session and failure detection timeout. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2hlYXJ0YmVhdC5pbnRlcnZhbC5tcw==\">heartbeat.interval.ms</span></td>\n<td>*</td>\n<td>1 .. 3600000</td>\n<td style=\"text-align:right\">1000</td>\n<td>Group session keepalive heartbeat interval. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>group.protocol.type</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\">consumer</td>\n<td>Group protocol type &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2Nvb3JkaW5hdG9yLnF1ZXJ5LmludGVydmFsLm1z\">coordinator.query.interval.ms</span></td>\n<td>*</td>\n<td>1 .. 3600000</td>\n<td style=\"text-align:right\">600000</td>\n<td>How often to query for the current client group coordinator. If the currently assigned coordinator is down the configured query interval will be divided by ten to more quickly recover in case of coordinator reassignment. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>enable.auto.commit</td>\n<td>C</td>\n<td>true, false</td>\n<td style=\"text-align:right\">true</td>\n<td>Automatically and periodically commit offsets in the background. &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2F1dG8uY29tbWl0LmludGVydmFsLm1z\">auto.commit.interval.ms</span></td>\n<td>C</td>\n<td>0 .. 86400000</td>\n<td style=\"text-align:right\">5000</td>\n<td>The frequency in milliseconds that the consumer offsets are committed (written) to offset storage. (0 = disable) &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>enable.auto.offset.store</td>\n<td>C</td>\n<td>true, false</td>\n<td style=\"text-align:right\">true</td>\n<td>Automatically store offset of last message provided to application. &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>queued.min.messages</td>\n<td>C</td>\n<td>1 .. 10000000</td>\n<td style=\"text-align:right\">100000</td>\n<td>Minimum number of messages per topic+partition in the local consumer queue. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>queued.max.messages.kbytes</td>\n<td>C</td>\n<td>1 .. 1000000000</td>\n<td style=\"text-align:right\">1000000</td>\n<td>Maximum number of kilobytes per topic+partition in the local consumer queue. This value may be overshot by fetch.message.max.bytes. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2ZldGNoLndhaXQubWF4Lm1z\">fetch.wait.max.ms</span></td>\n<td>C</td>\n<td>0 .. 300000</td>\n<td style=\"text-align:right\">100</td>\n<td>Maximum time the broker may wait to fill the response with fetch.min.bytes. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>fetch.message.max.bytes</td>\n<td>C</td>\n<td>1 .. 1000000000</td>\n<td style=\"text-align:right\">1048576</td>\n<td>Initial maximum number of bytes per topic+partition to request when fetching messages from the broker. If the client encounters a message larger than this value it will gradually try to increase it until the entire message can be fetched. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>max.partition.fetch.bytes</td>\n<td>C</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Alias for  <code>fetch.message.max.bytes</code></td>\n</tr>\n<tr>\n<td>fetch.min.bytes</td>\n<td>C</td>\n<td>1 .. 100000000</td>\n<td style=\"text-align:right\">1</td>\n<td>Minimum number of bytes the broker responds with. If <span class=\"exturl\" data-url=\"aHR0cDovL2ZldGNoLndhaXQubWF4Lm1z\">fetch.wait.max.ms</span> expires the accumulated data will be sent to the client regardless of this setting. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2ZldGNoLmVycm9yLmJhY2tvZmYubXM=\">fetch.error.backoff.ms</span></td>\n<td>C</td>\n<td>0 .. 300000</td>\n<td style=\"text-align:right\">500</td>\n<td>How long to postpone the next fetch request for a topic+partition in case of a fetch error. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>offset.store.method</td>\n<td>C</td>\n<td>none, file, broker</td>\n<td style=\"text-align:right\">broker</td>\n<td>Offset commit store method: 'file' - local file store (offset.store.path, <span class=\"exturl\" data-url=\"aHR0cDovL2V0LmFs\">et.al</span>), 'broker' - broker commit store (requires Apache Kafka 0.8.2 or later on the broker). &lt;br&gt;<em>Type: enum value</em></td>\n</tr>\n<tr>\n<td>consume_cb</td>\n<td>C</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Message consume callback (set with rd_kafka_conf_set_consume_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>rebalance_cb</td>\n<td>C</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Called after consumer group has been rebalanced (set with rd_kafka_conf_set_rebalance_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>offset_commit_cb</td>\n<td>C</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Offset commit result propagation callback. (set with rd_kafka_conf_set_offset_commit_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>enable.partition.eof</td>\n<td>C</td>\n<td>true, false</td>\n<td style=\"text-align:right\">true</td>\n<td>Emit RD_KAFKA_RESP_ERR__PARTITION_EOF event whenever the consumer reaches the end of a partition. &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>queue.buffering.max.messages</td>\n<td>P</td>\n<td>1 .. 10000000</td>\n<td style=\"text-align:right\">100000</td>\n<td>Maximum number of messages allowed on the producer queue. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>queue.buffering.max.kbytes</td>\n<td>P</td>\n<td>1 .. 2147483647</td>\n<td style=\"text-align:right\">4000000</td>\n<td>Maximum total message size sum allowed on the producer queue. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3F1ZXVlLmJ1ZmZlcmluZy5tYXgubXM=\">queue.buffering.max.ms</span></td>\n<td>P</td>\n<td>1 .. 900000</td>\n<td style=\"text-align:right\">1000</td>\n<td>Maximum time, in milliseconds, for buffering data on the producer queue. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>message.send.max.retries</td>\n<td>P</td>\n<td>0 .. 10000000</td>\n<td style=\"text-align:right\">2</td>\n<td>How many times to retry sending a failing MessageSet. <strong>Note:</strong> retrying may cause reordering. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>retries</td>\n<td>P</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Alias for  <code>message.send.max.retries</code></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3JldHJ5LmJhY2tvZmYubXM=\">retry.backoff.ms</span></td>\n<td>P</td>\n<td>1 .. 300000</td>\n<td style=\"text-align:right\">100</td>\n<td>The backoff time in milliseconds before retrying a message send. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>compression.codec</td>\n<td>P</td>\n<td>none, gzip, snappy, lz4</td>\n<td style=\"text-align:right\">none</td>\n<td>compression codec to use for compressing message sets. This is the default value for all topics, may be overriden by the topic configuration property  <code>compression.codec</code> .  &lt;br&gt;<em>Type: enum value</em></td>\n</tr>\n<tr>\n<td>batch.num.messages</td>\n<td>P</td>\n<td>1 .. 1000000</td>\n<td style=\"text-align:right\">10000</td>\n<td>Maximum number of messages batched in one MessageSet. The total MessageSet size is also limited by message.max.bytes. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>delivery.report.only.error</td>\n<td>P</td>\n<td>true, false</td>\n<td style=\"text-align:right\">false</td>\n<td>Only provide delivery reports for failed messages. &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>dr_cb</td>\n<td>P</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Delivery report callback (set with rd_kafka_conf_set_dr_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>dr_msg_cb</td>\n<td>P</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Delivery report callback (set with rd_kafka_conf_set_dr_msg_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"topic-configuration-properties\"><a class=\"anchor\" href=\"#topic-configuration-properties\">#</a> Topic configuration properties</h2>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>C/P</th>\n<th>Range</th>\n<th style=\"text-align:right\">Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>request.required.acks</td>\n<td>P</td>\n<td>-1 .. 1000</td>\n<td style=\"text-align:right\">1</td>\n<td>This field indicates how many acknowledgements the leader broker must receive from ISR brokers before responding to the request: <em>0</em>=Broker does not send any response/ack to client, <em>1</em>=Only the leader broker will need to ack the message, <em>-1</em> or <em>all</em>=broker will block until message is committed by all in sync replicas (ISRs) or broker's  <code>in.sync.replicas</code>  setting before sending response.  &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>acks</td>\n<td>P</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Alias for  <code>request.required.acks</code></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3JlcXVlc3QudGltZW91dC5tcw==\">request.timeout.ms</span></td>\n<td>P</td>\n<td>1 .. 900000</td>\n<td style=\"text-align:right\">5000</td>\n<td>The ack timeout of the producer request in milliseconds. This value is only enforced by the broker and relies on  <code>request.required.acks</code>  being != 0. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL21lc3NhZ2UudGltZW91dC5tcw==\">message.timeout.ms</span></td>\n<td>P</td>\n<td>0 .. 900000</td>\n<td style=\"text-align:right\">300000</td>\n<td>Local message timeout. This value is only enforced locally and limits the time a produced message waits for successful delivery. A time of 0 is infinite. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>produce.offset.report</td>\n<td>P</td>\n<td>true, false</td>\n<td style=\"text-align:right\">false</td>\n<td>Report offset of produced message back to application. The application must be use the  <code>dr_msg_cb</code>  to retrieve the offset from  <code>rd_kafka_message_t.offset</code> . &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>partitioner_cb</td>\n<td>P</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Partitioner callback (set with rd_kafka_topic_conf_set_partitioner_cb()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>opaque</td>\n<td>*</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Application opaque (set with rd_kafka_topic_conf_set_opaque()) &lt;br&gt;<em>Type: pointer</em></td>\n</tr>\n<tr>\n<td>compression.codec</td>\n<td>P</td>\n<td>none, gzip, snappy, lz4, inherit</td>\n<td style=\"text-align:right\">inherit</td>\n<td>Compression codec to use for compressing message sets.  &lt;br&gt;<em>Type: enum value</em></td>\n</tr>\n<tr>\n<td>auto.commit.enable</td>\n<td>C</td>\n<td>true, false</td>\n<td style=\"text-align:right\">true</td>\n<td>If true, periodically commit offset of the last message handed to the application. This committed offset will be used when the process restarts to pick up where it left off. If false, the application will have to call  <code>rd_kafka_offset_store()</code>  to store an offset (optional). <strong>NOTE:</strong> This property should only be used with the simple legacy consumer, when using the high-level KafkaConsumer the global  <code>enable.auto.commit</code>  property must be used instead. <strong>NOTE:</strong> There is currently no zookeeper integration, offsets will be written to broker or local file according to offset.store.method. &lt;br&gt;<em>Type: boolean</em></td>\n</tr>\n<tr>\n<td>enable.auto.commit</td>\n<td>C</td>\n<td></td>\n<td style=\"text-align:right\"></td>\n<td>Alias for  <code>auto.commit.enable</code></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2F1dG8uY29tbWl0LmludGVydmFsLm1z\">auto.commit.interval.ms</span></td>\n<td>C</td>\n<td>10 .. 86400000</td>\n<td style=\"text-align:right\">60000</td>\n<td>The frequency in milliseconds that the consumer offsets are committed (written) to offset storage. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>auto.offset.reset</td>\n<td>C</td>\n<td>smallest, earliest, beginning, largest, latest, end, error</td>\n<td style=\"text-align:right\">largest</td>\n<td>Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error which is retrieved by consuming messages and checking 'message-&gt;err'. &lt;br&gt;<em>Type: enum value</em></td>\n</tr>\n<tr>\n<td>offset.store.path</td>\n<td>C</td>\n<td></td>\n<td style=\"text-align:right\">.</td>\n<td>Path to local file for storing offsets. If the path is a directory a filename will be automatically generated in that directory based on the topic and partition. &lt;br&gt;<em>Type: string</em></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL29mZnNldC5zdG9yZS5zeW5jLmludGVydmFsLm1z\">offset.store.sync.interval.ms</span></td>\n<td>C</td>\n<td>-1 .. 86400000</td>\n<td style=\"text-align:right\">-1</td>\n<td>fsync() interval for the offset file, in milliseconds. Use -1 to disable syncing, and 0 for immediate sync after each write. &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n<tr>\n<td>offset.store.method</td>\n<td>C</td>\n<td>file, broker</td>\n<td style=\"text-align:right\">broker</td>\n<td>Offset commit store method: 'file' - local file store (offset.store.path, <span class=\"exturl\" data-url=\"aHR0cDovL2V0LmFs\">et.al</span>), 'broker' - broker commit store (requires &quot;<span class=\"exturl\" data-url=\"aHR0cDovL2dyb3VwLmlk\">group.id</span>&quot; to be configured and Apache Kafka 0.8.2 or later on the broker.). &lt;br&gt;<em>Type: enum value</em></td>\n</tr>\n<tr>\n<td>consume.callback.max.messages</td>\n<td>C</td>\n<td>0 .. 1000000</td>\n<td style=\"text-align:right\">0</td>\n<td>Maximum number of messages to dispatch in one  <code>rd_kafka_consume_callback*()</code>  call (0 = unlimited) &lt;br&gt;<em>Type: integer</em></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cp-legend-c-consumer-p-producer-both\"><a class=\"anchor\" href=\"#cp-legend-c-consumer-p-producer-both\">#</a> C/P legend: C = Consumer, P = Producer, * = both</h3>\n",
            "tags": [
                "计算机科学",
                "kafka"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/kafka/kafkademo/",
            "url": "https://echidna-sxh.github.io/computer-science/kafka/kafkademo/",
            "title": "kafka示例",
            "date_published": "2021-08-11T06:29:28.000Z",
            "content_html": "<h1 id=\"一个简易的kafka客户端\"><a class=\"anchor\" href=\"#一个简易的kafka客户端\">#</a> 一个简易的 Kafka 客户端</h1>\n<h2 id=\"kafka_clienth\"><a class=\"anchor\" href=\"#kafka_clienth\">#</a> kafka_client.h</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//#include&lt;memory></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//#include&lt;getopt.h></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"librdkafka/rdkafkacpp.h\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>class kafka_consumer<span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 消费者类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    private<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">handle_message</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Message <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 消费者处理每次 consume 来的信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        std<span class=\"token operator\">::</span>string brokers_<span class=\"token punctuation\">;</span><span class=\"token comment\">// 代理，格式 host:port，多个代理用逗号隔开</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        std<span class=\"token operator\">::</span>string topics_<span class=\"token punctuation\">;</span><span class=\"token comment\">// 消费的目标话题</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        std<span class=\"token operator\">::</span>string groupid_<span class=\"token punctuation\">;</span><span class=\"token comment\">// 消费者所属的组 id</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> last_offset_<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 本次消费的最后偏移</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        RdKafka<span class=\"token operator\">::</span>Consumer <span class=\"token operator\">*</span>kafka_consumer_<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 原生消费者类对象指针，由后续 create 赋值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        RdKafka<span class=\"token operator\">::</span>Topic <span class=\"token operator\">*</span>topic_<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 原生话题类对象指针，有后续 create 赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> offset_<span class=\"token operator\">=</span>RdKafka<span class=\"token operator\">::</span>Topic<span class=\"token operator\">::</span>OFFSET_BEGINNING<span class=\"token punctuation\">;</span><span class=\"token comment\">// 默认的初始偏移，构造时可自定义</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> partition_<span class=\"token punctuation\">;</span><span class=\"token comment\">// 读取的 partition 编号</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">kafka_consumer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> brokers<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> topics<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>string groupid<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> partitition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        virtual <span class=\"token operator\">~</span><span class=\"token function\">kafka_consumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        bool <span class=\"token function\">initclient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化客户端</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        bool <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeout_ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 循环消费</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>class kfk_producer_delivery_report_callback<span class=\"token operator\">:</span>public RdKafka<span class=\"token operator\">::</span>DeliveryReportCb<span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 发包完的回调</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">dr_cb</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Message <span class=\"token operator\">&amp;</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 重载虚函数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            std<span class=\"token operator\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Message delivery for (\"</span><span class=\"token operator\">&lt;&lt;</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"bytes):\"</span><span class=\"token operator\">&lt;&lt;</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">errstr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                std<span class=\"token operator\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Key:\"</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>class kfk_producer_event_callback<span class=\"token operator\">:</span>public RdKafka<span class=\"token operator\">::</span>EventCb<span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 事件回调</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">event_cb</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Event <span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 重载虚函数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">case</span> RdKafka<span class=\"token operator\">::</span>Event<span class=\"token operator\">::</span>EVENT_ERROR<span class=\"token operator\">:</span><span class=\"token comment\">// 如果是错误事件</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ERROR (\"</span> <span class=\"token operator\">&lt;&lt;</span> RdKafka<span class=\"token operator\">::</span><span class=\"token function\">err2str</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"): \"</span> <span class=\"token operator\">&lt;&lt;</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RdKafka<span class=\"token operator\">::</span>ERR__ALL_BROKERS_DOWN<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">case</span> RdKafka<span class=\"token operator\">::</span>Event<span class=\"token operator\">::</span>EVENT_STATS<span class=\"token operator\">:</span><span class=\"token comment\">// 如果是统计文档返回</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"STATS\\\": \"</span> <span class=\"token operator\">&lt;&lt;</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">case</span> RdKafka<span class=\"token operator\">::</span>Event<span class=\"token operator\">::</span>EVENT_LOG<span class=\"token operator\">:</span><span class=\"token comment\">// 如果是日志返回</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOG-%i-%s: %s\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        event<span class=\"token punctuation\">.</span><span class=\"token function\">severity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">fac</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"EVENT \"</span> <span class=\"token operator\">&lt;&lt;</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token string\">\" (\"</span> <span class=\"token operator\">&lt;&lt;</span> RdKafka<span class=\"token operator\">::</span><span class=\"token function\">err2str</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                            <span class=\"token string\">\"): \"</span> <span class=\"token operator\">&lt;&lt;</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>class kafka_producer<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    private<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        RdKafka<span class=\"token operator\">::</span>Producer <span class=\"token operator\">*</span>kafka_producer_ <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 原生生产者对象指针</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        RdKafka<span class=\"token operator\">::</span>Topic <span class=\"token operator\">*</span>topic_<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 原生话题对象指针</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        kfk_producer_delivery_report_callback delivery_callback<span class=\"token punctuation\">;</span><span class=\"token comment\">// 递送包后的回调</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        kfk_producer_event_callback event_callback<span class=\"token punctuation\">;</span><span class=\"token comment\">// 事件回调</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        std<span class=\"token operator\">::</span>string topics_<span class=\"token punctuation\">;</span><span class=\"token comment\">// 生产的目标话题</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        std<span class=\"token operator\">::</span>string brokers_<span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置的代理</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        bool run<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span><span class=\"token comment\">// 开始运行</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span> partition_<span class=\"token punctuation\">;</span><span class=\"token comment\">// 写入的 partition 编号</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token function\">kafka_producer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> brokers<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> topics<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        virtual <span class=\"token operator\">~</span><span class=\"token function\">kafka_producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        bool <span class=\"token function\">init_producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化生产者客户端</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 发送消息</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 停止该客户端</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"kafka_clientcpp\"><a class=\"anchor\" href=\"#kafka_clientcpp\">#</a> kafka_client.cpp</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"kafka_client.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool run_<span class=\"token operator\">=</span>true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>kafka_consumer<span class=\"token operator\">::</span><span class=\"token function\">kafka_consumer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> brokers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> topics<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                std<span class=\"token operator\">::</span>string groupid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                <span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">:</span><span class=\"token function\">brokers_</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">topics_</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">groupid_</span><span class=\"token punctuation\">(</span>groupid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">offset_</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">partition_</span><span class=\"token punctuation\">(</span>partition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>kafka_consumer<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">kafka_consumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>bool kafka_consumer<span class=\"token operator\">::</span><span class=\"token function\">initclient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    RdKafka<span class=\"token operator\">::</span>Conf <span class=\"token operator\">*</span>conf<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 配置对象的指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    conf<span class=\"token operator\">=</span>RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_GLOBAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 配置类型为 global</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"create error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    std<span class=\"token operator\">::</span>string errstr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>conf<span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span>brokers_<span class=\"token punctuation\">,</span>errstr<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 设置代理</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RdKafka conf set brokerlist failed : %s\\n\"</span><span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conf<span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group.id\"</span><span class=\"token punctuation\">,</span> groupid_<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 设置消费者组 id</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RdKafka conf set group.id failed : %s\\n\"</span><span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    std<span class=\"token operator\">::</span>string strfetch_num<span class=\"token operator\">=</span><span class=\"token string\">\"1024000\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>conf<span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max.partition.fetch.bytes\"</span><span class=\"token punctuation\">,</span> strfetch_num<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 每次获取的最大数据长度</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RdKafka conf set max.partition failed : %s\\n\"</span><span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    kafka_consumer_ <span class=\"token operator\">=</span> RdKafka<span class=\"token operator\">::</span>Consumer<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 根据完成的配置创建消费者对象</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>kafka_consumer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"failed to ceate consumer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    delete conf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    RdKafka<span class=\"token operator\">::</span>Conf <span class=\"token operator\">*</span>tconf <span class=\"token operator\">=</span> nullptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    tconf <span class=\"token operator\">=</span> RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 进行配置，配置类型为话题类型</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tconf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RdKafka create topic conf failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">//if (tconf->set (\"auto.offset.reset\", \"largest\", errstr) != RdKafka::Conf::CONF_OK)&#123;// 自动重置到最大的 offset</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tconf<span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auto.offset.reset\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"smallest\"</span><span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 自动重置到最小的 offset, 这个最小的 offset 不一定是 0, 因为 msg 可能会被过期删除掉</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RdKafka conf set auto.offset.reset failed : %s\\n\"</span><span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    topic_ <span class=\"token operator\">=</span> RdKafka<span class=\"token operator\">::</span>Topic<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>kafka_consumer_<span class=\"token punctuation\">,</span> topics_<span class=\"token punctuation\">,</span> tconf<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>topic_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RdKafka create topic failed : %s\\n\"</span><span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    delete tconf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    RdKafka<span class=\"token operator\">::</span>ErrorCode resp <span class=\"token operator\">=</span> kafka_consumer_<span class=\"token operator\">-></span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>topic_<span class=\"token punctuation\">,</span> partition_<span class=\"token punctuation\">,</span> offset_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 进行配置，配置类型为话题类型</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resp <span class=\"token operator\">!=</span> RdKafka<span class=\"token operator\">::</span>ERR_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"failed to start consumer : %s\\n\"</span><span class=\"token punctuation\">,</span> RdKafka<span class=\"token operator\">::</span><span class=\"token function\">err2str</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>bool kafka_consumer<span class=\"token operator\">::</span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeout_ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    RdKafka<span class=\"token operator\">::</span>Message <span class=\"token operator\">*</span>msg <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 声明数据指针</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>run_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        msg <span class=\"token operator\">=</span> kafka_consumer_<span class=\"token operator\">-></span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span>topic_<span class=\"token punctuation\">,</span>partition_<span class=\"token punctuation\">,</span>timeout_ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从目标 partition 获取对应话题信息</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token function\">handle_message</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 处理获取到的信息</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        kafka_consumer_<span class=\"token operator\">-></span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 在获取到下一条数据之前无限等待</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        delete msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 如果 handle 时 run 没有置 0 则一直循环</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    kafka_consumer_<span class=\"token operator\">-></span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span>topic_<span class=\"token punctuation\">,</span>partition_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 和 start 对应，停止客户端</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>topic_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        delete topic_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        topic_<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>kafka_consumer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        delete kafka_consumer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        kafka_consumer_<span class=\"token operator\">=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    RdKafka<span class=\"token operator\">::</span><span class=\"token function\">wait_destroyed</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 等待销毁，单位 ms</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">void</span> kafka_consumer<span class=\"token operator\">::</span><span class=\"token function\">handle_message</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Message <span class=\"token operator\">*</span>message<span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">-></span><span class=\"token function\">err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">case</span> RdKafka<span class=\"token operator\">::</span>ERR__TIMED_OUT<span class=\"token operator\">:</span><span class=\"token comment\">// 超时</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">case</span> RdKafka<span class=\"token operator\">::</span>ERR_NO_ERROR<span class=\"token operator\">:</span><span class=\"token comment\">// 无异常</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.*s\\n\"</span><span class=\"token punctuation\">,</span> static_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">-></span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                    static_cast <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">-></span><span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            last_offset_ <span class=\"token operator\">=</span> message<span class=\"token operator\">-></span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">case</span> RdKafka<span class=\"token operator\">::</span>ERR__PARTITION_EOF<span class=\"token operator\">:</span><span class=\"token comment\">// 到达最后一条消息</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"%% Reached the end of the queue, offset: \"</span> <span class=\"token operator\">&lt;&lt;</span> last_offset_ <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">case</span> RdKafka<span class=\"token operator\">::</span>ERR__UNKNOWN_TOPIC<span class=\"token operator\">:</span><span class=\"token comment\">// 主题不对</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">case</span> RdKafka<span class=\"token operator\">::</span>ERR__UNKNOWN_PARTITION<span class=\"token operator\">:</span><span class=\"token comment\">//partition 不对</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Consume failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token operator\">-></span><span class=\"token function\">errstr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            run_<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token comment\">// 其他异常</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Consume failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token operator\">-></span><span class=\"token function\">errstr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            run_<span class=\"token operator\">=</span>false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>kafka_producer<span class=\"token operator\">::</span><span class=\"token function\">kafka_producer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> brokers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                               <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> topics<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                               <span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token operator\">:</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">topics_</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">brokers_</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">partition_</span><span class=\"token punctuation\">(</span>partition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>kafka_producer<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">kafka_producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>bool kafka_producer<span class=\"token operator\">::</span><span class=\"token function\">init_producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    std<span class=\"token operator\">::</span>string errstr<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    RdKafka<span class=\"token operator\">::</span>Conf <span class=\"token operator\">*</span>conf <span class=\"token operator\">=</span> RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_GLOBAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建全局配置对象指针</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    RdKafka<span class=\"token operator\">::</span>Conf <span class=\"token operator\">*</span>tconf <span class=\"token operator\">=</span> RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建话题配置对象指针</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>conf<span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"metadata.broker.list\"</span><span class=\"token punctuation\">,</span> brokers_<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 设置代理</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"RdKafka conf set brokerlist failed :\"</span> <span class=\"token operator\">&lt;&lt;</span> errstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    conf<span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dr_cb\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>delivery_callback<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置递送完包的回调</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    conf<span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"event_cb\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>event_callback<span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置事件回调</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    kafka_producer_<span class=\"token operator\">=</span>RdKafka<span class=\"token operator\">::</span>Producer<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">,</span>errstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 声明生产者对象指针</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>kafka_producer_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to create producer: \"</span> <span class=\"token operator\">&lt;&lt;</span> errstr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"% Created producer \"</span> <span class=\"token operator\">&lt;&lt;</span> kafka_producer_<span class=\"token operator\">-></span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    topic_<span class=\"token operator\">=</span>RdKafka<span class=\"token operator\">::</span>Topic<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>kafka_producer_<span class=\"token punctuation\">,</span>topics_<span class=\"token punctuation\">,</span>tconf<span class=\"token punctuation\">,</span>errstr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建话题对象</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>topic_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Failed to create topic: \"</span> <span class=\"token operator\">&lt;&lt;</span> errstr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token keyword\">void</span> kafka_producer<span class=\"token operator\">::</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 发送消息</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>run<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    RdKafka<span class=\"token operator\">::</span>ErrorCode resp <span class=\"token operator\">=</span> kafka_producer_<span class=\"token operator\">-></span><span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>topic_<span class=\"token punctuation\">,</span> partition_<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                                                    RdKafka<span class=\"token operator\">::</span>Producer<span class=\"token operator\">::</span>RK_MSG_COPY <span class=\"token comment\">/* Copy payload */</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                                                    const_cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                                                    msg<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                                                     <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 异步非阻塞</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resp <span class=\"token operator\">!=</span> RdKafka<span class=\"token operator\">::</span>ERR_NO_ERROR<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Produce failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> RdKafka<span class=\"token operator\">::</span><span class=\"token function\">err2str</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Produced message (\"</span> <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" bytes)\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token comment\">//kafka_producer_->poll(0);</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>run <span class=\"token operator\">&amp;&amp;</span> kafka_producer_<span class=\"token operator\">-></span><span class=\"token function\">outq_len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Waiting for \"</span> <span class=\"token operator\">&lt;&lt;</span> kafka_producer_<span class=\"token operator\">-></span><span class=\"token function\">outq_len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        kafka_producer_<span class=\"token operator\">-></span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 由于是异步调用，是否成功是看回调函数的，这里 poll 会调用 dr_cb 函数</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token keyword\">void</span> kafka_producer<span class=\"token operator\">::</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    delete topic_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    delete kafka_producer_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>main.cpp</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"kafka_client.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        std<span class=\"token operator\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"maybe you should use p or c as parameter\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        kafka_producer<span class=\"token operator\">*</span> Kafkapr_ <span class=\"token operator\">=</span> new <span class=\"token function\">kafka_producer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"broker1:9091,broker2:9092,broker3:9093\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Demo_Topic\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        Kafkapr_<span class=\"token operator\">-></span><span class=\"token function\">init_producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//Kafkapr_->send(\"hello world!\");</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        std<span class=\"token operator\">::</span>string str_msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Kafka!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            std<span class=\"token operator\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>cin<span class=\"token punctuation\">,</span>str_msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">size_t</span> len <span class=\"token operator\">=</span> str_msg<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str_msg<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                str_msg<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str_msg<span class=\"token operator\">==</span><span class=\"token string\">\"quit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            Kafkapr_<span class=\"token operator\">-></span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>str_msg<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        kafka_consumer<span class=\"token operator\">*</span> kafkacs_<span class=\"token operator\">=</span>new <span class=\"token function\">kafka_consumer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"broker1:9091,broker2:9092,broker3:9093\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Demo_Topic\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"group_1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        kafkacs_<span class=\"token operator\">-></span><span class=\"token function\">initclient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        kafkacs_<span class=\"token operator\">-></span><span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        std<span class=\"token operator\">::</span>cout<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"error parameter\"</span><span class=\"token operator\">&lt;&lt;</span>std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"makefile\"><a class=\"anchor\" href=\"#makefile\">#</a> makefile</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cc<span class=\"token operator\">=</span>g<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>target<span class=\"token operator\">=</span>main</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>src<span class=\"token operator\">=</span>main<span class=\"token punctuation\">.</span>cpp kafka_client<span class=\"token punctuation\">.</span>cpp</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>std<span class=\"token operator\">=</span><span class=\"token operator\">--</span>std<span class=\"token operator\">=</span>c<span class=\"token operator\">++</span><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lib<span class=\"token operator\">=</span><span class=\"token operator\">-</span>lrdkafka<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>$<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t$<span class=\"token punctuation\">(</span>cc<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>g <span class=\"token operator\">-</span>o $<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> $<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> $<span class=\"token punctuation\">(</span>std<span class=\"token punctuation\">)</span>  $<span class=\"token punctuation\">(</span>lib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>clean<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\trm <span class=\"token operator\">-</span>f main</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "kafka"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/kafka/kafka-intro/",
            "url": "https://echidna-sxh.github.io/computer-science/kafka/kafka-intro/",
            "title": "librdkafkacpp接口使用示例",
            "date_published": "2021-08-11T06:00:28.000Z",
            "content_html": "<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmNvbmZsdWVudC5pby8yLjAuMC9jbGllbnRzL2xpYnJka2Fma2Ev\">https://docs.confluent.io/2.0.0/clients/librdkafka/</span></p>\n<p>librdkafkacpp 是一个 kafka 的 c++ 库，使用对象的创建使用工厂模式，自定义的逻辑处理一般使用回调函数。</p>\n<p>libkafkacpp 提供的接口基本覆盖了 kafka 原生提供的功能，但也比较琐碎，可以进行进一步封装。下面是对上一章的示例的详细解读。</p>\n<h1 id=\"生产者\"><a class=\"anchor\" href=\"#生产者\">#</a> 生产者</h1>\n<ul>\n<li>首先原生生产者是 RdKafka::Producer, 其需要的其他变量有：</li>\n</ul>\n<ol>\n<li>目标 broker (s)</li>\n<li>话题对象</li>\n<li>回调函数 (可选)</li>\n<li>写入的目标 partition</li>\n</ol>\n<ul>\n<li>其初始化流程为：</li>\n</ul>\n<p><img data-src=\"https://echidna-sxh.oss-cn-beijing.aliyuncs.com/rdkafka%3A%3Aproducer.png\" alt=\"\" /></p>\n<pre><code class=\"language-c++\">std::string errstr=&quot;&quot;;\n//创建全局配置对象指针\nRdKafka::Conf *conf = RdKafka::Conf::create(RdKafka::Conf::CONF_GLOBAL);\n//创建话题配置对象指针\nRdKafka::Conf *tconf = RdKafka::Conf::create(RdKafka::Conf::CONF_TOPIC);\n</code></pre>\n<ul>\n<li>这里应用工厂模式，创建了两个配置对象。rdkafka 的类大多使用大量纯虚函数，然后使用静态函数创建对象。</li>\n</ul>\n<pre><code class=\"language-c++\">if (conf-&gt;set(&quot;metadata.broker.list&quot;, brokers_, errstr) != RdKafka::Conf::CONF_OK)&#123;//\n        std::cerr &lt;&lt; &quot;RdKafka conf set brokerlist failed :&quot; &lt;&lt; errstr.c_str() &lt;&lt; std::endl;\n    &#125;\n</code></pre>\n<ul>\n<li>关于 conf-&gt;set 可以做的事较多，这里是设置 brokers，具体可以看附录</li>\n</ul>\n<pre><code class=\"language-c++\">conf-&gt;set(&quot;dr_cb&quot;, &amp;delivery_callback, errstr);//设置递送完包的回调\nconf-&gt;set(&quot;event_cb&quot;, &amp;event_callback, errstr);//设置事件回调\n</code></pre>\n<ul>\n<li>可选，注意设置了 delivery_callback 时，一定要在发送消息后使用 poll () 来清空消息报告队列，因为 poll () 会调用上述两个回调函数。</li>\n</ul>\n<pre><code class=\"language-c++\">kafka_producer_=RdKafka::Producer::create(conf,errstr);\n</code></pre>\n<ul>\n<li>使用前面进行的配置创建生产者对象</li>\n</ul>\n<pre><code class=\"language-c++\">topic_=RdKafka::Topic::create(kafka_producer_,topics_,tconf,errstr);\n</code></pre>\n<ul>\n<li>使用生产者对象和话题以及话题配置创建话题对象</li>\n</ul>\n<p>至此生产者及其话题可以用于发送消息，接下来的内容可以封装为一个单次发送信息函数，方便多次调用。</p>\n<pre><code class=\"language-c++\">RdKafka::ErrorCode resp = kafka_producer_-&gt;produce(topic_, partition_,\n                                                    RdKafka::Producer::RK_MSG_COPY /* Copy payload */,\n                                                    const_cast&lt;char *&gt;(msg.c_str()), \n                                                    msg.size(),\n                                                     NULL, NULL);\n</code></pre>\n<ul>\n<li>\n<p>第一个参数是前面的话题对象</p>\n</li>\n<li>\n<p>第二个参数是指定写入的 partition，可以设置 RdKafka::Topic::PARTITION_UA 来自动负载均衡，可以开个类继承 PartitionerCb 类重载 partitioner_cb 函数来自定义负载均衡策略。</p>\n</li>\n<li>\n<p>第三个参数指示生产选项，这里是拷贝负载模式 RK_MSG_COPY，还有用完即释放负载模式 RK_MSG_FREE，这里两个都是异步非阻塞的，还有 RK_MSG_BLOCK 模式，这会在消息队列满时阻塞</p>\n</li>\n<li>\n<p>第四个参数是要发送的信息，一般使用 char * 类型</p>\n</li>\n<li>\n<p>第五个参数是数据长度</p>\n</li>\n<li>\n<p>第六个参数是数据的 key，可以是空</p>\n</li>\n<li>\n<p>第七个参数是隐藏信息，用作上下文。</p>\n<p>函数原型如下：</p>\n</li>\n</ul>\n<pre><code class=\"language-c++\">virtual ErrorCode produce (Topic *topic, int32_t partition, int msgflags, void *payload, size_t len, const std::string *key, void *msg_opaque)=0\n</code></pre>\n<pre><code class=\"language-c++\">if (resp != RdKafka::ERR_NO_ERROR)\n        std::cerr &lt;&lt; &quot;Produce failed: &quot; &lt;&lt; RdKafka::err2str(resp) &lt;&lt; std::endl;\n</code></pre>\n<ul>\n<li>RdKafka::err2str (RdKafka::ErrorCode resp) 是将错误代码转化为可读错误。</li>\n</ul>\n<pre><code class=\"language-c++\">while (run &amp;&amp; kafka_producer_-&gt;outq_len() &gt; 0) &#123;\n        std::cerr &lt;&lt; &quot;Waiting for &quot; &lt;&lt; kafka_producer_-&gt;outq_len() &lt;&lt; std::endl;\n        kafka_producer_-&gt;poll(1000);//由于是异步调用，是否成功是看回调函数的，这里poll会调用dr_cb函数\n    &#125;\n</code></pre>\n<ul>\n<li>本次调用退出前处理完消息队列中的消息。</li>\n</ul>\n<h1 id=\"消费者\"><a class=\"anchor\" href=\"#消费者\">#</a> 消费者</h1>\n<p>对于消费者，有一个消费者组的概念，同一消费者组的消费者无法重复消费同一 partition，librdkafkacpp 提供两种消费者的 api，分别为高级 api 和低级 api，高级 api 拥有更好的负载均衡策略，即会更好的分配给每个消费者 partition。</p>\n<p>本示例使用低级 api，即指定 partition 进行消费。</p>\n<pre><code class=\"language-c++\">RdKafka::Conf *conf=RdKafka::Conf::create(RdKafka::Conf::CONF_GLOBAL);\n</code></pre>\n<ul>\n<li>同样是 GLOBAL 类型配置对象。</li>\n</ul>\n<pre><code class=\"language-c++\">if(conf-&gt;set(&quot;bootstrap.servers&quot;,brokers_,errstr)!=RdKafka::Conf::CONF_OK)&#123;\n        fprintf(stderr, &quot;RdKafka conf set brokerlist failed : %s\\n&quot;, errstr.c_str());\n    &#125;\n</code></pre>\n<ul>\n<li>设置 brokers</li>\n</ul>\n<pre><code class=\"language-c++\">if (conf-&gt;set(&quot;group.id&quot;, groupid_, errstr) != RdKafka::Conf::CONF_OK)&#123;\n        fprintf(stderr, &quot;RdKafka conf set group.id failed : %s\\n&quot;, errstr.c_str());\n    &#125;\n</code></pre>\n<ul>\n<li>设置消费者组 id</li>\n</ul>\n<pre><code class=\"language-c++\">std::string strfetch_num=&quot;1024000&quot;;\n    if(conf-&gt;set(&quot;max.partition.fetch.bytes&quot;, strfetch_num, errstr) != RdKafka::Conf::CONF_OK)&#123;\n        fprintf(stderr, &quot;RdKafka conf set max.partition failed : %s\\n&quot;, errstr.c_str());\n    &#125;\n</code></pre>\n<ul>\n<li>设置每次获取的最大数据长度</li>\n</ul>\n<pre><code class=\"language-c++\">kafka_consumer_ = RdKafka::Consumer::create(conf, errstr);\n</code></pre>\n<ul>\n<li>根据完成的配置创建消费者对象</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>RdKafka<span class=\"token operator\">::</span>Conf <span class=\"token operator\">*</span>tconf <span class=\"token operator\">=</span>  RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>创建话题的配置对象</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tconf<span class=\"token operator\">-></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auto.offset.reset\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"smallest\"</span><span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> RdKafka<span class=\"token operator\">::</span>Conf<span class=\"token operator\">::</span>CONF_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RdKafka conf set auto.offset.reset failed : %s\\n\"</span><span class=\"token punctuation\">,</span> errstr<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>设置每次连接自动重置到最小的 offset（即最早的信息）, 这个最小的 offset 不一定是 0, 因为 msg 可能会被过期删除掉</li>\n</ul>\n<pre><code>topic_ = RdKafka::Topic::create(kafka_consumer_, topics_, tconf, errstr);\n</code></pre>\n<ul>\n<li>根据话题的配置对象创建话题对象</li>\n</ul>\n<pre><code class=\"language-c++\">RdKafka::ErrorCode resp = kafka_consumer_-&gt;start(topic_, partition_, offset_);\n</code></pre>\n<ul>\n<li>开启消费通道</li>\n</ul>\n<pre><code class=\"language-c++\">RdKafka::Message *msg = NULL;//声明数据指针\n    while(run_)&#123;\n        msg = kafka_consumer_-&gt;consume(topic_,partition_,timeout_ms);//从目标partition获取对应话题信息\n        handle_message(msg,NULL);//处理获取到的信息\n        kafka_consumer_-&gt;poll(0);//在获取到下一条数据之前无限等待\n        delete msg;\n    &#125;//如果handle时run没有置0则一直循环\n</code></pre>\n<ul>\n<li>开始循环监听消息</li>\n</ul>\n<pre><code class=\"language-c++\">kafka_consumer_-&gt;stop(topic_,partition_);\n</code></pre>\n<ul>\n<li>和 start 对应，停用消费通道</li>\n</ul>\n<p>之后销毁创建的两个对象，注意销毁后调用 RdKafka::wait_destroyed (5000); 来确保销毁所需时间。</p>\n<p>低级消费者的函数原型如下：</p>\n<pre><code class=\"language-c++\">virtual Message* RdKafka::Consumer::consume\t(Topic * topic,int32_t \tpartition,int timeout_ms )\n</code></pre>\n<ul>\n<li>第一个参数是目标话题，第二个参数是目标 partition，第三个参数是等待接受消息的最长时间</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "kafka"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/shell%20script/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/shell%20script/",
            "title": "section.6 shell脚本",
            "date_published": "2021-07-17T08:29:28.000Z",
            "content_html": "<h1 id=\"shell脚本\"><a class=\"anchor\" href=\"#shell脚本\">#</a> shell 脚本</h1>\n<ul>\n<li>\n<p>shell 脚本之于 Linux，就类似于批处理文件 (.bat) 之于 windows，都是可以 one touch 的情况下执行复数条命令，可以省去重复工作时每次都要输入又臭又长的命令的苦恼，并且其语法和 c 有不少共通之处，拥有基本的数组、循环、条件判断与转移等基本语法功能，可以直接用于编写程序。</p>\n</li>\n<li>\n<p>shell 脚本有着以下的几个注意事项：</p>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令自上而下自左向右执行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>命令参数之间以空格分开，多个空格会被忽略</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>读取到 Enter，就开始试图执行命令</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>注释符号为 #</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>一行命令内容过多可以用 \\ 收尾一行，然后回车，来换行继续写</pre></td></tr></table></figure><p>脚本以 sh 方式执行需要 r 权限，以./ 方式执行需要 x 权限。</p>\n<h2 id=\"程序头\"><a class=\"anchor\" href=\"#程序头\">#</a> 程序头</h2>\n<ul>\n<li>shell 脚本一般使用 vim 编辑，除此之外还有一些应尽事项，如：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>程序的第一行一般是：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#！/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>这句话指定了程序所用的shell，即bash。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>接下来是一些注释内容，包括：程序内容的说明、版本信息、作者信息、日期信息等。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>然后是环境变量的声明，如果用到系统环境变量以外的环境变量，需要设置环境变量，以执行一些外部命令。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>之后是程序主体，完成程序功能。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>最后定义程序退出的返回值，一般定义为0.</pre></td></tr></table></figure><h2 id=\"括号的使用\"><a class=\"anchor\" href=\"#括号的使用\">#</a> 括号的使用</h2>\n<ul>\n<li>shell 脚本的语法里对括号的应用较为复杂，具体有以下几种。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(cmd)</code></td>\n<td>另开一个子 shell 完成 cmd，可使用父 shell 变量，父 shell 无法使用子 shell 中变量</td>\n</tr>\n<tr>\n<td><code>(cmds)</code></td>\n<td>同上，多条命令用分号隔开</td>\n</tr>\n<tr>\n<td><code>$(cmd)</code></td>\n<td>命令替换，扫描命令后先将 cmd 执行，用其标准输出替换这个表达式原来的位置，再执行总命令</td>\n</tr>\n<tr>\n<td><code>$((exp))</code></td>\n<td>表达式计算，最终结果为一个值，表达式支持 c 语言规则即可，使用较多</td>\n</tr>\n<tr>\n<td><code>array=(a,b,c,d)</code></td>\n<td>数组赋值</td>\n</tr>\n<tr>\n<td><code>((exp))</code></td>\n<td>计算一个表达式，同 [exp]</td>\n</tr>\n<tr>\n<td><code>[exp]</code></td>\n<td>可以使用 ((exp)) 功能外，还可以当作 test 使用</td>\n</tr>\n<tr>\n<td><code>[[exp]]</code></td>\n<td>比 [] 更通用，如可以不使用转义字符</td>\n</tr>\n<tr>\n<td><code>&#123;cmds&#125;</code></td>\n<td>一个代码块，不另开 shell</td>\n</tr>\n<tr>\n<td><code>$&#123;var&#125;</code></td>\n<td>大括号有时可省略，但最好还是加上</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"test和\"><a class=\"anchor\" href=\"#test和\">#</a> test 和 []</h2>\n<ul>\n<li>在需要检测文件相关属性时，我们可以使用 test 或 [] 来进行。注意使用 [] 时，你需要在所有独立含义的字符组之间加上空格，包括中括号闭区间的两端。[] 命令常和 if、while 等一起执行。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">test</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> filename</pre></td></tr></table></figure><ul>\n<li>相关检测选项如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-e</td>\n<td>文件存在返回 true，否则 false</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>是否为文件</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>是否为目录</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>文件是否可写</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>文件是否可读</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>文件是否可执行</td>\n</tr>\n<tr>\n<td>-eq</td>\n<td>(整数) 相等</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>(整数) 不等</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>(整数) 大于</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>(整数) 小于</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>(字符串)</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>and，逻辑 &amp;</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>or 逻辑 |</td>\n</tr>\n<tr>\n<td>!</td>\n<td>not, 逻辑非</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"shell脚本的args和argv\"><a class=\"anchor\" href=\"#shell脚本的args和argv\">#</a> shell 脚本的 &quot;args&quot; 和 &quot;argv&quot;</h2>\n<p>命令可以带有参数，而 shell 脚本接受参数的方式和 c 语言有相似之处。我们可以用 $# 得到参数个数，用 $@代表全部参数，用 $1、$2、$3 等依次代表各个参数。而 $0 可以代表脚本文件的文件名 (可执行文件)。</p>\n<h2 id=\"条件判断ifthen\"><a class=\"anchor\" href=\"#条件判断ifthen\">#</a> 条件判断 (if...then)</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> 条件判断式1 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> 条件判断式2 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>注意事项：</p>\n<ul>\n<li>1. 虽然不一定要用中括号作为判断命令，但这样较为方便，注意中括号里的空格，如 [a==b];</li>\n<li>2. 可以使用 [[]] 代替 [] 以获得更好的扩展功能，如正则表达式等；</li>\n<li>3. 可以使用 (()) 代替 [] 以使用复杂表达式；</li>\n</ul>\n<h2 id=\"条件判断caseesac\"><a class=\"anchor\" href=\"#条件判断caseesac\">#</a> 条件判断 (case...esac)</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$var</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token string\">\"string1\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#建议使用双引号把变量内容括起来，这边单走一个右圆括号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">#这里需要双分号代表一个分支结束 (为了和上面操作的分号区分开)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token string\">\"string2\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  *<span class=\"token punctuation\">)</span>         <span class=\"token comment\">#剩余内容一律使用 * 来匹配。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>   <span class=\"token comment\">#匹配不上的退出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">esac</span>         <span class=\"token comment\">#老规矩</span></pre></td></tr></table></figure><h2 id=\"循环whiledodone\"><a class=\"anchor\" href=\"#循环whiledodone\">#</a> 循环 (while...do...done)</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> 条件判断 <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h2 id=\"循环untildodone\"><a class=\"anchor\" href=\"#循环untildodone\">#</a> 循环 (until...do...done)</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">until</span> <span class=\"token punctuation\">[</span> 条件判断 <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>没什么好说的，各个式子语法规范好就行。</p>\n<h2 id=\"循环fordodone\"><a class=\"anchor\" href=\"#循环fordodone\">#</a> 循环 (for...do...done)</h2>\n<p>for 语句可以使用类似 python 的写法，即 for var in vars 语法。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">var</span> <span class=\"token keyword\">in</span> var1 var2 <span class=\"token punctuation\">..</span>.<span class=\"token comment\">#如果数值连续可以使用 in $(seq n1 n2)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>也可以使用类似 c 的写法，即 for ((初值；条件；增长步长))。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>$max<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h2 id=\"内置的脚本调试方法\"><a class=\"anchor\" href=\"#内置的脚本调试方法\">#</a> 内置的脚本调试方法</h2>\n<p>即调用 sh 来允许脚本，且加上相应的调试参数。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> -<span class=\"token punctuation\">[</span>nvx<span class=\"token punctuation\">]</span> xxx.sh</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>n</td>\n<td>不执行脚本，只检查语法</td>\n</tr>\n<tr>\n<td>v</td>\n<td>执行脚本前先打印脚本</td>\n</tr>\n<tr>\n<td>x</td>\n<td>将脚本按照运行步骤打印出来</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/RE/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/RE/",
            "title": "section.5 正则表达式",
            "date_published": "2021-07-16T08:29:28.000Z",
            "content_html": "<h1 id=\"re相关\"><a class=\"anchor\" href=\"#re相关\">#</a> RE 相关</h1>\n<ul>\n<li>正则表达式用来描述字符串匹配的复杂规则。</li>\n</ul>\n<h2 id=\"元字符\"><a class=\"anchor\" href=\"#元字符\">#</a> 元字符</h2>\n<ul>\n<li>元字符属于正则表达中的基础字符，代表符合特殊规则的单个字符.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母数字下划线汉字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配所有空白字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>该位置是单词的开始结束</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配字符串的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配字符串的结束</td>\n</tr>\n<tr>\n<td>()</td>\n<td>对括号内的表达式分组，视作整体</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符转义\"><a class=\"anchor\" href=\"#字符转义\">#</a> 字符转义</h2>\n<ul>\n<li>对于可显示的元字符本身，需要作为普通字符查找时，需要使用反斜杠 \\ 进行转义。</li>\n</ul>\n<h2 id=\"字符串重复\"><a class=\"anchor\" href=\"#字符串重复\">#</a> 字符（串）重复</h2>\n<ul>\n<li>重复符是指将该字符前的字符 (串) 重复若干次.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>前置字符（串）重复 &gt;=0 次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>前置字符（串）重复 &gt;=1 次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>前置字符（串）重复 &lt;=1 次</td>\n</tr>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>前置字符（串）重复 n 次</td>\n</tr>\n<tr>\n<td><code>&#123;n1,n2&#125;</code></td>\n<td>前置字符（串）重复 n1 到 n2 次，n2 可缺省</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"自定义字符类\"><a class=\"anchor\" href=\"#自定义字符类\">#</a> 自定义字符类</h2>\n<ul>\n<li>正则表达式中允许使用 [] 来自定义字符类，表示可以从类中取一个字符参与匹配，如元音类 [aeiou]，[0-9], 即 \\d, 小写字母类 [a-z], 大写字母类 [A-Z], 数字字母类 [a-zA-Z0-9]。其中，[a-z][A-Z] 的表示方法基于 LANG=C，否则需要用 [:alpha:][:lower:][:upper:] 来替代。</li>\n</ul>\n<h2 id=\"分支条件\"><a class=\"anchor\" href=\"#分支条件\">#</a> 分支条件</h2>\n<ul>\n<li>用 | 分隔开来，可以表示 or 的含义，如:<br />\n\\d {5}-\\d {4}|\\d {5}, 表示五个数字 - 四个数字，或者五个数字，这个表达式左右不能互换，否则无法匹配 5-4 的后四个数字。</li>\n</ul>\n<h2 id=\"分组\"><a class=\"anchor\" href=\"#分组\">#</a> 分组</h2>\n<ul>\n<li>元字符中的 () 字符用于分组，其原理是每一个 () 都会被看作一个整体，且被分配一个组号，可以用于后向引用。</li>\n<li>分组最基本的功能是，确保表达式中的语义准确，且可以对整个分组使用重复字符 *、+、？和 {}，如 (\\d {2} 0)+, 表示任意两个数字加一个 0，整体重复 1 次以上。</li>\n</ul>\n<h2 id=\"反义\"><a class=\"anchor\" href=\"#反义\">#</a> 反义</h2>\n<ul>\n<li>即反向匹配元字符，一般是正常元字符的大写形式。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>反义元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\W</td>\n<td>匹配不是字母下划线数字汉字的字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配不是空白符的字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配不是数字的字符</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>该位置不是开头或结尾</td>\n</tr>\n<tr>\n<td>[^string]</td>\n<td>匹配不含有组成 string 中字符的字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"后向引用\"><a class=\"anchor\" href=\"#后向引用\">#</a> 后向引用</h2>\n<p>前面提到，用 () 进行分组后，会从 1 开始按照左括号顺序从左到右给该分组一个组号，该分组工作后匹配到的字符 (串) 会被这个组号捕获，这时我们使用反斜杠加组号，就能复现出这个字符 (串)，注意这个不是单纯的重复表达式，而是重复匹配通过的内容，适用于匹配重复单词，如 soso，可以用 \\b (so)\\1\\b 匹配。</p>\n<h2 id=\"零宽断言\"><a class=\"anchor\" href=\"#零宽断言\">#</a> 零宽断言</h2>\n<p>这种语法存在的意义是，查找出现在特定表达式前 (后) 的内容，以？代指自己。</p>\n<ul>\n<li>\n<p>(?=word), 断言自己出现在 word 前面，并取自己作为表达式结果。如，\\bw+(?=ion\\b)，意思是匹配一段字符，如果该字符串以 ion 结尾，则取 ion 前的内容作为匹配对象，action 匹配 act。</p>\n</li>\n<li>\n<p>(?&lt;=word), 断言自己出现在 word 后面，并取自己作为表达式结果。如，(?&lt;=res)\\w+\\b, 取 res 后的内容作为比配对象，restart 匹配 tart。</p>\n</li>\n<li>\n<p>(?!word), 断言自己不会出现在 word 前面，并取自己作为表达式结果。如，\\d {3}(?![a-z]), 匹配三个数字，且这三个数字不能后接一个小写字母，1234 匹配出 123，123z 不能匹配。</p>\n</li>\n<li>\n<p>(?&lt;!word), 断言自己不会出现在 word 后面，如，(?&lt;[A-Z])\\d {2}\\b, 匹配两个数字，且这两个数字不能在大写字母后面，a12 匹配出 12，A12 不能匹配。</p>\n</li>\n</ul>\n<p>总结：断言属于额外条件，是在其他表达式完成匹配后进行的一步判断，将字符串代入？，取判断条件通过的进行匹配，匹配结果不包括断言条件。</p>\n<h2 id=\"贪婪匹配与懒惰匹配\"><a class=\"anchor\" href=\"#贪婪匹配与懒惰匹配\">#</a> 贪婪匹配与懒惰匹配</h2>\n<ul>\n<li>正则表达式默认进行贪婪匹配，即尽可能多的匹配字符，如果我们需要尽可能少的匹配字符，可以在重复符的后面加上？，即 *?、+?、??、{n1,n2}?、{n}?。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/VIM/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/VIM/",
            "title": "section.4 VIM使用",
            "date_published": "2021-07-15T08:29:28.000Z",
            "content_html": "<h1 id=\"vim相关\"><a class=\"anchor\" href=\"#vim相关\">#</a> VIM 相关</h1>\n<h2 id=\"按键说明\"><a class=\"anchor\" href=\"#按键说明\">#</a> 按键说明</h2>\n<ul>\n<li>\n<p>命令模式下：</p>\n<p>数字 + 操作符一般指循环该操作的次数，下面列举一些常用操作，包括移动光标，检索，复制粘贴，撤销重做等。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>箭头</td>\n<td style=\"text-align:center\">光标移动一个单位，前可加数字</td>\n</tr>\n<tr>\n<td>home/end</td>\n<td style=\"text-align:center\">光标移动到该行开头 / 结尾</td>\n</tr>\n<tr>\n<td>gg/G</td>\n<td style=\"text-align:center\">光标移动到第一行 / 最后一行</td>\n</tr>\n<tr>\n<td>数字 + gg</td>\n<td style=\"text-align:center\">光标移动到该数字行第一字符处</td>\n</tr>\n<tr>\n<td>数字 + G</td>\n<td style=\"text-align:center\">同上</td>\n</tr>\n<tr>\n<td>数字 + 回车</td>\n<td style=\"text-align:center\">光标向下 n 行</td>\n</tr>\n<tr>\n<td>/word</td>\n<td style=\"text-align:center\">从光标向下搜索 word</td>\n</tr>\n<tr>\n<td>?word</td>\n<td style=\"text-align:center\">从光标向上搜索 word</td>\n</tr>\n<tr>\n<td>n</td>\n<td style=\"text-align:center\">重复前述查找操作</td>\n</tr>\n<tr>\n<td>N</td>\n<td style=\"text-align:center\">反向重复前述查找操作</td>\n</tr>\n<tr>\n<td>:n1,n2s/old/new/g</td>\n<td style=\"text-align:center\">将 n1 到 n2 行的所有 old 换成 new</td>\n</tr>\n<tr>\n<td>:n1,n2s/old/new/gc</td>\n<td style=\"text-align:center\">c 意指每次替换都要确认</td>\n</tr>\n<tr>\n<td>dd</td>\n<td style=\"text-align:center\">剪切光标行，前可加数字</td>\n</tr>\n<tr>\n<td>yy</td>\n<td style=\"text-align:center\">复制光标行，前可加数字</td>\n</tr>\n<tr>\n<td>p</td>\n<td style=\"text-align:center\">paste, 粘贴到光标下一行</td>\n</tr>\n<tr>\n<td>u</td>\n<td style=\"text-align:center\">undo，撤销上一操作</td>\n</tr>\n<tr>\n<td>ctrl+r</td>\n<td style=\"text-align:center\">redo，重做上一被撤销的操作</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>接下来是文件编辑完后的一些操作，这里的一些命令可以加 &quot;!&quot; 用于强制执行。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:w</td>\n<td style=\"text-align:center\">最终写入，可加！，也可加文件名表示另存为</td>\n</tr>\n<tr>\n<td>:q</td>\n<td style=\"text-align:center\">退出，可加！</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td style=\"text-align:center\">写入后退出，可加！</td>\n</tr>\n<tr>\n<td>:n1,n2 w filename</td>\n<td style=\"text-align:center\">将 n1 到 n2 行之间的内容另存为一个文件</td>\n</tr>\n<tr>\n<td>!command</td>\n<td style=\"text-align:center\">暂时去执行命令行命令，然后回车返回 vim</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>VIM 支持多文件操作，vim file1 file2 即可，相关命令如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:n</td>\n<td style=\"text-align:center\">编辑下一个文件，可加数字</td>\n</tr>\n<tr>\n<td>:N</td>\n<td style=\"text-align:center\">编辑上一个文件，可加数字</td>\n</tr>\n<tr>\n<td>:files</td>\n<td style=\"text-align:center\">列表当前打开的所有文件</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>VIM 支持多窗口操作，相关命令如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:sp</td>\n<td style=\"text-align:center\">将当前文件重新打开一份</td>\n</tr>\n<tr>\n<td>:sp newfile</td>\n<td style=\"text-align:center\">开一个新窗口打开 newfile 文件</td>\n</tr>\n<tr>\n<td>ctrl+w + 上下箭头</td>\n<td style=\"text-align:center\">光标转移大法</td>\n</tr>\n</tbody>\n</table>\n<p>ctrl+w+q 或者 :q 或者 :close 关闭光标所在窗口</p>\n<h2 id=\"vim环境设置\"><a class=\"anchor\" href=\"#vim环境设置\">#</a> vim 环境设置</h2>\n<ul>\n<li>保存在 /etc/vimrc, 不建议直接修改，可以在～/.vimrc 中对用户单独设置。</li>\n</ul>\n<p> 显示行号比较重要，可以加入 set nu 行。</p>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/tube/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/tube/",
            "title": "section.3 管道命令",
            "date_published": "2021-07-14T08:29:28.000Z",
            "content_html": "<h1 id=\"管道命令\"><a class=\"anchor\" href=\"#管道命令\">#</a> 管道命令</h1>\n<ul>\n<li>管道命令是将上一条命令的标准输出转化为下一条命令的标准输入，如：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /etc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">ls</span> pass?? <span class=\"token operator\">|</span> <span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output:passwd</pre></td></tr></table></figure><ul>\n<li>上述命令将列表内容作为标准输入传递给 cat，也就是说在 cat 看来，它执行的命令是：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$cat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">passwd</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output:passwd</pre></td></tr></table></figure><ul>\n<li>而不是：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> <span class=\"token function\">passwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>output:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><p>这一点很重要.</p>\n<ul>\n<li>选取命令 grep 和 cut 内容在上一章，本章主要介绍数据处理的 sed 命令和 awk 命令。</li>\n</ul>\n<h2 id=\"sed命令\"><a class=\"anchor\" href=\"#sed命令\">#</a> sed 命令</h2>\n<ul>\n<li>sed 命令是一个非常好用的对行操作命令，其格式如下：</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sed  - 选项   &#39; 操作字符串 &#39;  &#x2F;&#x2F; 无选项时默认带 - e，即直接执行操作字符串</pre></td></tr></table></figure><ul>\n<li>sed 命令的选项和含义：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n</td>\n<td>安静模式，只列出处理相关行，否则打印所有标准输入数据</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>直接在命令行上列出 sed 操作命令，可省略，后接单引号操作字符串</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>运行文件中的 sed 操作，后接文件名</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>使用扩展的正则语法，否则只支持标准正则</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>直接修改文件内容而不是屏幕输出</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>sed 操作字符串语法</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#39;n1,n2 [function]&#39; &#x2F;&#x2F; 其中 n1 和 n2 指操作范围</pre></td></tr></table></figure><ul>\n<li>function 包括以下几种：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>function</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>add, 空格后接字符串，在指定行的下一行新增一行</td>\n</tr>\n<tr>\n<td>c</td>\n<td>change, 空格后接字符串，将 n1 和 n2 之间的行修改为这一行</td>\n</tr>\n<tr>\n<td>d</td>\n<td>delete，删除这些行</td>\n</tr>\n<tr>\n<td>i</td>\n<td>insert，空格后接字符串，在指定行的上一行新增一行</td>\n</tr>\n<tr>\n<td>p</td>\n<td>print，打印 n1 到 n2 行，一般和 - n 参数一起使用，否则没啥意义</td>\n</tr>\n<tr>\n<td>s</td>\n<td>swap，格式为 s/old/new/g，在 n1 和 n2 之间搜索替换</td>\n</tr>\n</tbody>\n</table>\n<p>例如</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nl</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2，5d'</span>   <span class=\"token comment\">#删除 2-5 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nl</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'1i I am the first'</span>  <span class=\"token comment\">#添加第一行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nl</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> -n <span class=\"token string\">'2,5p'</span> <span class=\"token comment\">#安静模式下输出 2-5 行（不加 - n 会输出所有内容，2-5 行双倍输出） </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> -l /bin/*sh <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/^.*.\\. 1//g'</span>  <span class=\"token comment\">#把所有 bin 目录下带 sh 的信息删除前两字段后打印出来</span></pre></td></tr></table></figure><h2 id=\"awk\"><a class=\"anchor\" href=\"#awk\">#</a> awk</h2>\n<p>就像 cut 相对于 grep 一样，awk 命令相对于 sed 命令也是对每一行的特殊字段进行处理，以行为一次处理单位，以字段为最小处理单位，不同点是，awk 默认以单个或连续的空格和 tab 为分隔符，并自动给字段分组，awk 基本可以替代 cut，其命令格式如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'条件1&#123;操作1&#125; 条件2&#123;操作2&#125; 条件3&#123;操作3&#125;'</span> filename</pre></td></tr></table></figure><ul>\n<li>这里必须使用单引号。awk 可以配合很多操作，例如：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>last -n <span class=\"token number\">5</span><span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $1\"\\t\"$2&#125;'</span></pre></td></tr></table></figure><ul>\n<li>\n<p>其中 $1 是指由空白符分隔开的第一个字段，后续字段依次，$0 可以表示整个字段</p>\n</li>\n<li>\n<p>除了分段变量，awk 还有三个内置变量：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NF</td>\n<td>每一行的字段数（分别计算）</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>目前是第几行</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>目前的分隔字符，默认是空格</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>awk 允许逻辑运算判定作为条件，逻辑判断方法和 c 语言一致。</p>\n</li>\n<li>\n<p>例如：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/passwd <span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;FS=\":\"&#125; $3&lt;10 &#123;print $1 \"\\t\" $3&#125;'</span></pre></td></tr></table></figure><ul>\n<li>\n<p>这个命令的意思是，选取 passwd 文件中的行，预设定冒号为分隔符，当第三字段值小于 10 时，打印出第一三字段。</p>\n</li>\n<li>\n<p>操作区允许进行逻辑运算，单个操作区允许多条命令用分号隔开，且 awk 中的内置变量不需要 $，只有分段数据需要 $ 加分段号来引用。</p>\n</li>\n<li>\n<p>例如：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> payment.txt <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span>awk <span class=\"token string\">'NR==1&#123;printf \"%10s %10s %10s %10s\\n\",$1,$2,$3,\"total\"&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>>NR>=2&#123;total=$2+$3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>>printf \"%10s %10d %10d %10.2f\\n\",$1,$2,$3,total&#125;'</span></pre></td></tr></table></figure><h1 id=\"xargs\"><a class=\"anchor\" href=\"#xargs\">#</a> xargs</h1>\n<p>xargs 本质上也是管道命令，但和管道的基础功能有着差异。<br />\n还是使用类似的命令进行对比，如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /etc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">ls</span> pass?? <span class=\"token operator\">|</span><span class=\"token function\">xargs</span> <span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root:x:0:0:root:/root:/bin/bash</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bin:x:1:1:bin:/bin:/sbin/nologin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>daemon:x:2:2:daemon:/sbin:/sbin/nologin</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><p>这个例子和上述例子差距就在一个 xargs，这也就是 xargs 的功能，将上一条命令的输出作为下一条命令的参数，而不是像普通管道一样转到下一条命令的标准输入去。</p>\n<h1 id=\"管道和重定向的区别\"><a class=\"anchor\" href=\"#管道和重定向的区别\">#</a> 管道和重定向的区别</h1>\n<p>这两个命令都是对标准输出输入进行改变</p>\n<ul>\n<li>重定向是直接把输出转到文件去，重定向符号后面接文件</li>\n<li>管道后面应该接的是命令，不是文件。</li>\n<li>管道左侧命令的输出作为管道右侧命令的输入</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/bash/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/bash/",
            "title": "section.2 bash学习笔记",
            "date_published": "2021-07-13T08:29:28.000Z",
            "content_html": "<h1 id=\"bash\"><a class=\"anchor\" href=\"#bash\">#</a> bash</h1>\n<ul>\n<li>bash 是 Linux 标准下的 shell，Linux 通过 /etc/passwd 文件里的内容分配 bash 给用户用于工作。</li>\n</ul>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<ul>\n<li>\n<p>变量是 bash 的重要内容，变量默认为字符串类型，所有变量前都需要加 $, 推荐使用 ${} 的形式，以免产生命令歧义。（$ 其实也是一个变量，其值为当前 shell 终端的进程号 PID）</p>\n</li>\n<li>\n<p>变量设置规则</p>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>变量以 &#x3D; 赋值，&#x3D; 两边不能有空格；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量内容若有空格可以用 \\ 转义空格，或者用单双引号圈起来，\\ 用于将特殊字符去除特性；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>变量内容中，双引号中的特殊字符保留特性，单引号中的特殊字符失去特性；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>变量内容中若需要有其他命令的输出结果，需要将命令用 $() 括起来，命令在子 shell 中完成；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量内容中使用的变量可以使用 $&#123;&#125; 括起来后直接拼接，如 PATH&#x3D;$&#123;PATH&#125;:&#x2F;home&#x2F;bin;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>需要将变量传递给子 shell 时需要将该变量声明为环境变量，可以使用 declare -x 或 export；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>一般自设变量使用小写，取消变量使用 unset；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>需要设置数值变量类型时使用 declare -i 声明后赋值，declare 还有一个 - r 是设置只读变量。</pre></td></tr></table></figure><h2 id=\"声明变量\"><a class=\"anchor\" href=\"#声明变量\">#</a> 声明变量</h2>\n<p>在 bash 中我们使用 declare 来显式地声明变量类型，其格式为:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">declare</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>?</pre></td></tr></table></figure><p>选项如下:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-i</td>\n<td>声明为整数类型</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>声明为关联数组，即 map</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>声明为整形数组</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>声明为全局变量</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>声明为只读变量</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>声明为环境变量</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/etc/profile</td>\n<td>系统路径，整体环境配置文件，不建议修改</td>\n</tr>\n<tr>\n<td>~/.bashprofile</td>\n<td>用户首选路径，读取～/.bashrc 后加个人设置</td>\n</tr>\n<tr>\n<td>~/.bashrc</td>\n<td>读取 /etc/bashrc，加入个人 alias 等</td>\n</tr>\n<tr>\n<td>/etc/bashrc</td>\n<td>设置 umask 和 PS1 提示变量，调用 profile.d 下的 sh 脚本</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>一般来说，环境变量修改～/.bash_profile, 偏好设置修改～/.bashrc, 但也可以在.bashrc 中加入环境变量然后 export 出去。</li>\n<li>修改完配置后需要使用 source 命令（或者小数点 '.', 记得空格）执行配置文件，可以在不重启 bash 的情况下生效。</li>\n</ul>\n<h2 id=\"bash下的通配符\"><a class=\"anchor\" href=\"#bash下的通配符\">#</a> bash 下的通配符</h2>\n<table>\n<thead>\n<tr>\n<th>通配符</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>任意种类和数量的字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>一个任意字符</td>\n</tr>\n<tr>\n<td>[...]</td>\n<td>中括号内取一字符</td>\n</tr>\n<tr>\n<td>[...-...]</td>\n<td>范围内取一字符</td>\n</tr>\n<tr>\n<td>[^...]</td>\n<td>反向选择</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据重定向\"><a class=\"anchor\" href=\"#数据重定向\">#</a> 数据重定向</h2>\n<ul>\n<li>\n<p>bash 中命令执行的输入输出有三种，标准输入代码为 0，标准输出代码为 1, 标准错误输出为 2.</p>\n</li>\n<li>\n<p>特殊字符如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特殊字符</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;</td>\n<td>输入重定向</td>\n</tr>\n<tr>\n<td>1&gt;</td>\n<td>覆盖方式正常输出重定向</td>\n</tr>\n<tr>\n<td>1&gt;&gt;</td>\n<td>累加方式正常输出重定向</td>\n</tr>\n<tr>\n<td>2&gt;</td>\n<td>覆盖方式异常输出重定向</td>\n</tr>\n<tr>\n<td>2&gt;&gt;</td>\n<td>累加方式异常输出重定向</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>&gt; 和 &gt;&gt; 默认为代码 1，即标准输出重定向，代码和重定向符中间没有空格，是一个整体。</p>\n</li>\n<li>\n<p>除了重定向到文件，我们还可以将正常输出和异常输出互相重定向，如：</p>\n</li>\n<li>\n<p>  1&gt;&amp;2, 将正常输出当作错误处理，即将标准输出转为标准错误。</p>\n</li>\n<li>\n<p>  2&gt;&amp;1，将错误输出通过标准输出打印出来，即将标准错误转为标准输出。</p>\n</li>\n</ul>\n<h2 id=\"逻辑判断\"><a class=\"anchor\" href=\"#逻辑判断\">#</a> 逻辑判断</h2>\n<ul>\n<li>命令顺序执行使用；分隔各个命令</li>\n<li>&amp;&amp; 连接：前置命令成功后才能执行后置命令</li>\n<li>|| 连接：前置命令失败后才能执行后置命令</li>\n</ul>\n<p>一般来说，我们的命令结构是：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>command1 <span class=\"token operator\">&amp;&amp;</span> command2 <span class=\"token operator\">||</span> command3</pre></td></tr></table></figure><p>类似于:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> cmd1<span class=\"token operator\">?</span>cmd2<span class=\"token operator\">:</span>cmd3<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h2 id=\"管道命令\"><a class=\"anchor\" href=\"#管道命令\">#</a> 管道命令</h2>\n<ul>\n<li>通过 | 将两条命令连接起来，使得后一条命令使用前一天命令的输出作为输入，相关命令在下一章进行列举。</li>\n</ul>\n<h2 id=\"选取命令\"><a class=\"anchor\" href=\"#选取命令\">#</a> 选取命令</h2>\n<ul>\n<li>\n<p>一般指 cut 命令和 grep 命令，其中管道使用较多；</p>\n</li>\n<li>\n<p>cut 命令是用于对每一行进行处理，参数如下</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>divide, 后接字符，表示将字符串按照该字符分割为若干块，和 - f 一起使用</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>field，后接数字，可用逗号隔开写多个，表示取第几块</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>character，后接 n1-n2，表示范围，意指取每行的 n1 到 n2 之间的字符，n1 和 n2 可缺省其一</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>grep 命令是用于筛选文件输入或标准输入中的行（如果需要筛选目录中的文件或目录，请用 ls 配合通配符查找或通过管道传输给 grep），可以配合基础正则表达式，如果需要使用复杂正则表达式，请使用 egrep，其语法如下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> -options <span class=\"token string\">'查找的字符（串）'</span> filename</pre></td></tr></table></figure><ul>\n<li>其中 filename 经常使用重定向来取前置命令输出，以此完成前一条命令的结果筛选，如：</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>- ls -l | grep &quot;sh&quot; &#x2F;&#x2F; 筛选该目录下的包含 sh 的文件</pre></td></tr></table></figure><ul>\n<li>其中可选参数 - i 忽略大小写，-n 顺便输出行号，-c 计算字符出现次数，-v 反向查询。</li>\n</ul>\n<h2 id=\"排序和计算\"><a class=\"anchor\" href=\"#排序和计算\">#</a> 排序和计算</h2>\n<ul>\n<li>这些命令最后一个参数是文件，同样一般搭配管道使用。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>用途</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sort</td>\n<td>排序</td>\n<td>-f 忽略大小写，-b 忽略开头空格，-u 去除重复，-t 分隔，-kn 取上一参数的第 n 区间排序</td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>去除重复</td>\n<td>-i 忽略大小写，-c 进行计数</td>\n</tr>\n<tr>\n<td>wc</td>\n<td>计算数量</td>\n<td>-l 多少行，-w 计算字母数，-m 计算字符数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"格式化输出\"><a class=\"anchor\" href=\"#格式化输出\">#</a> 格式化输出</h2>\n<ul>\n<li>printf 函数，和 c 语言一样的函数，使用方法如下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'输出格式（使用占位符）'</span> 实际内容</pre></td></tr></table></figure><p>注意，printf 不是管道命令，不能使用管道作为标准输入，实际内容一般采用 $() 的形式以变量方式传递，如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'%10s\\t %5i\\t %8.2f\\n'</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> data.txt<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>此命令意为，将数据以 10 位字符、5 位整数、8 个字符的 2 位小数格式输出，每个数据之间间隔一个 Tab 加一个空格，每份数据另起一行。</p>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/Linux/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/Linux/",
            "title": "section.1 Linux命令",
            "date_published": "2021-07-12T08:29:28.000Z",
            "content_html": "<h1 id=\"linux-目录操作\"><a class=\"anchor\" href=\"#linux-目录操作\">#</a> Linux 目录操作</h1>\n<h2 id=\"路径表示\"><a class=\"anchor\" href=\"#路径表示\">#</a> 路径表示</h2>\n<table>\n<thead>\n<tr></tr>\n</thead>\n<tbody>\n<tr>\n<td>/      绝对路径</td>\n</tr>\n</tbody>\n</table>\n<p>./     当前目录（可省略）<br />\n../    上级目录<br />\n～/     当前用户 home 目录<br />\n～USER/ 此用户 home 目录</p>\n<h2 id=\"ls命令\"><a class=\"anchor\" href=\"#ls命令\">#</a> ls 命令</h2>\n<ul>\n<li>ls 命令不仅可以查看 linux 文件夹包含的文件而且可以查看文件权限 (包括目录、文件夹、文件权限) 查看目录信息等等。</li>\n<li>命令格式为:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> -option <span class=\"token function\">dir</span>   <span class=\"token comment\">#dict 可省略代指本目录，可用通配符查找本目录</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>l</td>\n<td>列出属性</td>\n</tr>\n<tr>\n<td>a</td>\n<td>列出包括隐藏文件的所有文件</td>\n</tr>\n<tr>\n<td>d</td>\n<td>只列出目录本身 (意义不明)</td>\n</tr>\n<tr>\n<td>h</td>\n<td>更易读</td>\n</tr>\n<tr>\n<td>R</td>\n<td>递归列出</td>\n</tr>\n<tr>\n<td>r</td>\n<td>反序列出</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cd命令\"><a class=\"anchor\" href=\"#cd命令\">#</a> cd 命令</h2>\n<ul>\n<li>进入参数所指目录</li>\n</ul>\n<h2 id=\"pwd命令\"><a class=\"anchor\" href=\"#pwd命令\">#</a> pwd 命令</h2>\n<ul>\n<li>列出当前工作目录</li>\n</ul>\n<h2 id=\"mkdir命令\"><a class=\"anchor\" href=\"#mkdir命令\">#</a> mkdir 命令</h2>\n<ul>\n<li>\n<p>创建目录</p>\n</li>\n<li>\n<p>命令格式</p>\n</li>\n</ul>\n<pre><code>mkdir -options dir #选项可缺省\n</code></pre>\n<ul>\n<li>选项如下:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>m</td>\n<td>类似 chmod, 格式例如:mkdir -m 777 mydir</td>\n</tr>\n<tr>\n<td>v</td>\n<td>显示创建信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"rm命令\"><a class=\"anchor\" href=\"#rm命令\">#</a> rm 命令</h2>\n<ul>\n<li>删除命令，后接你要删除的东西，谨慎使用<br />\n其使用参数如下:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>强制删除，没有提示</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>交互式删除，要确认</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归删除，要删除目录时必须加上这个选项</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>详细显示删除信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mv命令\"><a class=\"anchor\" href=\"#mv命令\">#</a> mv 命令</h2>\n<ul>\n<li>本意时用于移动文件，实际也可以用于重命名.<br />\n 其使用参数如下:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b</td>\n<td>如果移动需要覆盖，则先对被覆盖文件备份</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制执行，不会询问</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>交互式移动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cp命令\"><a class=\"anchor\" href=\"#cp命令\">#</a> cp 命令</h2>\n<ul>\n<li>复制粘贴命令</li>\n<li>其格式如下:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> -options <span class=\"token function\">file</span> <span class=\"token function\">dir</span></pre></td></tr></table></figure><p>其常用选项如下:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>t</td>\n<td>可省略，指目标目录</td>\n</tr>\n<tr>\n<td>i</td>\n<td>交互式复制粘贴</td>\n</tr>\n<tr>\n<td>f</td>\n<td>强制复制粘贴</td>\n</tr>\n<tr>\n<td>r</td>\n<td>递归复制</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"touch命令\"><a class=\"anchor\" href=\"#touch命令\">#</a> touch 命令</h2>\n<ul>\n<li>本来是用于修改目录或文件的日期时间，默认为现在时间，多用于创建空文件<br />\n其选项如下:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>指定日期时间</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归更改时间，作用于目录及其下所有文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cat命令\"><a class=\"anchor\" href=\"#cat命令\">#</a> cat 命令</h2>\n<ul>\n<li>用于打印文件中的内容，经常和管道一起使用或使用文件来重定向.</li>\n</ul>\n<p>其参数如下:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-A</td>\n<td>显示所有内容，同 - vET</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>输出行号</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>连续空白行只视作一行</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>每行结尾处显示 $</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>Tab 键显示为 ^|</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示本来不显示的字符，和 ET 一起使用</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"nl命令\"><a class=\"anchor\" href=\"#nl命令\">#</a> nl 命令</h2>\n<ul>\n<li>输出的文件内容自动的加上行号！其默认的结果与 cat -n 有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。</li>\n</ul>\n<pre><code>nl -options filename\n</code></pre>\n<p>其参数如下:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b a</td>\n<td>把所有空白行加行号</td>\n</tr>\n<tr>\n<td>-b t</td>\n<td>(默认) 空行不列出行号</td>\n</tr>\n<tr>\n<td>-n ln</td>\n<td>行号在左边</td>\n</tr>\n<tr>\n<td>-n rn</td>\n<td>行号在右边</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>行号栏占用的位数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"less命令\"><a class=\"anchor\" href=\"#less命令\">#</a> less 命令</h2>\n<ul>\n<li>有一个相似的命令是 more, 不过基本被 less 取代，less 可以随意浏览文件，在打印出来后使用操作命令即可</li>\n</ul>\n<p>常用参数:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>强制打开</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>设设置缓冲区大小</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>文件浏览完自动退出</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>忽略搜索时大小写</td>\n</tr>\n<tr>\n<td>-N</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>连续空行算作一行</td>\n</tr>\n<tr>\n<td>-x n</td>\n<td>把 tab 键显示为 n 个空格</td>\n</tr>\n<tr>\n<td>-o filename</td>\n<td>把显示内容存在指定文件中</td>\n</tr>\n</tbody>\n</table>\n<p>打印后的操作命令 (和 vim 的命令模式操作类似):</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/string</td>\n<td>向下查找字符串</td>\n</tr>\n<tr>\n<td>?string</td>\n<td>向下查找字符串</td>\n</tr>\n<tr>\n<td>n</td>\n<td>重复前一搜索</td>\n</tr>\n<tr>\n<td>N</td>\n<td>反向</td>\n</tr>\n<tr>\n<td>b</td>\n<td>向后翻一页</td>\n</tr>\n<tr>\n<td>d</td>\n<td>向后翻半页</td>\n</tr>\n<tr>\n<td>y</td>\n<td>向前滚动一页</td>\n</tr>\n<tr>\n<td>u</td>\n<td>向前滚动半页</td>\n</tr>\n<tr>\n<td>空格键</td>\n<td>滚动一行</td>\n</tr>\n<tr>\n<td>回车键</td>\n<td>滚动一页</td>\n</tr>\n<tr>\n<td>pageup</td>\n<td>向上翻动一页</td>\n</tr>\n<tr>\n<td>pagedown</td>\n<td>向下翻动一页</td>\n</tr>\n<tr>\n<td>h</td>\n<td>帮助</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>退出 less</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"linux文件检索\"><a class=\"anchor\" href=\"#linux文件检索\">#</a> linux 文件检索</h1>\n<h2 id=\"which命令\"><a class=\"anchor\" href=\"#which命令\">#</a> which 命令</h2>\n<ul>\n<li>\n<p>which 用于检索环境变量中的可执行文件的路径</p>\n</li>\n<li>\n<p>如:</p>\n</li>\n</ul>\n<pre><code>which pwd\n</code></pre>\n<h2 id=\"whereis命令\"><a class=\"anchor\" href=\"#whereis命令\">#</a> whereis 命令</h2>\n<ul>\n<li>whereis 可以定位可执行文件，源代码文件，帮助文件等文件在系统中的位置。这个命令的原理和下面要介绍的 locate 一样，并非暴力检索，而是在系统数据库中检索，这个数据库不是实时更新的，所以会有一定时间上的偏差，如找到已经被删除的文件或找不到新添加的文件.</li>\n<li>命令格式为:</li>\n</ul>\n<pre><code class=\"language-B\">whereis -[bmsu] -[BMS] [目录] 文件名\n</code></pre>\n<p>其参数如下含义:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>b</td>\n<td>检索可执行文件</td>\n</tr>\n<tr>\n<td>m</td>\n<td>检索帮助文件</td>\n</tr>\n<tr>\n<td>s</td>\n<td>检索源代码文件</td>\n</tr>\n<tr>\n<td>u</td>\n<td>检索除上述以外的文件</td>\n</tr>\n<tr>\n<td>B</td>\n<td>提供检索可执行文件的目录</td>\n</tr>\n<tr>\n<td>M</td>\n<td>提供检索帮助文件的目录</td>\n</tr>\n<tr>\n<td>S</td>\n<td>提供检索源代码文件的目录</td>\n</tr>\n</tbody>\n</table>\n<p>上述参数可以省略，默认是从根目录开始找到所有符合文件名的文件.</p>\n<h2 id=\"locate命令\"><a class=\"anchor\" href=\"#locate命令\">#</a> locate 命令</h2>\n<ul>\n<li>\n<p>locate 可以查找所有相关文件，只要相关就会列出来，包括文件名包含参数，文件在找到的目标的目录下等情况.(一般会列出很多)</p>\n</li>\n<li>\n<p>如:</p>\n</li>\n</ul>\n<p>寻找 pwd 相关文件</p>\n<pre><code>locate pwd\n</code></pre>\n<p>搜索 etc 目录下所有 p 开头文件</p>\n<pre><code>locate /etc/m\n</code></pre>\n<h2 id=\"find命令\"><a class=\"anchor\" href=\"#find命令\">#</a> find 命令</h2>\n<ul>\n<li>\n<p>该命令不同于以上两个，是递归的暴力检索，查找目标目录下的相关文件，注意 find 是完全匹配，不模糊搜索，但可以使用通配符.find 命令较为复杂，这里只列出最简单的用法.</p>\n</li>\n<li>\n<p>命令格式:</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> -<span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>搜索路径<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件名表达式<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-print</td>\n<td>将找到的文件打印出来</td>\n</tr>\n<tr>\n<td>-name</td>\n<td>按照名字检索文件</td>\n</tr>\n</tbody>\n</table>\n<p>如:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -name <span class=\"token string\">\".c\"</span>   <span class=\"token comment\">#其实好像 ls 也能做到这种</span></pre></td></tr></table></figure><h1 id=\"压缩命令\"><a class=\"anchor\" href=\"#压缩命令\">#</a> 压缩命令</h1>\n<h2 id=\"tar命令\"><a class=\"anchor\" href=\"#tar命令\">#</a> tar 命令</h2>\n<p>用于调用压缩功能完成压缩文件.</p>\n<p>参数不过多解释，一般使用 - zcvf 压缩，用 zxvf 解压缩.</p>\n<p>z 是压缩选项，不加就只打包不压缩，c 是新建打包文件，x 是从打包文件提取文件，v 是显示操作过程，f 是指定文件</p>\n<p>如:</p>\n<pre><code>tar -zcvf sample.tar.gz sample   #把sample打包成gzip文件\n</code></pre>\n<pre><code>tar -zxvf sample.tar.gz  #把这个gzip包解压\n</code></pre>\n<h2 id=\"gzip命令\"><a class=\"anchor\" href=\"#gzip命令\">#</a> gzip 命令</h2>\n<ul>\n<li>用的不多，原生支持 gz 格式</li>\n</ul>\n<h1 id=\"文件权限\"><a class=\"anchor\" href=\"#文件权限\">#</a> 文件权限</h1>\n<h2 id=\"chmod文件\"><a class=\"anchor\" href=\"#chmod文件\">#</a> chmod 文件</h2>\n<p>改变文件权限，其格式如下:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> mode <span class=\"token function\">file</span></pre></td></tr></table></figure><p>选项如下:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-c</td>\n<td>confirm, 报告改变权限的信息</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制执行，不输出错误</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归处理其子文件</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>view, 执行时显示详细信息</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>mode 的组成公式是:</p>\n</li>\n<li>\n<p>&lt;权限范围&gt;[权限设置]&lt; 权限内容 &gt;</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>权限范围</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>所有用户</td>\n</tr>\n<tr>\n<td>u</td>\n<td>文件的当前用户</td>\n</tr>\n<tr>\n<td>g</td>\n<td>文件的当前用户组</td>\n</tr>\n<tr>\n<td>o</td>\n<td>所有不相关用户</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>权限设置</td>\n<td>含义</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>+</td>\n<td>增加权限</td>\n</tr>\n<tr>\n<td>-</td>\n<td>删除权限</td>\n</tr>\n<tr>\n<td>=</td>\n<td>设置权限</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>权限内容</td>\n<td>含义</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>r</td>\n<td>读权限</td>\n</tr>\n<tr>\n<td>w</td>\n<td>写权限</td>\n</tr>\n<tr>\n<td>x</td>\n<td>执行权限</td>\n</tr>\n</tbody>\n</table>\n<p>例如:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> a+x sample.sh  <span class=\"token comment\">#给与所有用户这个 sh 文件的运行权限</span></pre></td></tr></table></figure><p>mode 还可以以数字形式表示，三个数字分别代指文件所属用户，文件所属用户的用户组，其他用户的权限，有每个数字 rwx 三个位置，将对应权限用 1 表示，没有的权限用 0 表示，得到二进制数字转十进制即可表示一个用户的权限.</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">777</span> sample.sh</pre></td></tr></table></figure><h2 id=\"chown命令\"><a class=\"anchor\" href=\"#chown命令\">#</a> chown 命令</h2>\n<ul>\n<li>改变文件所属用户和群组</li>\n</ul>\n<p>命令格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chown</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> user:group filenames</pre></td></tr></table></figure><p>选项如下:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-c</td>\n<td>显示提示信息</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>忽略错误信息</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归修改权限</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>详细显示处理信息</td>\n</tr>\n</tbody>\n</table>\n<p>例如:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chown</span> -R root:root sample</pre></td></tr></table></figure><h1 id=\"磁盘存储\"><a class=\"anchor\" href=\"#磁盘存储\">#</a> 磁盘存储</h1>\n<h2 id=\"df命令\"><a class=\"anchor\" href=\"#df命令\">#</a> df 命令</h2>\n<p>显示磁盘剩余空间</p>\n<h2 id=\"du命令\"><a class=\"anchor\" href=\"#du命令\">#</a> du 命令</h2>\n<p>显示占用的磁盘空间</p>\n<p>命令格式如下:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">du</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> file<span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数如下:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>显示目录中的所有文件的大小</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>以字节为单位</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>以 kb 为单位</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>以 mb 为单位</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>只显示总计大小</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>推荐使用，使得输出便于阅读</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"内存和进程管理\"><a class=\"anchor\" href=\"#内存和进程管理\">#</a> 内存和进程管理</h1>\n<h2 id=\"top命令\"><a class=\"anchor\" href=\"#top命令\">#</a> top 命令</h2>\n<p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等，-u 指定进程用户，-p 指定进程号</p>\n<h2 id=\"free命令\"><a class=\"anchor\" href=\"#free命令\">#</a> free 命令</h2>\n<p>显示系统使用和空闲的内存情况，包括物理内存、交互区内存 (swap) 和内核缓冲区内存，默认单位 b,-m 使用 mb 单位，-g 使用 gb 单位。</p>\n<h2 id=\"lsof\"><a class=\"anchor\" href=\"#lsof\">#</a> lsof</h2>\n<p>用于查看某特定进程打开的所有文件，以及某文件被哪个进程使用，还有进程打开的端口.<br />\n 命令格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lsof</span> -<span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>列出打开文件存在的进程</td>\n</tr>\n<tr>\n<td>-c &lt;进程名&gt;</td>\n<td>列出指定进程所打开的文件</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>列出 GID 号进程详情</td>\n</tr>\n<tr>\n<td>-d &lt;文件号&gt;</td>\n<td>列出占用该文件号的进程</td>\n</tr>\n<tr>\n<td>+d &lt;目录&gt;</td>\n<td>列出目录下被打开的文件</td>\n</tr>\n<tr>\n<td>+D &lt;目录&gt;</td>\n<td>递归列出目录下被打开的文件</td>\n</tr>\n<tr>\n<td>-n &lt;目录&gt;</td>\n<td>列出使用 NFS 的文件</td>\n</tr>\n<tr>\n<td>-i &lt;条件&gt;</td>\n<td>列出符合条件的进程。（4、6、协议、: 端口、 @ip ）</td>\n</tr>\n<tr>\n<td>-p &lt;进程号&gt;</td>\n<td>列出指定进程号所打开的文件</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>列出 UID 号进程详情</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"linux的网络命令\"><a class=\"anchor\" href=\"#linux的网络命令\">#</a> linux 的网络命令</h1>\n<h2 id=\"ifconfig\"><a class=\"anchor\" href=\"#ifconfig\">#</a> ifconfig</h2>\n<p>用来查看网络配置</p>\n<h2 id=\"ping命令\"><a class=\"anchor\" href=\"#ping命令\">#</a> ping 命令</h2>\n<p>利用 ICMP 协议进行网络状态检测</p>\n<h2 id=\"traceroute命令\"><a class=\"anchor\" href=\"#traceroute命令\">#</a> traceroute 命令</h2>\n<p>后接主机，可以追踪数据包的路由路径</p>\n<h2 id=\"netstat\"><a class=\"anchor\" href=\"#netstat\">#</a> netstat</h2>\n<p>用于显示与 IP、TCP、UDP 和 ICMP 协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p>\n<h1 id=\"linux的ctrl\"><a class=\"anchor\" href=\"#linux的ctrl\">#</a> Linux 的 ctrl</h1>\n<ul>\n<li>快捷键</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>组合</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tab</td>\n<td>自动补全，虽然不是 ctrl 但真的好用</td>\n</tr>\n<tr>\n<td>CTRL+C</td>\n<td>终结终端的命令或进程</td>\n</tr>\n<tr>\n<td>CTRL+Z</td>\n<td>将当前程序送入后台，可以用 fg 重新调出</td>\n</tr>\n<tr>\n<td>CTRL+D</td>\n<td>同 exit 命令，退出当前终端用户的登录，在输入时代表一个二进制数值，同 EOF, 表示输出结束</td>\n</tr>\n<tr>\n<td>CTRL+L</td>\n<td>同 clear 命令，清屏</td>\n</tr>\n<tr>\n<td>CTRL+A</td>\n<td>将光标送到当前行的首部</td>\n</tr>\n<tr>\n<td>CTRL+E</td>\n<td>将光标送到当前行的末尾</td>\n</tr>\n<tr>\n<td>CTRL+U</td>\n<td>将光标到首部的所有内容删除</td>\n</tr>\n<tr>\n<td>CTRL+K</td>\n<td>将这一行清除</td>\n</tr>\n<tr>\n<td>CTRL+W</td>\n<td>将光标前的一个单词清除</td>\n</tr>\n<tr>\n<td>CTRL+Y</td>\n<td>将用前三个命令删除的内容粘贴到光标位置</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>systemctl</li>\n</ul>\n<p>systemctl 是 systemd 的主命令，是整个系统的守护进程，用于管理系统，其进程号 pid=1, 其他所有进程都是它的子进程.</p>\n<p>service 命令同样用于管理系统，其原理是执行 /etc/initial.d 下的命令，而 systemctl 命令兼容 service, 也可以去 init.d 下去找命令 (所以用 systemctl 吧～)</p>\n<p>除了最基本的关机重启等，systemctl 还可以操作系统的任何服务，默认服务后缀名为.service. 我们使用:</p>\n<ul>\n<li>systemctl start nginx    #启动 nginx 服务</li>\n<li>systemctl stop nginx    #停止 nginx 服务</li>\n<li>systemctl restart nginx    #重启 nginx 服务</li>\n<li>systemctl kill nginx    #杀死 nginx 服务及其所有子进程</li>\n<li>systemctl reload nginx    #重新载入 nginx 配置文件</li>\n<li>systemctl enable nginx    #允许开机自启动，即建立符号链接到 systemd 目录中</li>\n<li>systemctl disabled nginx    #禁止开机自启动，即取消符号链接</li>\n<li>systemctl daemon-reload     #重新载入所有修改过的配置文件</li>\n</ul>\n<p>这些配置文件存放在 /usr/lib/systemd/system/ 中，但 systemd 读取的是其在 /etc/systemd/system/ 中读取其符号链接 (大部分), 这些程序可以开机自启.</p>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/unity/part3/",
            "url": "https://echidna-sxh.github.io/unity/part3/",
            "title": "unity入门——实现一个简单的跑酷游戏(3)",
            "date_published": "2020-07-19T08:29:28.000Z",
            "content_html": "<h1 id=\"unity入门实现一个简单的跑酷游戏3\"><a class=\"anchor\" href=\"#unity入门实现一个简单的跑酷游戏3\">#</a> unity 入门 —— 实现一个简单的跑酷游戏 (3)</h1>\n<h2 id=\"场景搭建\"><a class=\"anchor\" href=\"#场景搭建\">#</a> 场景搭建</h2>\n<ul>\n<li>将人物放置于世界坐标的（0，0.1，0），初始道路放置于人物脚下，坐标设置为（0，0，0），水面初始位置设置为（0，-2，-100），可以自行调整，道路与人物在 y 轴上不要 重合即可，当然这些操作也可以放在 Awake 函数中动态进行，但直接摆放显然是最快捷的方法。</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200412140229512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412140410978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412140418686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200412140423863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412140430827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>这时候点击运行游戏大概率什么也看不到，我们需要将摄像机放置于人物面前，按照如下设置其 transform 组件的属性。<img data-src=\"https://img-blog.csdnimg.cn/20200412140256915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>这时点击运行会看到如下画面：<img data-src=\"https://img-blog.csdnimg.cn/20200412140648803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>如果上一篇的动画状态机设置正确的话，人物应该会处于待机动画，而需要这个动画循环的话，只需要将该动画的 Loop Time 和其子属性 Loop Pose 勾选即可，如下。<img data-src=\"https://img-blog.csdnimg.cn/20200412141318378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>那么，到现在场景的摆放基本完成，ui 方面会在下篇说明。</li>\n</ul>\n<h2 id=\"人物控制\"><a class=\"anchor\" href=\"#人物控制\">#</a> 人物控制</h2>\n<ul>\n<li>一款简单的跑酷游戏的人物需要有前进，跳跃，下滑和左右移动的动作，而人物在前进的同时需要摄像头跟随，这里就需要脚本实现了。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*CameraPosition.cs，挂载于 main camera*/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> character<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> beh<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 相机距离</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> ups<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 相机高度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LateUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> character<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">-</span> Vector3<span class=\"token punctuation\">.</span>forward <span class=\"token operator\">*</span> beh <span class=\"token operator\">+</span> Vector3<span class=\"token punctuation\">.</span>up <span class=\"token operator\">*</span> ups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            transform<span class=\"token punctuation\">.</span><span class=\"token function\">LookAt</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>正如第一篇所说，相机的跟随需要 在人物位置改变之后，因此在 LateUpdate 中进行。<br />\n人物进入游戏后设置为奔跑状态。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animator</span> playerAnimator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> framerate<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">CharacterController</span> ctrl<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> ismoving <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isleft <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isright <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> speed <span class=\"token operator\">=</span> <span class=\"token number\">5f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> hard<span class=\"token punctuation\">;</span><span class=\"token comment\">// 难度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Vector2</span> screenaixY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Vector2</span> screenaixX <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">Vector2</span> startpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Vector2</span> endpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isinput <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> angle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Transform</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        pos<span class=\"token operator\">=</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Transform<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        pos<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ctrl <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CharacterController<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        playerAnimator <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Animator<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MOVE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>接下来在 Update 函数中完成其他动作及其音效的触发。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_STANDALONE_WIN</span><span class=\"token comment\">// 如果是 windows 平台</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>UpArrow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>isjumping <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>issliding <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISJUMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>DownArrow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>isjumping <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>issliding <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISSLIDE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>LeftArrow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isright<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            isleft <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">turnleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/*while(transform.position.x >= -f)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         transform.position += new Vector3(-1, 0, 0)*Time.deltaTime*5;*/</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>RightArrow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isleft<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isright<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            isright <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">turnright</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 协程的使用</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_ANDROID</span><span class=\"token comment\">// 如果是 Android 平台</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Input <span class=\"token punctuation\">.</span>touchCount<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>phase <span class=\"token operator\">==</span> TouchPhase<span class=\"token punctuation\">.</span>Began<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                startpos <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>phase<span class=\"token operator\">==</span>TouchPhase<span class=\"token punctuation\">.</span>Ended<span class=\"token operator\">&amp;&amp;</span>Input <span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>phase<span class=\"token operator\">!=</span>TouchPhase<span class=\"token punctuation\">.</span>Canceled<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                endpos <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                isinput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isinput<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">Vector2</span> nowdir <span class=\"token operator\">=</span> endpos <span class=\"token operator\">-</span> startpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> cosvx <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>nowdir<span class=\"token punctuation\">,</span> screenaixX<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> nowdir<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">*</span> screenaixX<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> cosvy <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>nowdir<span class=\"token punctuation\">,</span> screenaixY<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> nowdir<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">*</span> screenaixY<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            angle <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Acos</span><span class=\"token punctuation\">(</span>cosvy<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span>Rad2Deg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cosvx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISJUMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">></span> <span class=\"token number\">45</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;</span> <span class=\"token number\">135</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    isleft <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">turnleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">>=</span> <span class=\"token number\">135</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISSLIDE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISJUMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">></span> <span class=\"token number\">45</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;</span> <span class=\"token number\">135</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    isright <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">turnright</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">>=</span> <span class=\"token number\">135</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                    playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISSLIDE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            isinput <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><ul>\n<li>\n<p>这里补充一下安卓部分的控制，原理是将触屏操作转化为向量，与 x 轴和 y 轴取余弦值，区分出向量所在象限，并同时通过对结果取反三角函数得出角度，如下。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412160339125.png\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412160535138.png\" alt=\"在这里插入图片描述\" /><img data-src=\"https://img-blog.csdnimg.cn/20200412155435572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>上述调用的左移右移动作子函数，在 update 外实现。</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">turnleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> dis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.1f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>dis <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isleft<span class=\"token punctuation\">)</span><span class=\"token comment\">// 保证移动的单位化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            dis <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        isleft <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">turnright</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> dis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2.1f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isright <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>dis <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            dis <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        isright <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>这样就完成了原地的动作释放，这样释放的跳跃和下滑动作是一直进行的，原因是动画状态机的状态一直持续，未能跳转回正常奔跑状态。</li>\n<li>正确操作是需要在动画播放完毕后即使跳转，即在 Update 中每帧检测动画状态：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">jumpend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">slideend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>在 Update 外的子函数：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">jumpend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AnimatorStateInfo</span> info <span class=\"token operator\">=</span> playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentAnimatorStateInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JUMP\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>normalizedTime <span class=\"token operator\">>=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISJUMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">slideend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">AnimatorStateInfo</span> info <span class=\"token operator\">=</span> playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentAnimatorStateInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SLIDE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>normalizedTime <span class=\"token operator\">>=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISSLIDE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>人物前进在 Update 中使用 CharacterController 提供的 move 函数实现。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ismoving<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MOVESPEED\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.8f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            Moveincrease <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span>forward <span class=\"token operator\">*</span> speed <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">.</span>timeScale <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                score <span class=\"token operator\">+=</span> Moveincrease<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            ctrl<span class=\"token punctuation\">.</span><span class=\"token function\">Move</span><span class=\"token punctuation\">(</span>Moveincrease<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            speed <span class=\"token operator\">+=</span> <span class=\"token number\">0.005f</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>System<span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>这样就完成了人物动作的完整实现。</p>\n</li>\n<li>\n<p>点击运行，我们就可以对人物进行操作了。</p>\n</li>\n</ul>\n<p>接下来，我们来动态生成道路。</p>\n<ul>\n<li>跑酷游戏以人物的位置为参数生成道路等，于是我们选择在同一脚本的 Update 中实现该功能。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 定义 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> bridge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> wave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> gold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> hurdle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">>=</span> <span class=\"token number\">7.5f</span> <span class=\"token operator\">*</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> z <span class=\"token operator\">=</span> <span class=\"token number\">72f</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> hurdle_x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">-</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> hurdle_y <span class=\"token operator\">=</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> z1 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.75f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> z2 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> z3 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.25f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> goldpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> hurdle_z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> z1<span class=\"token punctuation\">,</span> z2<span class=\"token punctuation\">,</span> z3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 生成道路</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxhurdle<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>hurdle<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>hurdle_x<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hurdle_y<span class=\"token punctuation\">,</span> hurdle_z<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 生成障碍物</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            goldpos <span class=\"token operator\">=</span> hurdle_x<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>gold<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>goldpos<span class=\"token punctuation\">,</span> hurdle_y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hurdle_z<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span><span class=\"token function\">Euler</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            z <span class=\"token operator\">=</span> <span class=\"token number\">72f</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            z1 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.75f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            z2 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            z3 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.25f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            hurdle_z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> z1<span class=\"token punctuation\">,</span> z2<span class=\"token punctuation\">,</span> z3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxhurdle<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>hurdle<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>hurdle_x<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hurdle_y<span class=\"token punctuation\">,</span> hurdle_z<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            z <span class=\"token operator\">=</span> <span class=\"token number\">72f</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            z1 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.75f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            z2 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            z3 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.25f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            hurdle_z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> z1<span class=\"token punctuation\">,</span> z2<span class=\"token punctuation\">,</span> z3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxhurdle<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>hurdle<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>hurdle_x<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hurdle_y<span class=\"token punctuation\">,</span> hurdle_z<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">>=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            wave<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>此时点击运行，会跟随人物生成道路和障碍物，但是人物无法判定碰撞障碍物。</p>\n</li>\n<li>\n<p>CharacterController 提供一个碰撞检测函数 OnControllerColliderHit，这个函数会传递一个 ControllerColliderHit 类的对象作为参数，给出碰撞对象的信息，非常方便。</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnControllerColliderHit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ControllerColliderHit</span> hit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isjumping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Hurdle01(Clone)\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Hurdle02(Clone)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            score <span class=\"token operator\">+=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>issliding <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Hurdle03(Clone)\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Hurdle01(Clone)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            score <span class=\"token operator\">+=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name<span class=\"token operator\">==</span><span class=\"token string\">\"Goldfish(Clone)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            score <span class=\"token operator\">+=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">Transform</span> tf<span class=\"token operator\">=</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Transform<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">fishdisappear</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name<span class=\"token operator\">==</span><span class=\"token string\">\"Ground\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISDEATH\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            gameover <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>利用条件处理各种碰撞，同时将其销毁，减少内存消耗。这样处理的好处就是不需要考虑人物体积和碰撞体体积等复杂处理，只需要在碰撞时检测是否做出相应动作即可。<br />\n上述函数的子函数：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">fishdisappear</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transform</span> fishtran<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//yield return new WaitForSeconds(0.01f);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        fishtran<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BoxCollider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fishtran<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            fishtran<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fishtran<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>fishtran<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Update 中的死亡判定：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gameover <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">over</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"death\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enabled<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isPlaying<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>inum<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>死亡处理子函数：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">over</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AnimatorStateInfo</span> info <span class=\"token operator\">=</span> playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentAnimatorStateInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token comment\">// Debug.Log(\"normal\" + info.normalizedTime);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISDEATH\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">//gameover = false;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">//Debug.Log(\"timescale\");</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">//yield return new WaitForSeconds ()</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                Time<span class=\"token punctuation\">.</span>timeScale <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Update 中的其他一些处理（由于动画资源并不完全合适，主要用于调整）：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> inum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">AnimatorStateInfo</span> info <span class=\"token operator\">=</span> playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentAnimatorStateInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>normalizedTime <span class=\"token operator\">>=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span> waitaction <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RUN\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> waitaction<span class=\"token punctuation\">)</span> ismoving <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RUN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> playerAnimator<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">1.5f</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>timeScale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JUMP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> playerAnimator<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">5f</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>timeScale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SLIDE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> playerAnimator<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">.</span>timeScale<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>至此，playercontroller 的脚本全部完成，游戏效果如下：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200412155833874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412155840698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412155846951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/unity/part2/",
            "url": "https://echidna-sxh.github.io/unity/part2/",
            "title": "unity入门——实现一个简单的跑酷游戏(2)",
            "date_published": "2020-07-16T08:29:28.000Z",
            "content_html": "<h1 id=\"unity入门实现一个简单的跑酷游戏2\"><a class=\"anchor\" href=\"#unity入门实现一个简单的跑酷游戏2\">#</a> unity 入门 —— 实现一个简单的跑酷游戏 (2)</h1>\n<h2 id=\"资源预制\"><a class=\"anchor\" href=\"#资源预制\">#</a> 资源预制</h2>\n<p>一款跑酷游戏，需要大量重复的场景资源，比如道路、障碍物等，无论是从游戏体验的角度还是运行效率的角度考虑，都不应该全部事先摆好，而是应该由代码随机生成并在使用结束后销毁，这里就需要用到 unity 中很重要的一个概念 ——prefeb（预制体）。<br />\n首先是道路的生成，除了在场景中放入初始道路外，我们要做到在人物移动时在前方生成道路，道路（以及作为背景的水面）是一定需要做成预制体的。</p>\n<ul>\n<li>\n<p>将初始场景如下搭建，道路以及水面大小自行在右侧 inspector 面板的 transform 组件中调整至合适大小。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411121015626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>从 Asset 中拖动模型到 Hierarchy 中设置好 transform 等组件，再将这个 GmaeObject 到 Assets 面板中，选择 original prefeb 即可，如果不需预先布置，在设置好 prefeb 之后可以在 hierarchy 面板中将这个 GameObject 直接删除，没有影响。这里道路只需要 transform 组件即可。预制体的修改会影响它的全部复制体，而复制体的修改不会影响预制体。</p>\n</li>\n<li>\n<p>而障碍物我们需要其带有 collider 属性，以便判定人物是否碰撞到。</p>\n</li>\n<li>\n<p>我们需要三种障碍物，分别可以通过跳跃、下滑或者两者都可通过。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/2020041112305160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/2020041112375494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411123828442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>可以通过 AddComponent-&gt;Physics-&gt;BoxCollider 组件中设置碰撞体的体积来实现不同的碰撞体，注意使用的是局部坐标系 (这种方式相对复杂，需要配合动作同时调整人物体积或位置，本例的实现方式会在下一篇中说明)。</p>\n</li>\n<li>\n<p>- 额外拾取的积分奖励道具也需要碰撞判定，因此同样添加 BoxCollider 属性。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411133909414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>这样我们就可以在脚本中直接方便的使用 instantiate 函数动态生成。</p>\n</li>\n<li>\n<p>函数原型如下：</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> instantiateInWorldSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector3</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Quaternion</span> rotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector3</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Quaternion</span> rotation<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>一般使用第四个，即指定对象、位置、转角生成 GameObject。</li>\n</ul>\n<p>然后是核心的人物资源。</p>\n<ul>\n<li>\n<p>unity 支持的模型格式如下：<img data-src=\"https://img-blog.csdnimg.cn/20200411135559454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>对模型不理解的这边稍微解释一下，网络就是模型的网格，决定模型的形状，不带颜色；材质就是决定模型的表面；动画如果是模型自带的则允许直接使用，骨骼是用来控制网格顶点做运动的。</p>\n</li>\n<li>\n<p>本例采用的模型全部是 FBX 格式，自带动画（毕竟要自己做还是比较麻烦的）。<br />\n模型资源如下，所有资源的下载链接请见上一篇。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411141258129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>这里，我们需要将人物这个 GameObject 设置一些组件，如下：<img data-src=\"https://img-blog.csdnimg.cn/20200411142133177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<strong> Transform</strong>：位置、缩放、旋转等，不多解释；<br />\n<strong>Animator</strong>：动画器，用于播放动画，包括了控制器和骨骼映射两个公有变量，以及是否使用根运动（即模型动作是否作用到其位置上），本例使用特殊的判定方式（下一篇会讲到），因此不需要额外的运算开销，不勾选。控制器变量需要赋值一个.controller 文件，即在 Asset 窗口新建的 Animator controller，动画状态机设置如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411143314676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n图示如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411145121491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n在 Animator 的 Baselayer 窗口里面右击新建状态 -&gt;empty，选择对应动画填入 motion，右击状态添加 transition 连上箭头，点击箭头，在 inspector 面板设置条件转移（变量要先在 parameters 添加，点击 parameters 右下角的小加号就能添加）即可。<br />\n本例中还使用了动画混合树来使起跑动作更加流畅，具体操作为在 Animator 的 Baselayer 窗口里面右击新建状态 -&gt;From New Blend Tree，在 parameters 添加一个 float 类型变量，双击状态在右侧添加动画，参数 thresh 是表示对于该 float 变量的各阶段分别趋向于播放哪个动作。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411161420892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<em>注意，对于每一条连线，即 transition，都有一个 has exit time 选项，该选项是指是否在切换动作时把当前动作做完，勾选即认为动作做完才能转移状态，一般主动动作都是不勾选的，而如果要做被迫击倒等动画，则需要勾选。</em><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411162657278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<strong> PlayerController</strong> 组件，人物动作逻辑的核心脚本，下一章详细介绍。<br />\n<strong>Particle System</strong> 组件，即粒子系统，这个组件一般用于制作一些画面特效，如火焰特效、光环特效等，本组件选项较多，较为琐碎，就不一一介绍了。本例中利用该组件给人物添加了一个蝴蝶环绕的特效，该粒子特效包含在资源包中。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411163808633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<strong> CharacterController</strong> 组件，本组件配合 PlayerController 脚本实现人物的控制功能，公有变量 slope limit：爬坡最陡值，Step Offset：台阶高度；skin width：皮肤厚度（一般用人物卡在那里过不去了可能就是这个数值太小的原因，但太大会产生抖动）；min move distance：最小移动距离，防止人物静止抖动。本组件需要调整胶囊体覆盖人物，自行设置数值，效果如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411164844442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<strong> Audio Source</strong> 音频资源，即人物语音和音效等，可以包括在人物控制逻辑中，在 playercontroller 中调用播放。</p>\n</li>\n</ul>\n<p>那么到这里，资源的准备就差不多结束了。<br />\n下一篇针对核心，人物控制，来谈谈如何实现。</p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/unity/part1/",
            "url": "https://echidna-sxh.github.io/unity/part1/",
            "title": "unity入门——实现一个简单的跑酷游戏(1)",
            "date_published": "2020-07-13T08:29:28.000Z",
            "content_html": "<h1 id=\"unity入门实现一个简单的跑酷游戏1\"><a class=\"anchor\" href=\"#unity入门实现一个简单的跑酷游戏1\">#</a> unity 入门 —— 实现一个简单的跑酷游戏 (1)</h1>\n<h2 id=\"引擎选择方面\"><a class=\"anchor\" href=\"#引擎选择方面\">#</a> 引擎选择方面</h2>\n<ul>\n<li>\n<p>作为一个喜欢游戏的 cs 科班生，大学已经快三年过去却还没有学习多少相关知识，实在有些惭愧。今年的疫情导致寒假超级加倍，那也就没有理由继续怠惰了，正好有一个相关的课设可以选择做游戏，就来记录一下自己团队的学习，以及分享交流一些心得。</p>\n</li>\n<li>\n<p>关于之前一些开发经历的话，除去上大学之前用 war3 的 worldeditor 做的地图，之前是用 krkr2 引擎搭配国内的一个叫做 nvlmaker 的框架做了一款 galgame（当然美术资源都是来自网络，因此有版权问题没有在任何平台发布），剧情原创，改编自本人尝试过写的轻小说，但是剧情没有做完，原因是太过于偏向工作量，并没有功能实现上的困难，于是把前几章的内容做完就直接打包了（会在讲完后放出工程文件链接，仅供学习）。这边推荐想要做 galgame 的去使用上述框架，官网教程还是相对详细的（另外，截止发文的两个月前的最新版本框架似乎有点逻辑上的问题，可以尝试去下之前的版本）。</p>\n</li>\n</ul>\n<p>游戏效果如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410172151794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>那么回到正题，我为什么选择先去熟悉 unity3d，原因无非两点，第一，unity3d 使用广泛，市面上的大量游戏都是用这个引擎作为基础制作的，如炉石传说、王者荣耀等，第二，上手难度没有那么高，这边是指入门难度，实际上要精通还是非常困难的。游戏制作语言为 c#，即使之前并没有相关的学习经历，但是如果有 c++ 的基础，在 unity 里还是基本上没有障碍的。</li>\n</ul>\n<h2 id=\"一款unity游戏需要的基础知识\"><a class=\"anchor\" href=\"#一款unity游戏需要的基础知识\">#</a> 一款 unity 游戏需要的基础知识</h2>\n<ul>\n<li>\n<p>首先，跑酷游戏是相对简单的一个游戏模式，这也是我选择这个作为入门项目的原因。</p>\n</li>\n<li>\n<p>在开始之前，除了 unity 的 gameobject、component 等基本概念外，你必须理解 unity 的主线程运作，因为代码是放在线程里运行的，必须严格遵循生命周期。下图是 unity 官网给出的 unity3d 的主线程。我们来逐一分析一下。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410192147919.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p><strong>Reset</strong> 函数，这个方法是在只编辑器模式下，脚本附着时执行，不需要运行，我觉得严格意义上不算生命周期的一部分，且本例中没有使用。</p>\n</li>\n<li>\n<p><strong>Awake</strong> 函数，有这个方法的脚本在挂载到 gameobject 上后，物体激活时执行且仅执行一次该方法，无论该脚本是否为激活状态。一般会在这个函数里面进行一些全局变量的初始化，比如本例中在此设置帧率等。</p>\n</li>\n<li>\n<p><strong>OnEnable</strong> 函数，在物体或组件被激活时调用，包括初始为激活状态的物体。</p>\n</li>\n<li>\n<p><strong>Start</strong> 函数，在 Awake 后，第一次 update 前调用，可以用来设置用于 Update 函数的初始变量等。</p>\n</li>\n<li>\n<p><strong>FixedUpdate</strong> 函数，按照固定时间间隔执行的函数，不受 timescale（可以理解为时间流速变量）的影响。</p>\n</li>\n<li>\n<p><em>关于 yield 的用法，实际上是 unity 中协程的返回方式，这个后面例子里讲。</em></p>\n</li>\n<li>\n<p><strong>OnTriggerXXX</strong> 函数，该方法只有在物体有 collider 属性并且勾选 Istrigger 选项，物体发送生碰撞时才会调用。</p>\n</li>\n<li>\n<p><strong>OnCollisionXXX</strong> 函数，该方法只有在物体有 collider 属性并且不勾选 Istrigger 选项，物体发送生碰撞时才会调用。</p>\n</li>\n</ul>\n<p><em>由于本例使用 CharacterController 组件作为角色控制，并且本例没有其他需要碰撞判定的地方，故未使用这两个方法，实际上就如线程所示，OnTriggerXXX 函数判定的优先级更高，且会使得该物体不受碰撞的物理引擎控制（会穿过），而不勾选 IsTriggerXXX 而使用 OnCollisionXXX 函数会判定碰撞，应当根据情况选择合适组合用作事件触发器。</em></p>\n<p>具体函数如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410201925233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>\n<p><strong>OnMouseXXX</strong> 函数，该函数是鼠标操作相关函数，原理是射线，调用射线返回的第一个元素，包括 OnMouseDown、OnMouseUp、OnMouseOver 函数，见名知意。</p>\n</li>\n<li>\n<p><strong>Update</strong> 函数，按照每一帧执行一次的函数，由于设备及场景渲染情况影响，帧率会有波动，因此更新频率也会波动，如果要做规律的移动等操作，建议乘上 deltatime（这一帧与上一帧的时间间隔）或者在楼上函数里面进行。本函数受 timescale 的影响，当 timescale 值为 0 时不执行，这边是游戏逻辑的重中之重，包括人物控制、场景生成、逻辑判定等重要操作都在这里进行。</p>\n</li>\n<li>\n<p><strong>LateUpdate</strong> 函数，要理解这个函数的作用首先需要明白，所有的激活脚本中的生命周期的同一函数都是放在一起运行的，所有的 Start 函数运行完了再运行所有的 Fixedupdate 函数，然后是所有的 Update。那么，问题来了，如果有些逻辑功能对两个 Gameobject 的 update 的顺序有要求，那么都放在 Update 里面显然会出问题，Lateupdate 就是来解决这个问题的，这个函数会在所有的 Update 函数运行完成之后运行，本例中，该函数用于摄像头的跟随，保证摄像头在物体移动之后移动。</p>\n</li>\n<li>\n<p><strong>渲染</strong>相关函数未使用到，另外由于 ui 相对简单，本例单纯采用控制 Canvas 下子物体属性方式完成 GUI。</p>\n</li>\n<li>\n<p><strong>OnApplicationPause</strong> 函数，在程序因退回桌面、切换网络等暂停时调用，本例未使用。</p>\n</li>\n<li>\n<p><strong>OnDisable</strong> 函数，和 Onable 函数也一样，都是修改了 SetActive 后立刻执行的方法。</p>\n</li>\n<li>\n<p><strong>OnDestory</strong> 函数，和 OnDisable 函数的区别是，OnDisable 函数可以配合 SetActive 执行多次，而 OnDestory 函数是在脚本或者 GameObject 被销毁后调用，调用完后脚本生命周期结束。</p>\n</li>\n<li>\n<p><strong>OnApplicationQuit</strong> 函数，在程序退出时执行，可以做一些数据保存工作。</p>\n</li>\n<li>\n<p><em>PS：如果要做联机的游戏，那么最好不要利用这个函数来进行断线判断，因为如果进程直接被杀掉就不会执行这个函数，客户端断线情况应由服务端判断。</em></p>\n</li>\n</ul>\n<h2 id=\"做一款跑酷类型游戏需要的资源\"><a class=\"anchor\" href=\"#做一款跑酷类型游戏需要的资源\">#</a> 做一款跑酷类型游戏需要的资源</h2>\n<p>主线程的基础内容大概就是这些，那么准备工作还有一个很重要的方面，那就是美术资源。一款跑酷类型游戏所需要的最少的资源包括：</p>\n<ul>\n<li>\n<p>1. 人物模型及其动画</p>\n</li>\n<li>\n<p>2. 道路</p>\n</li>\n<li>\n<p>3. 各类障碍物</p>\n</li>\n<li>\n<p>4. 奖励道具</p>\n</li>\n<li>\n<p>5.ui 资源</p>\n</li>\n<li>\n<p>6. 音效音频资源</p>\n</li>\n</ul>\n<p>如果是美术大佬可以自行进行绘制 ui，模型方面可以采用门槛相对较低的 blender 建模，然后绑骨制作人物动画，包括站立、走路、奔跑、下滑和跳跃，然后后面用动画状态机和混合树合成流畅的模型动画，这方面就算是初学者也很容易入门，后面会讲到。</p>\n<p>如果没有这个能力，并且出于个人学习需要的话，可以选择一些资源共享网站，或者直接将市面上一些 unity3d 的游戏进行解包提取资源，但这样做的游戏不要以任何方式发布。网站自行寻找，解包方面可以将游戏包在电脑里解压后，用 assetstudio 进行提取，非 unity 开发的游戏解包后如果有一些图片声音资源加密可以考虑用 idapro 静态分析反汇编等方式获取解密算法，或者直接用 010editor 看看文件头找找线索，这边不做赘述。</p>\n<ul>\n<li>本例人物、道路、障碍物、奖励道具模型均来自网络，ui 和音频文件来自我所玩的一款手游。</li>\n</ul>\n<p>游戏效果：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410220606396.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410220630814.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410220801557.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n关于具体的代码实现，我们后面几篇再分析。</p>\n<p>上述资源文件链接（.zip）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXgtWDJkYmJFVjByZ2o2M0xON0pOOVE=\">链接</span> 59te</p>\n<p>pc 端链接（.exe）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUJrUlAtYnEwSjU3YkcyNlZtV0FZWHc=\">链接</span> x1m7</p>\n<p>安卓端链接 (.apk)：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXhqTzc5LWppdkU1dklzZnVmam50V3c=\">链接</span> vv42</p>\n<p>链接失效可以联系补档，qq 2902560683 Echidna</p>\n<p>包含代码的工程文件会在后面几篇更完后放出来。</p>\n",
            "tags": [
                "unity"
            ]
        }
    ]
}