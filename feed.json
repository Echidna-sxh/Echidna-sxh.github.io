{
    "version": "https://jsonfeed.org/version/1",
    "title": "Echidna的小窝",
    "subtitle": "l am the bone of my sword",
    "icon": "https://echidna-sxh.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://echidna-sxh.github.io",
    "items": [
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/shell%20script/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/shell%20script/",
            "title": "section.6 shell脚本",
            "date_published": "2021-07-17T08:29:28.000Z",
            "content_html": "<h1 id=\"shell脚本\"><a class=\"anchor\" href=\"#shell脚本\">#</a> shell 脚本</h1>\n<ul>\n<li>\n<p>shell 脚本之于 Linux，就类似于批处理文件 (.bat) 之于 windows，都是可以 one touch 的情况下执行复数条命令，可以省去重复工作时每次都要输入又臭又长的命令的苦恼，并且其语法和 c 有不少共通之处，拥有基本的数组、循环、条件判断与转移等基本语法功能，可以直接用于编写程序。</p>\n</li>\n<li>\n<p>shell 脚本有着以下的几个注意事项：</p>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>命令自上而下自左向右执行</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>命令参数之间以空格分开，多个空格会被忽略</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>读取到 Enter，就开始试图执行命令</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>注释符号为 #</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>一行命令内容过多可以用 \\ 收尾一行，然后回车，来换行继续写</pre></td></tr></table></figure><p>脚本以 sh 方式执行需要 r 权限，以./ 方式执行需要 x 权限。</p>\n<h2 id=\"程序头\"><a class=\"anchor\" href=\"#程序头\">#</a> 程序头</h2>\n<ul>\n<li>shell 脚本一般使用 vim 编辑，除此之外还有一些应尽事项，如：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>程序的第一行一般是：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#！/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>这句话指定了程序所用的shell，即bash。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>接下来是一些注释内容，包括：程序内容的说明、版本信息、作者信息、日期信息等。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>然后是环境变量的声明，如果用到系统环境变量以外的环境变量，需要设置环境变量，以执行一些外部命令。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>之后是程序主体，完成程序功能。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>最后定义程序退出的返回值，一般定义为0.</pre></td></tr></table></figure><h2 id=\"括号的使用\"><a class=\"anchor\" href=\"#括号的使用\">#</a> 括号的使用</h2>\n<ul>\n<li>shell 脚本的语法里对括号的应用较为复杂，具体有以下几种。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>(cmd)</code></td>\n<td>另开一个子 shell 完成 cmd，可使用父 shell 变量，父 shell 无法使用子 shell 中变量</td>\n</tr>\n<tr>\n<td><code>(cmds)</code></td>\n<td>同上，多条命令用分号隔开</td>\n</tr>\n<tr>\n<td><code>$(cmd)</code></td>\n<td>命令替换，扫描命令后先将 cmd 执行，用其标准输出替换这个表达式原来的位置，再执行总命令</td>\n</tr>\n<tr>\n<td><code>$((exp))</code></td>\n<td>表达式计算，最终结果为一个值，表达式支持 c 语言规则即可，使用较多</td>\n</tr>\n<tr>\n<td><code>array=(a,b,c,d)</code></td>\n<td>数组赋值</td>\n</tr>\n<tr>\n<td><code>((exp))</code></td>\n<td>计算一个表达式，同 [exp]</td>\n</tr>\n<tr>\n<td><code>[exp]</code></td>\n<td>可以使用 ((exp)) 功能外，还可以当作 test 使用</td>\n</tr>\n<tr>\n<td><code>[[exp]]</code></td>\n<td>比 [] 更通用，如可以不使用转义字符</td>\n</tr>\n<tr>\n<td><code>&#123;cmds&#125;</code></td>\n<td>一个代码块，不另开 shell</td>\n</tr>\n<tr>\n<td><code>$&#123;var&#125;</code></td>\n<td>大括号有时可省略，但最好还是加上</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"test和\"><a class=\"anchor\" href=\"#test和\">#</a> test 和 []</h2>\n<ul>\n<li>在需要检测文件相关属性时，我们可以使用 test 或 [] 来进行。注意使用 [] 时，你需要在所有独立含义的字符组之间加上空格，包括中括号闭区间的两端。[] 命令常和 if、while 等一起执行。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">test</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> filename</pre></td></tr></table></figure><ul>\n<li>相关检测选项如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-e</td>\n<td>文件存在返回 true，否则 false</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>是否为文件</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>是否为目录</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>文件是否可写</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>文件是否可读</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>文件是否可执行</td>\n</tr>\n<tr>\n<td>-eq</td>\n<td>(整数) 相等</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>(整数) 不等</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>(整数) 大于</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>(整数) 小于</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>(字符串)</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>and，逻辑 &amp;</td>\n</tr>\n<tr>\n<td>-o</td>\n<td>or 逻辑 |</td>\n</tr>\n<tr>\n<td>!</td>\n<td>not, 逻辑非</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"shell脚本的args和argv\"><a class=\"anchor\" href=\"#shell脚本的args和argv\">#</a> shell 脚本的 &quot;args&quot; 和 &quot;argv&quot;</h2>\n<p>命令可以带有参数，而 shell 脚本接受参数的方式和 c 语言有相似之处。我们可以用 $# 得到参数个数，用 $@代表全部参数，用 $1、$2、$3 等依次代表各个参数。而 $0 可以代表脚本文件的文件名 (可执行文件)。</p>\n<h2 id=\"条件判断ifthen\"><a class=\"anchor\" href=\"#条件判断ifthen\">#</a> 条件判断 (if...then)</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> 条件判断式1 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> 条件判断式2 <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p>注意事项：</p>\n<ul>\n<li>1. 虽然不一定要用中括号作为判断命令，但这样较为方便，注意中括号里的空格，如 [a==b];</li>\n<li>2. 可以使用 [[]] 代替 [] 以获得更好的扩展功能，如正则表达式等；</li>\n<li>3. 可以使用 (()) 代替 [] 以使用复杂表达式；</li>\n</ul>\n<h2 id=\"条件判断caseesac\"><a class=\"anchor\" href=\"#条件判断caseesac\">#</a> 条件判断 (case...esac)</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$var</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token string\">\"string1\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#建议使用双引号把变量内容括起来，这边单走一个右圆括号</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">#这里需要双分号代表一个分支结束 (为了和上面操作的分号区分开)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token string\">\"string2\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    actions</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  *<span class=\"token punctuation\">)</span>         <span class=\"token comment\">#剩余内容一律使用 * 来匹配。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>   <span class=\"token comment\">#匹配不上的退出</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">esac</span>         <span class=\"token comment\">#老规矩</span></pre></td></tr></table></figure><h2 id=\"循环whiledodone\"><a class=\"anchor\" href=\"#循环whiledodone\">#</a> 循环 (while...do...done)</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> 条件判断 <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h2 id=\"循环untildodone\"><a class=\"anchor\" href=\"#循环untildodone\">#</a> 循环 (until...do...done)</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">until</span> <span class=\"token punctuation\">[</span> 条件判断 <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>没什么好说的，各个式子语法规范好就行。</p>\n<h2 id=\"循环fordodone\"><a class=\"anchor\" href=\"#循环fordodone\">#</a> 循环 (for...do...done)</h2>\n<p>for 语句可以使用类似 python 的写法，即 for var in vars 语法。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">var</span> <span class=\"token keyword\">in</span> var1 var2 <span class=\"token punctuation\">..</span>.<span class=\"token comment\">#如果数值连续可以使用 in $(seq n1 n2)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>也可以使用类似 c 的写法，即 for ((初值；条件；增长步长))。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>$max<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  actions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h2 id=\"内置的脚本调试方法\"><a class=\"anchor\" href=\"#内置的脚本调试方法\">#</a> 内置的脚本调试方法</h2>\n<p>即调用 sh 来允许脚本，且加上相应的调试参数。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> -<span class=\"token punctuation\">[</span>nvx<span class=\"token punctuation\">]</span> xxx.sh</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>n</td>\n<td>不执行脚本，只检查语法</td>\n</tr>\n<tr>\n<td>v</td>\n<td>执行脚本前先打印脚本</td>\n</tr>\n<tr>\n<td>x</td>\n<td>将脚本按照运行步骤打印出来</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/RE/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/RE/",
            "title": "section.5 正则表达式",
            "date_published": "2021-07-16T08:29:28.000Z",
            "content_html": "<h1 id=\"re相关\"><a class=\"anchor\" href=\"#re相关\">#</a> RE 相关</h1>\n<ul>\n<li>正则表达式用来描述字符串匹配的复杂规则。</li>\n</ul>\n<h2 id=\"元字符\"><a class=\"anchor\" href=\"#元字符\">#</a> 元字符</h2>\n<ul>\n<li>元字符属于正则表达中的基础字符，代表符合特殊规则的单个字符.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母数字下划线汉字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配所有空白字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>该位置是单词的开始结束</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配字符串的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配字符串的结束</td>\n</tr>\n<tr>\n<td>()</td>\n<td>对括号内的表达式分组，视作整体</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符转义\"><a class=\"anchor\" href=\"#字符转义\">#</a> 字符转义</h2>\n<ul>\n<li>对于可显示的元字符本身，需要作为普通字符查找时，需要使用反斜杠 \\ 进行转义。</li>\n</ul>\n<h2 id=\"字符串重复\"><a class=\"anchor\" href=\"#字符串重复\">#</a> 字符（串）重复</h2>\n<ul>\n<li>重复符是指将该字符前的字符 (串) 重复若干次.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>前置字符（串）重复 &gt;=0 次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>前置字符（串）重复 &gt;=1 次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>前置字符（串）重复 &lt;=1 次</td>\n</tr>\n<tr>\n<td><code>&#123;n&#125;</code></td>\n<td>前置字符（串）重复 n 次</td>\n</tr>\n<tr>\n<td><code>&#123;n1,n2&#125;</code></td>\n<td>前置字符（串）重复 n1 到 n2 次，n2 可缺省</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"自定义字符类\"><a class=\"anchor\" href=\"#自定义字符类\">#</a> 自定义字符类</h2>\n<ul>\n<li>正则表达式中允许使用 [] 来自定义字符类，表示可以从类中取一个字符参与匹配，如元音类 [aeiou]，[0-9], 即 \\d, 小写字母类 [a-z], 大写字母类 [A-Z], 数字字母类 [a-zA-Z0-9]。其中，[a-z][A-Z] 的表示方法基于 LANG=C，否则需要用 [:alpha:][:lower:][:upper:] 来替代。</li>\n</ul>\n<h2 id=\"分支条件\"><a class=\"anchor\" href=\"#分支条件\">#</a> 分支条件</h2>\n<ul>\n<li>用 | 分隔开来，可以表示 or 的含义，如:<br />\n\\d {5}-\\d {4}|\\d {5}, 表示五个数字 - 四个数字，或者五个数字，这个表达式左右不能互换，否则无法匹配 5-4 的后四个数字。</li>\n</ul>\n<h2 id=\"分组\"><a class=\"anchor\" href=\"#分组\">#</a> 分组</h2>\n<ul>\n<li>元字符中的 () 字符用于分组，其原理是每一个 () 都会被看作一个整体，且被分配一个组号，可以用于后向引用。</li>\n<li>分组最基本的功能是，确保表达式中的语义准确，且可以对整个分组使用重复字符 *、+、？和 {}，如 (\\d {2} 0)+, 表示任意两个数字加一个 0，整体重复 1 次以上。</li>\n</ul>\n<h2 id=\"反义\"><a class=\"anchor\" href=\"#反义\">#</a> 反义</h2>\n<ul>\n<li>即反向匹配元字符，一般是正常元字符的大写形式。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>反义元字符</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\W</td>\n<td>匹配不是字母下划线数字汉字的字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配不是空白符的字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配不是数字的字符</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>该位置不是开头或结尾</td>\n</tr>\n<tr>\n<td>[^string]</td>\n<td>匹配不含有组成 string 中字符的字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"后向引用\"><a class=\"anchor\" href=\"#后向引用\">#</a> 后向引用</h2>\n<p>前面提到，用 () 进行分组后，会从 1 开始按照左括号顺序从左到右给该分组一个组号，该分组工作后匹配到的字符 (串) 会被这个组号捕获，这时我们使用反斜杠加组号，就能复现出这个字符 (串)，注意这个不是单纯的重复表达式，而是重复匹配通过的内容，适用于匹配重复单词，如 soso，可以用 \\b (so)\\1\\b 匹配。</p>\n<h2 id=\"零宽断言\"><a class=\"anchor\" href=\"#零宽断言\">#</a> 零宽断言</h2>\n<p>这种语法存在的意义是，查找出现在特定表达式前 (后) 的内容，以？代指自己。</p>\n<ul>\n<li>\n<p>(?=word), 断言自己出现在 word 前面，并取自己作为表达式结果。如，\\bw+(?=ion\\b)，意思是匹配一段字符，如果该字符串以 ion 结尾，则取 ion 前的内容作为匹配对象，action 匹配 act。</p>\n</li>\n<li>\n<p>(?&lt;=word), 断言自己出现在 word 后面，并取自己作为表达式结果。如，(?&lt;=res)\\w+\\b, 取 res 后的内容作为比配对象，restart 匹配 tart。</p>\n</li>\n<li>\n<p>(?!word), 断言自己不会出现在 word 前面，并取自己作为表达式结果。如，\\d {3}(?![a-z]), 匹配三个数字，且这三个数字不能后接一个小写字母，1234 匹配出 123，123z 不能匹配。</p>\n</li>\n<li>\n<p>(?&lt;!word), 断言自己不会出现在 word 后面，如，(?&lt;[A-Z])\\d {2}\\b, 匹配两个数字，且这两个数字不能在大写字母后面，a12 匹配出 12，A12 不能匹配。</p>\n</li>\n</ul>\n<p>总结：断言属于额外条件，是在其他表达式完成匹配后进行的一步判断，将字符串代入？，取判断条件通过的进行匹配，匹配结果不包括断言条件。</p>\n<h2 id=\"贪婪匹配与懒惰匹配\"><a class=\"anchor\" href=\"#贪婪匹配与懒惰匹配\">#</a> 贪婪匹配与懒惰匹配</h2>\n<ul>\n<li>正则表达式默认进行贪婪匹配，即尽可能多的匹配字符，如果我们需要尽可能少的匹配字符，可以在重复符的后面加上？，即 *?、+?、??、{n1,n2}?、{n}?。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/VIM/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/VIM/",
            "title": "section.4 VIM使用",
            "date_published": "2021-07-15T08:29:28.000Z",
            "content_html": "<h1 id=\"vim相关\"><a class=\"anchor\" href=\"#vim相关\">#</a> VIM 相关</h1>\n<h2 id=\"按键说明\"><a class=\"anchor\" href=\"#按键说明\">#</a> 按键说明</h2>\n<ul>\n<li>\n<p>命令模式下：</p>\n<p>数字 + 操作符一般指循环该操作的次数，下面列举一些常用操作，包括移动光标，检索，复制粘贴，撤销重做等。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>箭头</td>\n<td style=\"text-align:center\">光标移动一个单位，前可加数字</td>\n</tr>\n<tr>\n<td>home/end</td>\n<td style=\"text-align:center\">光标移动到该行开头 / 结尾</td>\n</tr>\n<tr>\n<td>gg/G</td>\n<td style=\"text-align:center\">光标移动到第一行 / 最后一行</td>\n</tr>\n<tr>\n<td>数字 + gg</td>\n<td style=\"text-align:center\">光标移动到该数字行第一字符处</td>\n</tr>\n<tr>\n<td>数字 + G</td>\n<td style=\"text-align:center\">同上</td>\n</tr>\n<tr>\n<td>数字 + 回车</td>\n<td style=\"text-align:center\">光标向下 n 行</td>\n</tr>\n<tr>\n<td>/word</td>\n<td style=\"text-align:center\">从光标向下搜索 word</td>\n</tr>\n<tr>\n<td>?word</td>\n<td style=\"text-align:center\">从光标向上搜索 word</td>\n</tr>\n<tr>\n<td>n</td>\n<td style=\"text-align:center\">重复前述查找操作</td>\n</tr>\n<tr>\n<td>N</td>\n<td style=\"text-align:center\">反向重复前述查找操作</td>\n</tr>\n<tr>\n<td>:n1,n2s/old/new/g</td>\n<td style=\"text-align:center\">将 n1 到 n2 行的所有 old 换成 new</td>\n</tr>\n<tr>\n<td>:n1,n2s/old/new/gc</td>\n<td style=\"text-align:center\">c 意指每次替换都要确认</td>\n</tr>\n<tr>\n<td>dd</td>\n<td style=\"text-align:center\">剪切光标行，前可加数字</td>\n</tr>\n<tr>\n<td>yy</td>\n<td style=\"text-align:center\">复制光标行，前可加数字</td>\n</tr>\n<tr>\n<td>p</td>\n<td style=\"text-align:center\">paste, 粘贴到光标下一行</td>\n</tr>\n<tr>\n<td>u</td>\n<td style=\"text-align:center\">undo，撤销上一操作</td>\n</tr>\n<tr>\n<td>ctrl+r</td>\n<td style=\"text-align:center\">redo，重做上一被撤销的操作</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>接下来是文件编辑完后的一些操作，这里的一些命令可以加 &quot;!&quot; 用于强制执行。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:w</td>\n<td style=\"text-align:center\">最终写入，可加！，也可加文件名表示另存为</td>\n</tr>\n<tr>\n<td>:q</td>\n<td style=\"text-align:center\">退出，可加！</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td style=\"text-align:center\">写入后退出，可加！</td>\n</tr>\n<tr>\n<td>:n1,n2 w filename</td>\n<td style=\"text-align:center\">将 n1 到 n2 行之间的内容另存为一个文件</td>\n</tr>\n<tr>\n<td>!command</td>\n<td style=\"text-align:center\">暂时去执行命令行命令，然后回车返回 vim</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>VIM 支持多文件操作，vim file1 file2 即可，相关命令如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:n</td>\n<td style=\"text-align:center\">编辑下一个文件，可加数字</td>\n</tr>\n<tr>\n<td>:N</td>\n<td style=\"text-align:center\">编辑上一个文件，可加数字</td>\n</tr>\n<tr>\n<td>:files</td>\n<td style=\"text-align:center\">列表当前打开的所有文件</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>VIM 支持多窗口操作，相关命令如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:sp</td>\n<td style=\"text-align:center\">将当前文件重新打开一份</td>\n</tr>\n<tr>\n<td>:sp newfile</td>\n<td style=\"text-align:center\">开一个新窗口打开 newfile 文件</td>\n</tr>\n<tr>\n<td>ctrl+w + 上下箭头</td>\n<td style=\"text-align:center\">光标转移大法</td>\n</tr>\n</tbody>\n</table>\n<p>ctrl+w+q 或者 :q 或者 :close 关闭光标所在窗口</p>\n<h2 id=\"vim环境设置\"><a class=\"anchor\" href=\"#vim环境设置\">#</a> vim 环境设置</h2>\n<ul>\n<li>保存在 /etc/vimrc, 不建议直接修改，可以在～/.vimrc 中对用户单独设置。</li>\n</ul>\n<p> 显示行号比较重要，可以加入 set nu 行。</p>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/tube/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/tube/",
            "title": "section.3 管道命令",
            "date_published": "2021-07-14T08:29:28.000Z",
            "content_html": "<h1 id=\"管道命令\"><a class=\"anchor\" href=\"#管道命令\">#</a> 管道命令</h1>\n<ul>\n<li>管道命令是将上一条命令的标准输出转化为下一条命令的标准输入，如：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /etc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">ls</span> pass?? <span class=\"token operator\">|</span> <span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output:passwd</pre></td></tr></table></figure><ul>\n<li>上述命令将列表内容作为标准输入传递给 cat，也就是说在 cat 看来，它执行的命令是：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$cat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">passwd</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output:passwd</pre></td></tr></table></figure><ul>\n<li>而不是：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">cat</span> <span class=\"token function\">passwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>output:<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><p>这一点很重要.</p>\n<ul>\n<li>选取命令 grep 和 cut 内容在上一章，本章主要介绍数据处理的 sed 命令和 awk 命令。</li>\n</ul>\n<h2 id=\"sed命令\"><a class=\"anchor\" href=\"#sed命令\">#</a> sed 命令</h2>\n<ul>\n<li>sed 命令是一个非常好用的对行操作命令，其格式如下：</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sed  - 选项   &#39; 操作字符串 &#39;  &#x2F;&#x2F; 无选项时默认带 - e，即直接执行操作字符串</pre></td></tr></table></figure><ul>\n<li>sed 命令的选项和含义：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n</td>\n<td>安静模式，只列出处理相关行，否则打印所有标准输入数据</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>直接在命令行上列出 sed 操作命令，可省略，后接单引号操作字符串</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>运行文件中的 sed 操作，后接文件名</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>使用扩展的正则语法，否则只支持标准正则</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>直接修改文件内容而不是屏幕输出</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>sed 操作字符串语法</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#39;n1,n2 [function]&#39; &#x2F;&#x2F; 其中 n1 和 n2 指操作范围</pre></td></tr></table></figure><ul>\n<li>function 包括以下几种：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>function</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>add, 空格后接字符串，在指定行的下一行新增一行</td>\n</tr>\n<tr>\n<td>c</td>\n<td>change, 空格后接字符串，将 n1 和 n2 之间的行修改为这一行</td>\n</tr>\n<tr>\n<td>d</td>\n<td>delete，删除这些行</td>\n</tr>\n<tr>\n<td>i</td>\n<td>insert，空格后接字符串，在指定行的上一行新增一行</td>\n</tr>\n<tr>\n<td>p</td>\n<td>print，打印 n1 到 n2 行，一般和 - n 参数一起使用，否则没啥意义</td>\n</tr>\n<tr>\n<td>s</td>\n<td>swap，格式为 s/old/new/g，在 n1 和 n2 之间搜索替换</td>\n</tr>\n</tbody>\n</table>\n<p>例如</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nl</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'2，5d'</span>   <span class=\"token comment\">#删除 2-5 行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nl</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'1i I am the first'</span>  <span class=\"token comment\">#添加第一行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nl</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> -n <span class=\"token string\">'2,5p'</span> <span class=\"token comment\">#安静模式下输出 2-5 行（不加 - n 会输出所有内容，2-5 行双倍输出） </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span> -l /bin/*sh <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/^.*.\\. 1//g'</span>  <span class=\"token comment\">#把所有 bin 目录下带 sh 的信息删除前两字段后打印出来</span></pre></td></tr></table></figure><h2 id=\"awk\"><a class=\"anchor\" href=\"#awk\">#</a> awk</h2>\n<p>就像 cut 相对于 grep 一样，awk 命令相对于 sed 命令也是对每一行的特殊字段进行处理，以行为一次处理单位，以字段为最小处理单位，不同点是，awk 默认以单个或连续的空格和 tab 为分隔符，并自动给字段分组，awk 基本可以替代 cut，其命令格式如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'条件1&#123;操作1&#125; 条件2&#123;操作2&#125; 条件3&#123;操作3&#125;'</span> filename</pre></td></tr></table></figure><ul>\n<li>这里必须使用单引号。awk 可以配合很多操作，例如：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>last -n <span class=\"token number\">5</span><span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $1\"\\t\"$2&#125;'</span></pre></td></tr></table></figure><ul>\n<li>\n<p>其中 $1 是指由空白符分隔开的第一个字段，后续字段依次，$0 可以表示整个字段</p>\n</li>\n<li>\n<p>除了分段变量，awk 还有三个内置变量：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NF</td>\n<td>每一行的字段数（分别计算）</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>目前是第几行</td>\n</tr>\n<tr>\n<td>FS</td>\n<td>目前的分隔字符，默认是空格</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>awk 允许逻辑运算判定作为条件，逻辑判断方法和 c 语言一致。</p>\n</li>\n<li>\n<p>例如：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/passwd <span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">'BEGIN&#123;FS=\":\"&#125; $3&lt;10 &#123;print $1 \"\\t\" $3&#125;'</span></pre></td></tr></table></figure><ul>\n<li>\n<p>这个命令的意思是，选取 passwd 文件中的行，预设定冒号为分隔符，当第三字段值小于 10 时，打印出第一三字段。</p>\n</li>\n<li>\n<p>操作区允许进行逻辑运算，单个操作区允许多条命令用分号隔开，且 awk 中的内置变量不需要 $，只有分段数据需要 $ 加分段号来引用。</p>\n</li>\n<li>\n<p>例如：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> payment.txt <span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span>awk <span class=\"token string\">'NR==1&#123;printf \"%10s %10s %10s %10s\\n\",$1,$2,$3,\"total\"&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>>NR>=2&#123;total=$2+$3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>>printf \"%10s %10d %10d %10.2f\\n\",$1,$2,$3,total&#125;'</span></pre></td></tr></table></figure><h1 id=\"xargs\"><a class=\"anchor\" href=\"#xargs\">#</a> xargs</h1>\n<p>xargs 本质上也是管道命令，但和管道的基础功能有着差异。<br />\n还是使用类似的命令进行对比，如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token builtin class-name\">cd</span> /etc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">ls</span> pass?? <span class=\"token operator\">|</span><span class=\"token function\">xargs</span> <span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>output:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>root:x:0:0:root:/root:/bin/bash</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bin:x:1:1:bin:/bin:/sbin/nologin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>daemon:x:2:2:daemon:/sbin:/sbin/nologin</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><p>这个例子和上述例子差距就在一个 xargs，这也就是 xargs 的功能，将上一条命令的输出作为下一条命令的参数，而不是像普通管道一样转到下一条命令的标准输入去。</p>\n<h1 id=\"管道和重定向的区别\"><a class=\"anchor\" href=\"#管道和重定向的区别\">#</a> 管道和重定向的区别</h1>\n<p>这两个命令都是对标准输出输入进行改变</p>\n<ul>\n<li>重定向是直接把输出转到文件去，重定向符号后面接文件</li>\n<li>管道后面应该接的是命令，不是文件。</li>\n<li>管道左侧命令的输出作为管道右侧命令的输入</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/bash/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/bash/",
            "title": "section.2 bash学习笔记",
            "date_published": "2021-07-13T08:29:28.000Z",
            "content_html": "<h1 id=\"bash\"><a class=\"anchor\" href=\"#bash\">#</a> bash</h1>\n<ul>\n<li>bash 是 Linux 标准下的 shell，Linux 通过 /etc/passwd 文件里的内容分配 bash 给用户用于工作。</li>\n</ul>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<ul>\n<li>\n<p>变量是 bash 的重要内容，变量默认为字符串类型，所有变量前都需要加 $, 推荐使用 ${} 的形式，以免产生命令歧义。（$ 其实也是一个变量，其值为当前 shell 终端的进程号 PID）</p>\n</li>\n<li>\n<p>变量设置规则</p>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>变量以 &#x3D; 赋值，&#x3D; 两边不能有空格；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>变量内容若有空格可以用 \\ 转义空格，或者用单双引号圈起来，\\ 用于将特殊字符去除特性；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>变量内容中，双引号中的特殊字符保留特性，单引号中的特殊字符失去特性；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>变量内容中若需要有其他命令的输出结果，需要将命令用 $() 括起来，命令在子 shell 中完成；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>变量内容中使用的变量可以使用 $&#123;&#125; 括起来后直接拼接，如 PATH&#x3D;$&#123;PATH&#125;:&#x2F;home&#x2F;bin;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>需要将变量传递给子 shell 时需要将该变量声明为环境变量，可以使用 declare -x 或 export；</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>一般自设变量使用小写，取消变量使用 unset；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>需要设置数值变量类型时使用 declare -i 声明后赋值，declare 还有一个 - r 是设置只读变量。</pre></td></tr></table></figure><h2 id=\"声明变量\"><a class=\"anchor\" href=\"#声明变量\">#</a> 声明变量</h2>\n<p>在 bash 中我们使用 declare 来显式地声明变量类型，其格式为:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">declare</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span>?</pre></td></tr></table></figure><p>选项如下:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-i</td>\n<td>声明为整数类型</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>声明为关联数组，即 map</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>声明为整形数组</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>声明为全局变量</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>声明为只读变量</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>声明为环境变量</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<table>\n<thead>\n<tr>\n<th>文件</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/etc/profile</td>\n<td>系统路径，整体环境配置文件，不建议修改</td>\n</tr>\n<tr>\n<td>~/.bashprofile</td>\n<td>用户首选路径，读取～/.bashrc 后加个人设置</td>\n</tr>\n<tr>\n<td>~/.bashrc</td>\n<td>读取 /etc/bashrc，加入个人 alias 等</td>\n</tr>\n<tr>\n<td>/etc/bashrc</td>\n<td>设置 umask 和 PS1 提示变量，调用 profile.d 下的 sh 脚本</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>一般来说，环境变量修改～/.bash_profile, 偏好设置修改～/.bashrc, 但也可以在.bashrc 中加入环境变量然后 export 出去。</li>\n<li>修改完配置后需要使用 source 命令（或者小数点 '.', 记得空格）执行配置文件，可以在不重启 bash 的情况下生效。</li>\n</ul>\n<h2 id=\"bash下的通配符\"><a class=\"anchor\" href=\"#bash下的通配符\">#</a> bash 下的通配符</h2>\n<table>\n<thead>\n<tr>\n<th>通配符</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>任意种类和数量的字符</td>\n</tr>\n<tr>\n<td>?</td>\n<td>一个任意字符</td>\n</tr>\n<tr>\n<td>[...]</td>\n<td>中括号内取一字符</td>\n</tr>\n<tr>\n<td>[...-...]</td>\n<td>范围内取一字符</td>\n</tr>\n<tr>\n<td>[^...]</td>\n<td>反向选择</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据重定向\"><a class=\"anchor\" href=\"#数据重定向\">#</a> 数据重定向</h2>\n<ul>\n<li>\n<p>bash 中命令执行的输入输出有三种，标准输入代码为 0，标准输出代码为 1, 标准错误输出为 2.</p>\n</li>\n<li>\n<p>特殊字符如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>特殊字符</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;</td>\n<td>输入重定向</td>\n</tr>\n<tr>\n<td>1&gt;</td>\n<td>覆盖方式正常输出重定向</td>\n</tr>\n<tr>\n<td>1&gt;&gt;</td>\n<td>累加方式正常输出重定向</td>\n</tr>\n<tr>\n<td>2&gt;</td>\n<td>覆盖方式异常输出重定向</td>\n</tr>\n<tr>\n<td>2&gt;&gt;</td>\n<td>累加方式异常输出重定向</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>&gt; 和 &gt;&gt; 默认为代码 1，即标准输出重定向，代码和重定向符中间没有空格，是一个整体。</p>\n</li>\n<li>\n<p>除了重定向到文件，我们还可以将正常输出和异常输出互相重定向，如：</p>\n</li>\n<li>\n<p>  1&gt;&amp;2, 将正常输出当作错误处理，即将标准输出转为标准错误。</p>\n</li>\n<li>\n<p>  2&gt;&amp;1，将错误输出通过标准输出打印出来，即将标准错误转为标准输出。</p>\n</li>\n</ul>\n<h2 id=\"逻辑判断\"><a class=\"anchor\" href=\"#逻辑判断\">#</a> 逻辑判断</h2>\n<ul>\n<li>命令顺序执行使用；分隔各个命令</li>\n<li>&amp;&amp; 连接：前置命令成功后才能执行后置命令</li>\n<li>|| 连接：前置命令失败后才能执行后置命令</li>\n</ul>\n<p>一般来说，我们的命令结构是：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>command1 <span class=\"token operator\">&amp;&amp;</span> command2 <span class=\"token operator\">||</span> command3</pre></td></tr></table></figure><p>类似于:</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> cmd1<span class=\"token operator\">?</span>cmd2<span class=\"token operator\">:</span>cmd3<span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h2 id=\"管道命令\"><a class=\"anchor\" href=\"#管道命令\">#</a> 管道命令</h2>\n<ul>\n<li>通过 | 将两条命令连接起来，使得后一条命令使用前一天命令的输出作为输入，相关命令在下一章进行列举。</li>\n</ul>\n<h2 id=\"选取命令\"><a class=\"anchor\" href=\"#选取命令\">#</a> 选取命令</h2>\n<ul>\n<li>\n<p>一般指 cut 命令和 grep 命令，其中管道使用较多；</p>\n</li>\n<li>\n<p>cut 命令是用于对每一行进行处理，参数如下</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>divide, 后接字符，表示将字符串按照该字符分割为若干块，和 - f 一起使用</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>field，后接数字，可用逗号隔开写多个，表示取第几块</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>character，后接 n1-n2，表示范围，意指取每行的 n1 到 n2 之间的字符，n1 和 n2 可缺省其一</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>grep 命令是用于筛选文件输入或标准输入中的行（如果需要筛选目录中的文件或目录，请用 ls 配合通配符查找或通过管道传输给 grep），可以配合基础正则表达式，如果需要使用复杂正则表达式，请使用 egrep，其语法如下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> -options <span class=\"token string\">'查找的字符（串）'</span> filename</pre></td></tr></table></figure><ul>\n<li>其中 filename 经常使用重定向来取前置命令输出，以此完成前一条命令的结果筛选，如：</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>- ls -l | grep &quot;sh&quot; &#x2F;&#x2F; 筛选该目录下的包含 sh 的文件</pre></td></tr></table></figure><ul>\n<li>其中可选参数 - i 忽略大小写，-n 顺便输出行号，-c 计算字符出现次数，-v 反向查询。</li>\n</ul>\n<h2 id=\"排序和计算\"><a class=\"anchor\" href=\"#排序和计算\">#</a> 排序和计算</h2>\n<ul>\n<li>这些命令最后一个参数是文件，同样一般搭配管道使用。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>用途</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sort</td>\n<td>排序</td>\n<td>-f 忽略大小写，-b 忽略开头空格，-u 去除重复，-t 分隔，-kn 取上一参数的第 n 区间排序</td>\n</tr>\n<tr>\n<td>uniq</td>\n<td>去除重复</td>\n<td>-i 忽略大小写，-c 进行计数</td>\n</tr>\n<tr>\n<td>wc</td>\n<td>计算数量</td>\n<td>-l 多少行，-w 计算字母数，-m 计算字符数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"格式化输出\"><a class=\"anchor\" href=\"#格式化输出\">#</a> 格式化输出</h2>\n<ul>\n<li>printf 函数，和 c 语言一样的函数，使用方法如下：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'输出格式（使用占位符）'</span> 实际内容</pre></td></tr></table></figure><p>注意，printf 不是管道命令，不能使用管道作为标准输入，实际内容一般采用 $() 的形式以变量方式传递，如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">'%10s\\t %5i\\t %8.2f\\n'</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> data.txt<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>此命令意为，将数据以 10 位字符、5 位整数、8 个字符的 2 位小数格式输出，每个数据之间间隔一个 Tab 加一个空格，每份数据另起一行。</p>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/computer-science/Linux/Linux/",
            "url": "https://echidna-sxh.github.io/computer-science/Linux/Linux/",
            "title": "section.1 Linux命令",
            "date_published": "2021-07-12T08:29:28.000Z",
            "content_html": "<h1 id=\"linux-目录操作\"><a class=\"anchor\" href=\"#linux-目录操作\">#</a> Linux 目录操作</h1>\n<h2 id=\"路径表示\"><a class=\"anchor\" href=\"#路径表示\">#</a> 路径表示</h2>\n<table>\n<thead>\n<tr></tr>\n</thead>\n<tbody>\n<tr>\n<td>/      绝对路径</td>\n</tr>\n</tbody>\n</table>\n<p>./     当前目录（可省略）<br />\n../    上级目录<br />\n～/     当前用户 home 目录<br />\n～USER/ 此用户 home 目录</p>\n<h2 id=\"ls命令\"><a class=\"anchor\" href=\"#ls命令\">#</a> ls 命令</h2>\n<ul>\n<li>ls 命令不仅可以查看 linux 文件夹包含的文件而且可以查看文件权限 (包括目录、文件夹、文件权限) 查看目录信息等等。</li>\n<li>命令格式为:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span> -option <span class=\"token function\">dir</span>   <span class=\"token comment\">#dict 可省略代指本目录，可用通配符查找本目录</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>l</td>\n<td>列出属性</td>\n</tr>\n<tr>\n<td>a</td>\n<td>列出包括隐藏文件的所有文件</td>\n</tr>\n<tr>\n<td>d</td>\n<td>只列出目录本身 (意义不明)</td>\n</tr>\n<tr>\n<td>h</td>\n<td>更易读</td>\n</tr>\n<tr>\n<td>R</td>\n<td>递归列出</td>\n</tr>\n<tr>\n<td>r</td>\n<td>反序列出</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cd命令\"><a class=\"anchor\" href=\"#cd命令\">#</a> cd 命令</h2>\n<ul>\n<li>进入参数所指目录</li>\n</ul>\n<h2 id=\"pwd命令\"><a class=\"anchor\" href=\"#pwd命令\">#</a> pwd 命令</h2>\n<ul>\n<li>列出当前工作目录</li>\n</ul>\n<h2 id=\"mkdir命令\"><a class=\"anchor\" href=\"#mkdir命令\">#</a> mkdir 命令</h2>\n<ul>\n<li>\n<p>创建目录</p>\n</li>\n<li>\n<p>命令格式</p>\n</li>\n</ul>\n<pre><code>mkdir -options dir #选项可缺省\n</code></pre>\n<ul>\n<li>选项如下:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>m</td>\n<td>类似 chmod, 格式例如:mkdir -m 777 mydir</td>\n</tr>\n<tr>\n<td>v</td>\n<td>显示创建信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"rm命令\"><a class=\"anchor\" href=\"#rm命令\">#</a> rm 命令</h2>\n<ul>\n<li>删除命令，后接你要删除的东西，谨慎使用<br />\n其使用参数如下:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>强制删除，没有提示</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>交互式删除，要确认</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归删除，要删除目录时必须加上这个选项</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>详细显示删除信息</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mv命令\"><a class=\"anchor\" href=\"#mv命令\">#</a> mv 命令</h2>\n<ul>\n<li>本意时用于移动文件，实际也可以用于重命名.<br />\n 其使用参数如下:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b</td>\n<td>如果移动需要覆盖，则先对被覆盖文件备份</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制执行，不会询问</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>交互式移动</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cp命令\"><a class=\"anchor\" href=\"#cp命令\">#</a> cp 命令</h2>\n<ul>\n<li>复制粘贴命令</li>\n<li>其格式如下:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> -options <span class=\"token function\">file</span> <span class=\"token function\">dir</span></pre></td></tr></table></figure><p>其常用选项如下:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>t</td>\n<td>可省略，指目标目录</td>\n</tr>\n<tr>\n<td>i</td>\n<td>交互式复制粘贴</td>\n</tr>\n<tr>\n<td>f</td>\n<td>强制复制粘贴</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"touch命令\"><a class=\"anchor\" href=\"#touch命令\">#</a> touch 命令</h2>\n<ul>\n<li>本来是用于修改目录或文件的日期时间，默认为现在时间，多用于创建空文件<br />\n其选项如下:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>指定日期时间</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>递归更改时间，作用于目录及其下所有文件</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"cat命令\"><a class=\"anchor\" href=\"#cat命令\">#</a> cat 命令</h2>\n<ul>\n<li>用于打印文件中的内容，经常和管道一起使用或使用文件来重定向.</li>\n</ul>\n<p>其参数如下:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-A</td>\n<td>显示所有内容，同 - vET</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>输出行号</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>连续空白行只视作一行</td>\n</tr>\n<tr>\n<td>-E</td>\n<td>每行结尾处显示 $</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>Tab 键显示为 ^|</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示本来不显示的字符，和 ET 一起使用</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"nl命令\"><a class=\"anchor\" href=\"#nl命令\">#</a> nl 命令</h2>\n<ul>\n<li>输出的文件内容自动的加上行号！其默认的结果与 cat -n 有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。</li>\n</ul>\n<pre><code>nl -options filename\n</code></pre>\n<p>其参数如下:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-b a</td>\n<td>把所有空白行加行号</td>\n</tr>\n<tr>\n<td>-b t</td>\n<td>(默认) 空行不列出行号</td>\n</tr>\n<tr>\n<td>-n ln</td>\n<td>行号在左边</td>\n</tr>\n<tr>\n<td>-n rn</td>\n<td>行号在右边</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>行号栏占用的位数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"less命令\"><a class=\"anchor\" href=\"#less命令\">#</a> less 命令</h2>\n<ul>\n<li>有一个相似的命令是 more, 不过基本被 less 取代，less 可以随意浏览文件，在打印出来后使用操作命令即可</li>\n</ul>\n<p>常用参数:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>强制打开</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>设设置缓冲区大小</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>文件浏览完自动退出</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>忽略搜索时大小写</td>\n</tr>\n<tr>\n<td>-N</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>连续空行算作一行</td>\n</tr>\n<tr>\n<td>-x n</td>\n<td>把 tab 键显示为 n 个空格</td>\n</tr>\n<tr>\n<td>-o filename</td>\n<td>把显示内容存在指定文件中</td>\n</tr>\n</tbody>\n</table>\n<p>打印后的操作命令 (和 vim 的命令模式操作类似):</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/string</td>\n<td>向下查找字符串</td>\n</tr>\n<tr>\n<td>?string</td>\n<td>向下查找字符串</td>\n</tr>\n<tr>\n<td>n</td>\n<td>重复前一搜索</td>\n</tr>\n<tr>\n<td>N</td>\n<td>反向</td>\n</tr>\n<tr>\n<td>b</td>\n<td>向后翻一页</td>\n</tr>\n<tr>\n<td>d</td>\n<td>向后翻半页</td>\n</tr>\n<tr>\n<td>y</td>\n<td>向前滚动一页</td>\n</tr>\n<tr>\n<td>u</td>\n<td>向前滚动半页</td>\n</tr>\n<tr>\n<td>空格键</td>\n<td>滚动一行</td>\n</tr>\n<tr>\n<td>回车键</td>\n<td>滚动一页</td>\n</tr>\n<tr>\n<td>pageup</td>\n<td>向上翻动一页</td>\n</tr>\n<tr>\n<td>pagedown</td>\n<td>向下翻动一页</td>\n</tr>\n<tr>\n<td>h</td>\n<td>帮助</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>退出 less</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"linux文件检索\"><a class=\"anchor\" href=\"#linux文件检索\">#</a> linux 文件检索</h1>\n<h2 id=\"which命令\"><a class=\"anchor\" href=\"#which命令\">#</a> which 命令</h2>\n<ul>\n<li>\n<p>which 用于检索环境变量中的可执行文件的路径</p>\n</li>\n<li>\n<p>如:</p>\n</li>\n</ul>\n<pre><code>which pwd\n</code></pre>\n<h2 id=\"whereis命令\"><a class=\"anchor\" href=\"#whereis命令\">#</a> whereis 命令</h2>\n<ul>\n<li>whereis 可以定位可执行文件，源代码文件，帮助文件等文件在系统中的位置。这个命令的原理和下面要介绍的 locate 一样，并非暴力检索，而是在系统数据库中检索，这个数据库不是实时更新的，所以会有一定时间上的偏差，如找到已经被删除的文件或找不到新添加的文件.</li>\n<li>命令格式为:</li>\n</ul>\n<pre><code class=\"language-B\">whereis -[bmsu] -[BMS] [目录] 文件名\n</code></pre>\n<p>其参数如下含义:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>b</td>\n<td>检索可执行文件</td>\n</tr>\n<tr>\n<td>m</td>\n<td>检索帮助文件</td>\n</tr>\n<tr>\n<td>s</td>\n<td>检索源代码文件</td>\n</tr>\n<tr>\n<td>u</td>\n<td>检索除上述以外的文件</td>\n</tr>\n<tr>\n<td>B</td>\n<td>提供检索可执行文件的目录</td>\n</tr>\n<tr>\n<td>M</td>\n<td>提供检索帮助文件的目录</td>\n</tr>\n<tr>\n<td>S</td>\n<td>提供检索源代码文件的目录</td>\n</tr>\n</tbody>\n</table>\n<p>上述参数可以省略，默认是从根目录开始找到所有符合文件名的文件.</p>\n<h2 id=\"locate命令\"><a class=\"anchor\" href=\"#locate命令\">#</a> locate 命令</h2>\n<ul>\n<li>\n<p>locate 可以查找所有相关文件，只要相关就会列出来，包括文件名包含参数，文件在找到的目标的目录下等情况.(一般会列出很多)</p>\n</li>\n<li>\n<p>如:</p>\n</li>\n</ul>\n<p>寻找 pwd 相关文件</p>\n<pre><code>locate pwd\n</code></pre>\n<p>搜索 etc 目录下所有 p 开头文件</p>\n<pre><code>locate /etc/m\n</code></pre>\n<h2 id=\"find命令\"><a class=\"anchor\" href=\"#find命令\">#</a> find 命令</h2>\n<ul>\n<li>\n<p>该命令不同于以上两个，是递归的暴力检索，查找目标目录下的相关文件，注意 find 是完全匹配，不模糊搜索，但可以使用通配符.find 命令较为复杂，这里只列出最简单的用法.</p>\n</li>\n<li>\n<p>命令格式:</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> -<span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>搜索路径<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>文件名表达式<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-print</td>\n<td>将找到的文件打印出来</td>\n</tr>\n<tr>\n<td>-name</td>\n<td>按照名字检索文件</td>\n</tr>\n</tbody>\n</table>\n<p>如:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -name <span class=\"token string\">\".c\"</span>   <span class=\"token comment\">#其实好像 ls 也能做到这种</span></pre></td></tr></table></figure><h1 id=\"压缩命令\"><a class=\"anchor\" href=\"#压缩命令\">#</a> 压缩命令</h1>\n<h2 id=\"tar命令\"><a class=\"anchor\" href=\"#tar命令\">#</a> tar 命令</h2>\n<p>用于调用压缩功能完成压缩文件.</p>\n<p>参数不过多解释，一般使用 - zcvf 压缩，用 zxvf 解压缩.</p>\n<p>z 是压缩选项，不加就只打包不压缩，c 是新建打包文件，x 是从打包文件提取文件，v 是显示操作过程，f 是指定文件</p>\n<p>如:</p>\n<pre><code>tar -zcvf sample.tar.gz sample   #把sample打包成gzip文件\n</code></pre>\n<pre><code>tar -zxvf sample.tar.gz  #把这个gzip包解压\n</code></pre>\n<h2 id=\"gzip命令\"><a class=\"anchor\" href=\"#gzip命令\">#</a> gzip 命令</h2>\n<ul>\n<li>用的不多，原生支持 gz 格式</li>\n</ul>\n<h1 id=\"文件权限\"><a class=\"anchor\" href=\"#文件权限\">#</a> 文件权限</h1>\n<h2 id=\"chmod文件\"><a class=\"anchor\" href=\"#chmod文件\">#</a> chmod 文件</h2>\n<p>改变文件权限，其格式如下:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> mode <span class=\"token function\">file</span></pre></td></tr></table></figure><p>选项如下:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-c</td>\n<td>confirm, 报告改变权限的信息</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制执行，不输出错误</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归处理其子文件</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>view, 执行时显示详细信息</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>mode 的组成公式是:</p>\n</li>\n<li>\n<p>&lt;权限范围&gt;[权限设置]&lt; 权限内容 &gt;</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>权限范围</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>所有用户</td>\n</tr>\n<tr>\n<td>u</td>\n<td>文件的当前用户</td>\n</tr>\n<tr>\n<td>g</td>\n<td>文件的当前用户组</td>\n</tr>\n<tr>\n<td>o</td>\n<td>所有不相关用户</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>权限设置</td>\n<td>含义</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>+</td>\n<td>增加权限</td>\n</tr>\n<tr>\n<td>-</td>\n<td>删除权限</td>\n</tr>\n<tr>\n<td>=</td>\n<td>设置权限</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>权限内容</td>\n<td>含义</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>w</td>\n<td>写权限</td>\n</tr>\n<tr>\n<td>r</td>\n<td>读权限</td>\n</tr>\n<tr>\n<td>x</td>\n<td>执行权限</td>\n</tr>\n</tbody>\n</table>\n<p>例如:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> a+x sample.sh  <span class=\"token comment\">#给与所有用户这个 sh 文件的运行权限</span></pre></td></tr></table></figure><p>mode 还可以以数字形式表示，三个数字分别代指文件所属用户，文件所属用户的用户组，其他用户的权限，有每个数字 rwx 三个位置，将对应权限用 1 表示，没有的权限用 0 表示，得到二进制数字转十进制即可鸟事一个用户的权限.</p>\n<p>例如:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">777</span> sample.sh</pre></td></tr></table></figure><h2 id=\"chown命令\"><a class=\"anchor\" href=\"#chown命令\">#</a> chown 命令</h2>\n<ul>\n<li>改变文件所属用户和群组</li>\n</ul>\n<p>命令格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chown</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> user:group filenames</pre></td></tr></table></figure><p>选项如下:</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-c</td>\n<td>显示提示信息</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>忽略错误信息</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>递归修改权限</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>详细显示处理信息</td>\n</tr>\n</tbody>\n</table>\n<p>例如:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chown</span> -R root:root sample</pre></td></tr></table></figure><h1 id=\"磁盘存储\"><a class=\"anchor\" href=\"#磁盘存储\">#</a> 磁盘存储</h1>\n<h2 id=\"df命令\"><a class=\"anchor\" href=\"#df命令\">#</a> df 命令</h2>\n<p>显示磁盘剩余空间</p>\n<h2 id=\"du命令\"><a class=\"anchor\" href=\"#du命令\">#</a> du 命令</h2>\n<p>显示占用的磁盘空间</p>\n<p>命令格式如下:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">du</span> -<span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> file<span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数如下:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>显示目录中的所有文件的大小</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>以字节为单位</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>以 kb 为单位</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>以 mb 为单位</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>只显示总计大小</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>推荐使用，使得输出便于阅读</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"内存和进程管理\"><a class=\"anchor\" href=\"#内存和进程管理\">#</a> 内存和进程管理</h1>\n<h2 id=\"top命令\"><a class=\"anchor\" href=\"#top命令\">#</a> top 命令</h2>\n<p>显示当前系统正在执行的进程的相关信息，包括进程 ID、内存占用率、CPU 占用率等，-u 指定进程用户，-p 指定进程号</p>\n<h2 id=\"free命令\"><a class=\"anchor\" href=\"#free命令\">#</a> free 命令</h2>\n<p>显示系统使用和空闲的内存情况，包括物理内存、交互区内存 (swap) 和内核缓冲区内存，默认单位 b,-m 使用 mb 单位，-g 使用 gb 单位。</p>\n<h2 id=\"lsof\"><a class=\"anchor\" href=\"#lsof\">#</a> lsof</h2>\n<p>用于查看某特定进程打开的所有文件，以及某文件被哪个进程使用，还有进程打开的端口.<br />\n 命令格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lsof</span> -<span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-a</td>\n<td>列出打开文件存在的进程</td>\n</tr>\n<tr>\n<td>-c &lt;进程名&gt;</td>\n<td>列出指定进程所打开的文件</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>列出 GID 号进程详情</td>\n</tr>\n<tr>\n<td>-d &lt;文件号&gt;</td>\n<td>列出占用该文件号的进程</td>\n</tr>\n<tr>\n<td>+d &lt;目录&gt;</td>\n<td>列出目录下被打开的文件</td>\n</tr>\n<tr>\n<td>+D &lt;目录&gt;</td>\n<td>递归列出目录下被打开的文件</td>\n</tr>\n<tr>\n<td>-n &lt;目录&gt;</td>\n<td>列出使用 NFS 的文件</td>\n</tr>\n<tr>\n<td>-i &lt;条件&gt;</td>\n<td>列出符合条件的进程。（4、6、协议、: 端口、 @ip ）</td>\n</tr>\n<tr>\n<td>-p &lt;进程号&gt;</td>\n<td>列出指定进程号所打开的文件</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>列出 UID 号进程详情</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"linux的网络命令\"><a class=\"anchor\" href=\"#linux的网络命令\">#</a> linux 的网络命令</h1>\n<h2 id=\"ifconfig\"><a class=\"anchor\" href=\"#ifconfig\">#</a> ifconfig</h2>\n<p>用来查看网络配置</p>\n<h2 id=\"ping命令\"><a class=\"anchor\" href=\"#ping命令\">#</a> ping 命令</h2>\n<p>利用 ICMP 协议进行网络状态检测</p>\n<h2 id=\"traceroute命令\"><a class=\"anchor\" href=\"#traceroute命令\">#</a> traceroute 命令</h2>\n<p>后接主机，可以追踪数据包的路由路径</p>\n<h2 id=\"netstat\"><a class=\"anchor\" href=\"#netstat\">#</a> netstat</h2>\n<p>用于显示与 IP、TCP、UDP 和 ICMP 协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p>\n<h1 id=\"linux的ctrl\"><a class=\"anchor\" href=\"#linux的ctrl\">#</a> Linux 的 ctrl</h1>\n<ul>\n<li>快捷键</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>组合</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tab</td>\n<td>自动补全，虽然不是 ctrl 但真的好用</td>\n</tr>\n<tr>\n<td>CTRL+C</td>\n<td>终结终端的命令或进程</td>\n</tr>\n<tr>\n<td>CTRL+Z</td>\n<td>将当前程序送入后台，可以用 fg 重新调出</td>\n</tr>\n<tr>\n<td>CTRL+D</td>\n<td>同 exit 命令，退出当前终端用户的登录，在输入时代表一个二进制数值，同 EOF, 表示输出结束</td>\n</tr>\n<tr>\n<td>CTRL+L</td>\n<td>同 clear 命令，清屏</td>\n</tr>\n<tr>\n<td>CTRL+A</td>\n<td>将光标送到当前行的首部</td>\n</tr>\n<tr>\n<td>CTRL+E</td>\n<td>将光标送到当前行的末尾</td>\n</tr>\n<tr>\n<td>CTRL+U</td>\n<td>将光标到首部的所有内容删除</td>\n</tr>\n<tr>\n<td>CTRL+K</td>\n<td>将这一行清除</td>\n</tr>\n<tr>\n<td>CTRL+W</td>\n<td>将光标前的一个单词清除</td>\n</tr>\n<tr>\n<td>CTRL+Y</td>\n<td>将用前三个命令删除的内容粘贴到光标位置</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>systemctl</li>\n</ul>\n<p>systemctl 是 systemd 的主命令，是整个系统的守护进程，用于管理系统，其进程号 pid=1, 其他所有进程都是它的子进程.</p>\n<p>service 命令同样用于管理系统，其原理是执行 /etc/initial.d 下的命令，而 systemctl 命令兼容 service, 也可以去 init.d 下去找命令 (所以用 systemctl 吧～)</p>\n<p>除了最基本的关机重启等，systemctl 还可以操作系统的任何服务，默认服务后缀名为.service. 我们使用:</p>\n<ul>\n<li>systemctl start ngnix    #启动 ngnix 服务</li>\n<li>systemctl stop ngnix    #停止 ngnix 服务</li>\n<li>systemctl restart ngnix    #重启 ngnix 服务</li>\n<li>systemctl kill ngnix    #杀死 ngnix 服务及其所有子进程</li>\n<li>systemctl reload ngnix    #重新载入 ngnix 配置文件</li>\n<li>systemctl enable ngnix    #允许开机自启动，即建立符号链接到 systemd 目录中</li>\n<li>systemctl disabled ngnix    #禁止开机自启动，即取消符号链接</li>\n<li>systemctl daemon-reload     #重新载入所有修改过的配置文件</li>\n</ul>\n<p>这些配置文件存放在 /usr/lib/systemd/system/ 中，但 systemd 读取的是其在 /etc/systemd/system/ 中读取其符号链接 (大部分), 这些程序可以开机自启.</p>\n",
            "tags": [
                "计算机科学",
                "linux"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/unity/part3/",
            "url": "https://echidna-sxh.github.io/unity/part3/",
            "title": "unity入门——实现一个简单的跑酷游戏(3)",
            "date_published": "2020-07-19T08:29:28.000Z",
            "content_html": "<h1 id=\"unity入门实现一个简单的跑酷游戏3\"><a class=\"anchor\" href=\"#unity入门实现一个简单的跑酷游戏3\">#</a> unity 入门 —— 实现一个简单的跑酷游戏 (3)</h1>\n<h2 id=\"场景搭建\"><a class=\"anchor\" href=\"#场景搭建\">#</a> 场景搭建</h2>\n<ul>\n<li>将人物放置于世界坐标的（0，0.1，0），初始道路放置于人物脚下，坐标设置为（0，0，0），水面初始位置设置为（0，-2，-100），可以自行调整，道路与人物在 y 轴上不要 重合即可，当然这些操作也可以放在 Awake 函数中动态进行，但直接摆放显然是最快捷的方法。</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200412140229512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412140410978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412140418686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200412140423863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412140430827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>这时候点击运行游戏大概率什么也看不到，我们需要将摄像机放置于人物面前，按照如下设置其 transform 组件的属性。<img data-src=\"https://img-blog.csdnimg.cn/20200412140256915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>这时点击运行会看到如下画面：<img data-src=\"https://img-blog.csdnimg.cn/20200412140648803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>如果上一篇的动画状态机设置正确的话，人物应该会处于待机动画，而需要这个动画循环的话，只需要将该动画的 Loop Time 和其子属性 Loop Pose 勾选即可，如下。<img data-src=\"https://img-blog.csdnimg.cn/20200412141318378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></li>\n<li>那么，到现在场景的摆放基本完成，ui 方面会在下篇说明。</li>\n</ul>\n<h2 id=\"人物控制\"><a class=\"anchor\" href=\"#人物控制\">#</a> 人物控制</h2>\n<ul>\n<li>一款简单的跑酷游戏的人物需要有前进，跳跃，下滑和左右移动的动作，而人物在前进的同时需要摄像头跟随，这里就需要脚本实现了。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*CameraPosition.cs，挂载于 main camera*/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> character<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> beh<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 相机距离</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> ups<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 相机高度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LateUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> character<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">-</span> Vector3<span class=\"token punctuation\">.</span>forward <span class=\"token operator\">*</span> beh <span class=\"token operator\">+</span> Vector3<span class=\"token punctuation\">.</span>up <span class=\"token operator\">*</span> ups<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            transform<span class=\"token punctuation\">.</span><span class=\"token function\">LookAt</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>正如第一篇所说，相机的跟随需要 在人物位置改变之后，因此在 LateUpdate 中进行。<br />\n人物进入游戏后设置为奔跑状态。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Animator</span> playerAnimator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> framerate<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">CharacterController</span> ctrl<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> ismoving <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isleft <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isright <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> speed <span class=\"token operator\">=</span> <span class=\"token number\">5f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> hard<span class=\"token punctuation\">;</span><span class=\"token comment\">// 难度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Vector2</span> screenaixY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Vector2</span> screenaixX <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">Vector2</span> startpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Vector2</span> endpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isinput <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> angle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Transform</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        pos<span class=\"token operator\">=</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Transform<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        pos<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ctrl <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CharacterController<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        playerAnimator <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Animator<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MOVE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>接下来在 Update 函数中完成其他动作及其音效的触发。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_STANDALONE_WIN</span><span class=\"token comment\">// 如果是 windows 平台</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>UpArrow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>isjumping <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>issliding <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISJUMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>DownArrow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>isjumping <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>issliding <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISSLIDE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>LeftArrow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isright<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isleft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            isleft <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">turnleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/*while(transform.position.x >= -f)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         transform.position += new Vector3(-1, 0, 0)*Time.deltaTime*5;*/</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span><span class=\"token function\">GetKeyDown</span><span class=\"token punctuation\">(</span>KeyCode<span class=\"token punctuation\">.</span>RightArrow<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isleft<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isright<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            isright <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">turnright</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 协程的使用</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_ANDROID</span><span class=\"token comment\">// 如果是 Android 平台</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Input <span class=\"token punctuation\">.</span>touchCount<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>phase <span class=\"token operator\">==</span> TouchPhase<span class=\"token punctuation\">.</span>Began<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                startpos <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>phase<span class=\"token operator\">==</span>TouchPhase<span class=\"token punctuation\">.</span>Ended<span class=\"token operator\">&amp;&amp;</span>Input <span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>phase<span class=\"token operator\">!=</span>TouchPhase<span class=\"token punctuation\">.</span>Canceled<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                endpos <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">.</span>touches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                isinput <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isinput<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">Vector2</span> nowdir <span class=\"token operator\">=</span> endpos <span class=\"token operator\">-</span> startpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> cosvx <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>nowdir<span class=\"token punctuation\">,</span> screenaixX<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> nowdir<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">*</span> screenaixX<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> cosvy <span class=\"token operator\">=</span> Vector3<span class=\"token punctuation\">.</span><span class=\"token function\">Dot</span><span class=\"token punctuation\">(</span>nowdir<span class=\"token punctuation\">,</span> screenaixY<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> nowdir<span class=\"token punctuation\">.</span>magnitude <span class=\"token operator\">*</span> screenaixY<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            angle <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Acos</span><span class=\"token punctuation\">(</span>cosvy<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Mathf<span class=\"token punctuation\">.</span>Rad2Deg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cosvx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISJUMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">></span> <span class=\"token number\">45</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;</span> <span class=\"token number\">135</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    isleft <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">turnleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">>=</span> <span class=\"token number\">135</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISSLIDE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;=</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jump\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISJUMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">></span> <span class=\"token number\">45</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;</span> <span class=\"token number\">135</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    isright <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">turnright</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">>=</span> <span class=\"token number\">135</span> <span class=\"token operator\">&amp;&amp;</span> angle <span class=\"token operator\">&lt;</span> <span class=\"token number\">180</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slide\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                    playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISSLIDE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            isinput <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><ul>\n<li>\n<p>这里补充一下安卓部分的控制，原理是将触屏操作转化为向量，与 x 轴和 y 轴取余弦值，区分出向量所在象限，并同时通过对结果取反三角函数得出角度，如下。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412160339125.png\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412160535138.png\" alt=\"在这里插入图片描述\" /><img data-src=\"https://img-blog.csdnimg.cn/20200412155435572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>上述调用的左移右移动作子函数，在 update 外实现。</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">turnleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> dis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">>=</span> <span class=\"token operator\">-</span><span class=\"token number\">2.1f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>dis <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isleft<span class=\"token punctuation\">)</span><span class=\"token comment\">// 保证移动的单位化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            dis <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        isleft <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">turnright</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> dis <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2.1f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isright <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>dis <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            dis <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        isright <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>这样就完成了原地的动作释放，这样释放的跳跃和下滑动作是一直进行的，原因是动画状态机的状态一直持续，未能跳转回正常奔跑状态。</li>\n<li>正确操作是需要在动画播放完毕后即使跳转，即在 Update 中每帧检测动画状态：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">jumpend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">slideend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>在 Update 外的子函数：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">jumpend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AnimatorStateInfo</span> info <span class=\"token operator\">=</span> playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentAnimatorStateInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JUMP\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>normalizedTime <span class=\"token operator\">>=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISJUMP\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            isjumping <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">slideend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">AnimatorStateInfo</span> info <span class=\"token operator\">=</span> playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentAnimatorStateInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SLIDE\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>normalizedTime <span class=\"token operator\">>=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISSLIDE\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            issliding <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>人物前进在 Update 中使用 CharacterController 提供的 move 函数实现。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ismoving<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MOVESPEED\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.8f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            Moveincrease <span class=\"token operator\">=</span> transform<span class=\"token punctuation\">.</span>forward <span class=\"token operator\">*</span> speed <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">.</span>timeScale <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                score <span class=\"token operator\">+=</span> Moveincrease<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            ctrl<span class=\"token punctuation\">.</span><span class=\"token function\">Move</span><span class=\"token punctuation\">(</span>Moveincrease<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            speed <span class=\"token operator\">+=</span> <span class=\"token number\">0.005f</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>System<span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">Pow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>这样就完成了人物动作的完整实现。</p>\n</li>\n<li>\n<p>点击运行，我们就可以对人物进行操作了。</p>\n</li>\n</ul>\n<p>接下来，我们来动态生成道路。</p>\n<ul>\n<li>跑酷游戏以人物的位置为参数生成道路等，于是我们选择在同一脚本的 Update 中实现该功能。</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 定义 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> bridge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> wave<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject</span> gold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">GameObject<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> hurdle<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">>=</span> <span class=\"token number\">7.5f</span> <span class=\"token operator\">*</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> z <span class=\"token operator\">=</span> <span class=\"token number\">72f</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> hurdle_x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">-</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> hurdle_y <span class=\"token operator\">=</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> z1 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.75f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> z2 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> z3 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.25f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> goldpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\"><span class=\"token keyword\">float</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> hurdle_z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> z1<span class=\"token punctuation\">,</span> z2<span class=\"token punctuation\">,</span> z3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 生成道路</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxhurdle<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>hurdle<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>hurdle_x<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hurdle_y<span class=\"token punctuation\">,</span> hurdle_z<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 生成障碍物</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            goldpos <span class=\"token operator\">=</span> hurdle_x<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>gold<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>goldpos<span class=\"token punctuation\">,</span> hurdle_y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hurdle_z<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span><span class=\"token function\">Euler</span><span class=\"token punctuation\">(</span><span class=\"token number\">180</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            z <span class=\"token operator\">=</span> <span class=\"token number\">72f</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            z1 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.75f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            z2 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            z3 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.25f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            hurdle_z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> z1<span class=\"token punctuation\">,</span> z2<span class=\"token punctuation\">,</span> z3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxhurdle<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>hurdle<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>hurdle_x<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hurdle_y<span class=\"token punctuation\">,</span> hurdle_z<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            z <span class=\"token operator\">=</span> <span class=\"token number\">72f</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>bridge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            z1 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.75f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            z2 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.5f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            z3 <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> <span class=\"token number\">0.25f</span> <span class=\"token operator\">*</span> lenth<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            hurdle_z <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> z1<span class=\"token punctuation\">,</span> z2<span class=\"token punctuation\">,</span> z3 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> maxhurdle<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span>hurdle<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span>hurdle_x<span class=\"token punctuation\">[</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> hurdle_y<span class=\"token punctuation\">,</span> hurdle_z<span class=\"token punctuation\">[</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Quaternion<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z <span class=\"token operator\">>=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            wave<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>此时点击运行，会跟随人物生成道路和障碍物，但是人物无法判定碰撞障碍物。</p>\n</li>\n<li>\n<p>CharacterController 提供一个碰撞检测函数 OnControllerColliderHit，这个函数会传递一个 ControllerColliderHit 类的对象作为参数，给出碰撞对象的信息，非常方便。</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnControllerColliderHit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ControllerColliderHit</span> hit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isjumping <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Hurdle01(Clone)\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Hurdle02(Clone)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            score <span class=\"token operator\">+=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>issliding <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Hurdle03(Clone)\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Hurdle01(Clone)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            score <span class=\"token operator\">+=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name<span class=\"token operator\">==</span><span class=\"token string\">\"Goldfish(Clone)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            score <span class=\"token operator\">+=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">Transform</span> tf<span class=\"token operator\">=</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Transform<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">fishdisappear</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span>collider<span class=\"token punctuation\">.</span>name<span class=\"token operator\">==</span><span class=\"token string\">\"Ground\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISDEATH\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            gameover <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>利用条件处理各种碰撞，同时将其销毁，减少内存消耗。这样处理的好处就是不需要考虑人物体积和碰撞体体积等复杂处理，只需要在碰撞时检测是否做出相应动作即可。<br />\n上述函数的子函数：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">fishdisappear</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transform</span> fishtran<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//yield return new WaitForSeconds(0.01f);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        fishtran<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BoxCollider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fishtran<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span>y<span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            fishtran<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fishtran<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">Destroy</span><span class=\"token punctuation\">(</span>fishtran<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Update 中的死亡判定：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gameover <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">StartCoroutine</span><span class=\"token punctuation\">(</span><span class=\"token function\">over</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Load</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioClip<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"death\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enabled<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isPlaying<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>inum<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PlayOneShot</span><span class=\"token punctuation\">(</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>死亡处理子函数：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">over</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AnimatorStateInfo</span> info <span class=\"token operator\">=</span> playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentAnimatorStateInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token comment\">// Debug.Log(\"normal\" + info.normalizedTime);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">SetBool</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISDEATH\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">//gameover = false;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">//Debug.Log(\"timescale\");</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">//yield return new WaitForSeconds ()</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>AudioSource<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                Time<span class=\"token punctuation\">.</span>timeScale <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Update 中的其他一些处理（由于动画资源并不完全合适，主要用于调整）：</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> inum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">AnimatorStateInfo</span> info <span class=\"token operator\">=</span> playerAnimator<span class=\"token punctuation\">.</span><span class=\"token function\">GetCurrentAnimatorStateInfo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>normalizedTime <span class=\"token operator\">>=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span> waitaction <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RUN\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> waitaction<span class=\"token punctuation\">)</span> ismoving <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RUN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> playerAnimator<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">1.5f</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>timeScale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JUMP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> playerAnimator<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> <span class=\"token number\">5f</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>timeScale<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">IsName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SLIDE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> playerAnimator<span class=\"token punctuation\">.</span>speed <span class=\"token operator\">=</span> Time<span class=\"token punctuation\">.</span>timeScale<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>至此，playercontroller 的脚本全部完成，游戏效果如下：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200412155833874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412155840698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200412155846951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/unity/part2/",
            "url": "https://echidna-sxh.github.io/unity/part2/",
            "title": "unity入门——实现一个简单的跑酷游戏(2)",
            "date_published": "2020-07-16T08:29:28.000Z",
            "content_html": "<h1 id=\"unity入门实现一个简单的跑酷游戏2\"><a class=\"anchor\" href=\"#unity入门实现一个简单的跑酷游戏2\">#</a> unity 入门 —— 实现一个简单的跑酷游戏 (2)</h1>\n<h2 id=\"资源预制\"><a class=\"anchor\" href=\"#资源预制\">#</a> 资源预制</h2>\n<p>一款跑酷游戏，需要大量重复的场景资源，比如道路、障碍物等，无论是从游戏体验的角度还是运行效率的角度考虑，都不应该全部事先摆好，而是应该由代码随机生成并在使用结束后销毁，这里就需要用到 unity 中很重要的一个概念 ——prefeb（预制体）。<br />\n首先是道路的生成，除了在场景中放入初始道路外，我们要做到在人物移动时在前方生成道路，道路（以及作为背景的水面）是一定需要做成预制体的。</p>\n<ul>\n<li>\n<p>将初始场景如下搭建，道路以及水面大小自行在右侧 inspector 面板的 transform 组件中调整至合适大小。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411121015626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>从 Asset 中拖动模型到 Hierarchy 中设置好 transform 等组件，再将这个 GmaeObject 到 Assets 面板中，选择 original prefeb 即可，如果不需预先布置，在设置好 prefeb 之后可以在 hierarchy 面板中将这个 GameObject 直接删除，没有影响。这里道路只需要 transform 组件即可。预制体的修改会影响它的全部复制体，而复制体的修改不会影响预制体。</p>\n</li>\n<li>\n<p>而障碍物我们需要其带有 collider 属性，以便判定人物是否碰撞到。</p>\n</li>\n<li>\n<p>我们需要三种障碍物，分别可以通过跳跃、下滑或者两者都可通过。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/2020041112305160.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/2020041112375494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411123828442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>可以通过 AddComponent-&gt;Physics-&gt;BoxCollider 组件中设置碰撞体的体积来实现不同的碰撞体，注意使用的是局部坐标系 (这种方式相对复杂，需要配合动作同时调整人物体积或位置，本例的实现方式会在下一篇中说明)。</p>\n</li>\n<li>\n<p>- 额外拾取的积分奖励道具也需要碰撞判定，因此同样添加 BoxCollider 属性。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411133909414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>这样我们就可以在脚本中直接方便的使用 instantiate 函数动态生成。</p>\n</li>\n<li>\n<p>函数原型如下：</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><figcaption data-lang=\"C#\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> instantiateInWorldSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector3</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Quaternion</span> rotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Object</span> <span class=\"token function\">Instantiate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> original<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector3</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Quaternion</span> rotation<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Transform</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>一般使用第四个，即指定对象、位置、转角生成 GameObject。</li>\n</ul>\n<p>然后是核心的人物资源。</p>\n<ul>\n<li>\n<p>unity 支持的模型格式如下：<img data-src=\"https://img-blog.csdnimg.cn/20200411135559454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>对模型不理解的这边稍微解释一下，网络就是模型的网格，决定模型的形状，不带颜色；材质就是决定模型的表面；动画如果是模型自带的则允许直接使用，骨骼是用来控制网格顶点做运动的。</p>\n</li>\n<li>\n<p>本例采用的模型全部是 FBX 格式，自带动画（毕竟要自己做还是比较麻烦的）。<br />\n模型资源如下，所有资源的下载链接请见上一篇。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411141258129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p>这里，我们需要将人物这个 GameObject 设置一些组件，如下：<img data-src=\"https://img-blog.csdnimg.cn/20200411142133177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<strong> Transform</strong>：位置、缩放、旋转等，不多解释；<br />\n<strong>Animator</strong>：动画器，用于播放动画，包括了控制器和骨骼映射两个公有变量，以及是否使用根运动（即模型动作是否作用到其位置上），本例使用特殊的判定方式（下一篇会讲到），因此不需要额外的运算开销，不勾选。控制器变量需要赋值一个.controller 文件，即在 Asset 窗口新建的 Animator controller，动画状态机设置如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411143314676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n图示如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411145121491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n在 Animator 的 Baselayer 窗口里面右击新建状态 -&gt;empty，选择对应动画填入 motion，右击状态添加 transition 连上箭头，点击箭头，在 inspector 面板设置条件转移（变量要先在 parameters 添加，点击 parameters 右下角的小加号就能添加）即可。<br />\n本例中还使用了动画混合树来使起跑动作更加流畅，具体操作为在 Animator 的 Baselayer 窗口里面右击新建状态 -&gt;From New Blend Tree，在 parameters 添加一个 float 类型变量，双击状态在右侧添加动画，参数 thresh 是表示对于该 float 变量的各阶段分别趋向于播放哪个动作。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411161420892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<em>注意，对于每一条连线，即 transition，都有一个 has exit time 选项，该选项是指是否在切换动作时把当前动作做完，勾选即认为动作做完才能转移状态，一般主动动作都是不勾选的，而如果要做被迫击倒等动画，则需要勾选。</em><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411162657278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<strong> PlayerController</strong> 组件，人物动作逻辑的核心脚本，下一章详细介绍。<br />\n<strong>Particle System</strong> 组件，即粒子系统，这个组件一般用于制作一些画面特效，如火焰特效、光环特效等，本组件选项较多，较为琐碎，就不一一介绍了。本例中利用该组件给人物添加了一个蝴蝶环绕的特效，该粒子特效包含在资源包中。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411163808633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<strong> CharacterController</strong> 组件，本组件配合 PlayerController 脚本实现人物的控制功能，公有变量 slope limit：爬坡最陡值，Step Offset：台阶高度；skin width：皮肤厚度（一般用人物卡在那里过不去了可能就是这个数值太小的原因，但太大会产生抖动）；min move distance：最小移动距离，防止人物静止抖动。本组件需要调整胶囊体覆盖人物，自行设置数值，效果如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200411164844442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\" /><br />\n<strong> Audio Source</strong> 音频资源，即人物语音和音效等，可以包括在人物控制逻辑中，在 playercontroller 中调用播放。</p>\n</li>\n</ul>\n<p>那么到这里，资源的准备就差不多结束了。<br />\n下一篇针对核心，人物控制，来谈谈如何实现。</p>\n",
            "tags": [
                "unity"
            ]
        },
        {
            "id": "https://echidna-sxh.github.io/unity/part1/",
            "url": "https://echidna-sxh.github.io/unity/part1/",
            "title": "unity入门——实现一个简单的跑酷游戏(1)",
            "date_published": "2020-07-13T08:29:28.000Z",
            "content_html": "<h1 id=\"unity入门实现一个简单的跑酷游戏1\"><a class=\"anchor\" href=\"#unity入门实现一个简单的跑酷游戏1\">#</a> unity 入门 —— 实现一个简单的跑酷游戏 (1)</h1>\n<h2 id=\"引擎选择方面\"><a class=\"anchor\" href=\"#引擎选择方面\">#</a> 引擎选择方面</h2>\n<ul>\n<li>\n<p>作为一个喜欢游戏的 cs 科班生，大学已经快三年过去却还没有学习多少相关知识，实在有些惭愧。今年的疫情导致寒假超级加倍，那也就没有理由继续怠惰了，正好有一个相关的课设可以选择做游戏，就来记录一下自己团队的学习，以及分享交流一些心得。</p>\n</li>\n<li>\n<p>关于之前一些开发经历的话，除去上大学之前用 war3 的 worldeditor 做的地图，之前是用 krkr2 引擎搭配国内的一个叫做 nvlmaker 的框架做了一款 galgame（当然美术资源都是来自网络，因此有版权问题没有在任何平台发布），剧情原创，改编自本人尝试过写的轻小说，但是剧情没有做完，原因是太过于偏向工作量，并没有功能实现上的困难，于是把前几章的内容做完就直接打包了（会在讲完后放出工程文件链接，仅供学习）。这边推荐想要做 galgame 的去使用上述框架，官网教程还是相对详细的（另外，截止发文的两个月前的最新版本框架似乎有点逻辑上的问题，可以尝试去下之前的版本）。</p>\n</li>\n</ul>\n<p>游戏效果如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410172151794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>那么回到正题，我为什么选择先去熟悉 unity3d，原因无非两点，第一，unity3d 使用广泛，市面上的大量游戏都是用这个引擎作为基础制作的，如炉石传说、王者荣耀等，第二，上手难度没有那么高，这边是指入门难度，实际上要精通还是非常困难的。游戏制作语言为 c#，即使之前并没有相关的学习经历，但是如果有 c++ 的基础，在 unity 里还是基本上没有障碍的。</li>\n</ul>\n<h2 id=\"一款unity游戏需要的基础知识\"><a class=\"anchor\" href=\"#一款unity游戏需要的基础知识\">#</a> 一款 unity 游戏需要的基础知识</h2>\n<ul>\n<li>\n<p>首先，跑酷游戏是相对简单的一个游戏模式，这也是我选择这个作为入门项目的原因。</p>\n</li>\n<li>\n<p>在开始之前，除了 unity 的 gameobject、component 等基本概念外，你必须理解 unity 的主线程运作，因为代码是放在线程里运行的，必须严格遵循生命周期。下图是 unity 官网给出的 unity3d 的主线程。我们来逐一分析一下。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410192147919.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n</li>\n<li>\n<p><strong>Reset</strong> 函数，这个方法是在只编辑器模式下，脚本附着时执行，不需要运行，我觉得严格意义上不算生命周期的一部分，且本例中没有使用。</p>\n</li>\n<li>\n<p><strong>Awake</strong> 函数，有这个方法的脚本在挂载到 gameobject 上后，物体激活时执行且仅执行一次该方法，无论该脚本是否为激活状态。一般会在这个函数里面进行一些全局变量的初始化，比如本例中在此设置帧率等。</p>\n</li>\n<li>\n<p><strong>OnEnable</strong> 函数，在物体或组件被激活时调用，包括初始为激活状态的物体。</p>\n</li>\n<li>\n<p><strong>Start</strong> 函数，在 Awake 后，第一次 update 前调用，可以用来设置用于 Update 函数的初始变量等。</p>\n</li>\n<li>\n<p><strong>FixedUpdate</strong> 函数，按照固定时间间隔执行的函数，不受 timescale（可以理解为时间流速变量）的影响。</p>\n</li>\n<li>\n<p><em>关于 yield 的用法，实际上是 unity 中协程的返回方式，这个后面例子里讲。</em></p>\n</li>\n<li>\n<p><strong>OnTriggerXXX</strong> 函数，该方法只有在物体有 collider 属性并且勾选 Istrigger 选项，物体发送生碰撞时才会调用。</p>\n</li>\n<li>\n<p><strong>OnCollisionXXX</strong> 函数，该方法只有在物体有 collider 属性并且不勾选 Istrigger 选项，物体发送生碰撞时才会调用。</p>\n</li>\n</ul>\n<p><em>由于本例使用 CharacterController 组件作为角色控制，并且本例没有其他需要碰撞判定的地方，故未使用这两个方法，实际上就如线程所示，OnTriggerXXX 函数判定的优先级更高，且会使得该物体不受碰撞的物理引擎控制（会穿过），而不勾选 IsTriggerXXX 而使用 OnCollisionXXX 函数会判定碰撞，应当根据情况选择合适组合用作事件触发器。</em></p>\n<p>具体函数如下：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410201925233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>\n<p><strong>OnMouseXXX</strong> 函数，该函数是鼠标操作相关函数，原理是射线，调用射线返回的第一个元素，包括 OnMouseDown、OnMouseUp、OnMouseOver 函数，见名知意。</p>\n</li>\n<li>\n<p><strong>Update</strong> 函数，按照每一帧执行一次的函数，由于设备及场景渲染情况影响，帧率会有波动，因此更新频率也会波动，如果要做规律的移动等操作，建议乘上 deltatime（这一帧与上一帧的时间间隔）或者在楼上函数里面进行。本函数受 timescale 的影响，当 timescale 值为 0 时不执行，这边是游戏逻辑的重中之重，包括人物控制、场景生成、逻辑判定等重要操作都在这里进行。</p>\n</li>\n<li>\n<p><strong>LateUpdate</strong> 函数，要理解这个函数的作用首先需要明白，所有的激活脚本中的生命周期的同一函数都是放在一起运行的，所有的 Start 函数运行完了再运行所有的 Fixedupdate 函数，然后是所有的 Update。那么，问题来了，如果有些逻辑功能对两个 Gameobject 的 update 的顺序有要求，那么都放在 Update 里面显然会出问题，Lateupdate 就是来解决这个问题的，这个函数会在所有的 Update 函数运行完成之后运行，本例中，该函数用于摄像头的跟随，保证摄像头在物体移动之后移动。</p>\n</li>\n<li>\n<p><strong>渲染</strong>相关函数未使用到，另外由于 ui 相对简单，本例单纯采用控制 Canvas 下子物体属性方式完成 GUI。</p>\n</li>\n<li>\n<p><strong>OnApplicationPause</strong> 函数，在程序因退回桌面、切换网络等暂停时调用，本例未使用。</p>\n</li>\n<li>\n<p><strong>OnDisable</strong> 函数，和 Onable 函数也一样，都是修改了 SetActive 后立刻执行的方法。</p>\n</li>\n<li>\n<p><strong>OnDestory</strong> 函数，和 OnDisable 函数的区别是，OnDisable 函数可以配合 SetActive 执行多次，而 OnDestory 函数是在脚本或者 GameObject 被销毁后调用，调用完后脚本生命周期结束。</p>\n</li>\n<li>\n<p><strong>OnApplicationQuit</strong> 函数，在程序退出时执行，可以做一些数据保存工作。</p>\n</li>\n<li>\n<p><em>PS：如果要做联机的游戏，那么最好不要利用这个函数来进行断线判断，因为如果进程直接被杀掉就不会执行这个函数，客户端断线情况应由服务端判断。</em></p>\n</li>\n</ul>\n<h2 id=\"做一款跑酷类型游戏需要的资源\"><a class=\"anchor\" href=\"#做一款跑酷类型游戏需要的资源\">#</a> 做一款跑酷类型游戏需要的资源</h2>\n<p>主线程的基础内容大概就是这些，那么准备工作还有一个很重要的方面，那就是美术资源。一款跑酷类型游戏所需要的最少的资源包括：</p>\n<ul>\n<li>\n<p>1. 人物模型及其动画</p>\n</li>\n<li>\n<p>2. 道路</p>\n</li>\n<li>\n<p>3. 各类障碍物</p>\n</li>\n<li>\n<p>4. 奖励道具</p>\n</li>\n<li>\n<p>5.ui 资源</p>\n</li>\n<li>\n<p>6. 音效音频资源</p>\n</li>\n</ul>\n<p>如果是美术大佬可以自行进行绘制 ui，模型方面可以采用门槛相对较低的 blender 建模，然后绑骨制作人物动画，包括站立、走路、奔跑、下滑和跳跃，然后后面用动画状态机和混合树合成流畅的模型动画，这方面就算是初学者也很容易入门，后面会讲到。</p>\n<p>如果没有这个能力，并且出于个人学习需要的话，可以选择一些资源共享网站，或者直接将市面上一些 unity3d 的游戏进行解包提取资源，但这样做的游戏不要以任何方式发布。网站自行寻找，解包方面可以将游戏包在电脑里解压后，用 assetstudio 进行提取，非 unity 开发的游戏解包后如果有一些图片声音资源加密可以考虑用 idapro 静态分析反汇编等方式获取解密算法，或者直接用 010editor 看看文件头找找线索，这边不做赘述。</p>\n<ul>\n<li>本例人物、道路、障碍物、奖励道具模型均来自网络，ui 和音频文件来自我所玩的一款手游。</li>\n</ul>\n<p>游戏效果：<br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410220606396.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410220630814.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n<img data-src=\"https://img-blog.csdnimg.cn/20200410220801557.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaGlkbmFf,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\" /><br />\n关于具体的代码实现，我们后面几篇再分析。</p>\n<p>上述资源文件链接（.zip）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXgtWDJkYmJFVjByZ2o2M0xON0pOOVE=\">链接</span> 59te</p>\n<p>pc 端链接（.exe）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUJrUlAtYnEwSjU3YkcyNlZtV0FZWHc=\">链接</span> x1m7</p>\n<p>安卓端链接 (.apk)：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXhqTzc5LWppdkU1dklzZnVmam50V3c=\">链接</span> vv42</p>\n<p>链接失效可以联系补档，qq 2902560683 Echidna</p>\n<p>包含代码的工程文件会在后面几篇更完后放出来。</p>\n",
            "tags": [
                "unity"
            ]
        }
    ]
}